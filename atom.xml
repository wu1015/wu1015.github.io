<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wu1015&#39;s blog</title>
  
  
  <link href="http://wu1015.github.io/atom.xml" rel="self"/>
  
  <link href="http://wu1015.github.io/"/>
  <updated>2024-08-18T02:42:58.991Z</updated>
  <id>http://wu1015.github.io/</id>
  
  <author>
    <name>wu1015</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>FRP的无人监管设置</title>
    <link href="http://wu1015.github.io/2024/08/12/watchdog-frp/"/>
    <id>http://wu1015.github.io/2024/08/12/watchdog-frp/</id>
    <published>2024-08-12T06:46:33.000Z</published>
    <updated>2024-08-18T02:42:58.991Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起初"><a href="#起初" class="headerlink" title="起初"></a>起初</h2><ul><li>本着废物利用的目的，把移动的电视盒子刷成了Armbian，然后在上面挂Alist。但我也是终究没有弄到公网IP，也就只能通过内网穿透来解决这个问题。</li></ul><h3 id="电视盒子配置"><a href="#电视盒子配置" class="headerlink" title="电视盒子配置"></a>电视盒子配置</h3><ul><li>型号：MGV2000 JZ（九州）</li><li>处理器型号：s905l-b<ul><li>不确定，因为有部分人说是s905l2，但我之前看固件应该是s905-b（没错，-b指的就是有杜比）。</li><li>但我刷armbian的时候刷的是s905l2的uboot，除了网络之外一切正常（没错，就是没网，包括有线，无线与蓝牙。我还因此买了个RJ45转USB-A来保证连接）。</li><li>这部分有待更新（等有时间把散热片拿开看一眼）。</li></ul></li></ul><h2 id="无人监管的初步-定时重启"><a href="#无人监管的初步-定时重启" class="headerlink" title="无人监管的初步_定时重启"></a>无人监管的初步_定时重启</h2><ul><li>刚开始因为电视盒子所处环境的网络可能会周期性断开，所以我设置了每天0点自动重启。一开始还好，基本都能挂上，但越后面重启时间越久。刚开始以为是网络问题，重启一次可能不过，于是乎设置了每日两次重启。然而掉线的现象更加严重。</li><li>在一次排查中发现，电视盒子在重启之后有一定几率会重启失败，系统就卡在那，包括HDMI输出都没。</li></ul><h3 id="定时重启设置"><a href="#定时重启设置" class="headerlink" title="定时重启设置"></a>定时重启设置</h3><h4 id="创建一个新的服务"><a href="#创建一个新的服务" class="headerlink" title="创建一个新的服务"></a>创建一个新的服务</h4><ul><li><p>在<code>/etc/systemd/system/</code>目录创建一个服务，名字随便命名，这里为<code>reboot</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/systemd/system/reboot.service</span><br></pre></td></tr></table></figure></li><li><p>输入以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Reboot Service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">ExecStart=/sbin/reboot</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li></ul><h4 id="设置一个新的定时器"><a href="#设置一个新的定时器" class="headerlink" title="设置一个新的定时器"></a>设置一个新的定时器</h4><ul><li><p>在与刚刚创建的<code>reboot.service</code>的同级目录创建一个定时器，随便命名，这里同样为<code>reboot</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/systemd/system/reboot.timer</span><br></pre></td></tr></table></figure></li><li><p>输入以下内容并保存。（每天的2:30重启）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Reboot Timer</span><br><span class="line"></span><br><span class="line">[Timer]</span><br><span class="line">OnCalendar=*-*-* 02:30:00</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=timers.target</span><br></pre></td></tr></table></figure></li><li><p>启动定时器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable --now reboot.timer</span><br></pre></td></tr></table></figure></li><li><p>查看时间表，如果不出意外的话会看到一个名为<code>reboot.timer</code>的服务会在<code>02:30:00</code>执行，然后截止日期为<code>n/a</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl list-timers</span><br></pre></td></tr></table></figure></li></ul><h2 id="无人监管的进阶-看门狗"><a href="#无人监管的进阶-看门狗" class="headerlink" title="无人监管的进阶_看门狗"></a>无人监管的进阶_看门狗</h2><ul><li>因为重启可能导致的问题，我放弃了所有定时重启的选项，转而选择看门狗重启FRP服务。</li><li>用看门狗进行无人监管的原理其实很简单，就是通过定时对内网穿透出来的地址做访问，成功就不管，失败就调用FRP自带的重启。</li></ul><h3 id="看门狗设置"><a href="#看门狗设置" class="headerlink" title="看门狗设置"></a>看门狗设置</h3><h4 id="安装看门狗和netcat"><a href="#安装看门狗和netcat" class="headerlink" title="安装看门狗和netcat"></a>安装看门狗和netcat</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install watchdog netcat-openbsd</span><br></pre></td></tr></table></figure><h4 id="编辑检测FRP状态的脚本"><a href="#编辑检测FRP状态的脚本" class="headerlink" title="编辑检测FRP状态的脚本"></a>编辑检测FRP状态的脚本</h4><ul><li><p>在<code>/usr/local/bin</code>目录下创建一个名为<code>check_frp.sh</code>的文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/bin/check_frp.sh</span><br></pre></td></tr></table></figure></li><li><p>写入以下内容并保存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line"># FRP服务器的域名与端口号</span><br><span class="line">FRP_SERVER=&quot;your.frp.server&quot;</span><br><span class="line">FRP_PORT=&quot;7000&quot;</span><br><span class="line"></span><br><span class="line"># 写入的日志文件路径</span><br><span class="line">LOG_FILE=&quot;/var/log/frp_watchdog.log&quot;</span><br><span class="line"></span><br><span class="line"># 清理日志文件，保留最近3天的日志</span><br><span class="line">find $(dirname &quot;$LOG_FILE&quot;) -name &quot;$(basename &quot;$LOG_FILE&quot;)&quot; -type f -mtime +3 -exec rm &#123;&#125; \;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 记录脚本运行的时间</span><br><span class="line">echo &quot;$(date): Running FRP watchdog script.&quot; &gt;&gt; $LOG_FILE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 检查FRP的连接</span><br><span class="line">if ! nc -zv $FRP_SERVER $FRP_PORT 2&gt;&amp;1 | grep -q &#x27;succeeded&#x27;; then</span><br><span class="line">    echo &quot;$(date): FRP cannot connect to $FRP_SERVER:$FRP_PORT&quot; &gt;&gt; $LOG_FILE</span><br><span class="line">    # 重启FRP服务，注意修改配置文件路径</span><br><span class="line">    pkill frpc</span><br><span class="line">    /usr/local/bin/frpc -c /usr/local/bin/frpc.ini</span><br><span class="line">    echo &quot;$(date): FRP service restarted.&quot; &gt;&gt; $LOG_FILE</span><br><span class="line">    # exit 1  # 返回非零值以通知watchdog</span><br><span class="line">else</span><br><span class="line">    echo &quot;$(date): FRP is running and connected to the server.&quot; &gt;&gt; $LOG_FILE</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ul><h4 id="赋予脚本执行权限"><a href="#赋予脚本执行权限" class="headerlink" title="赋予脚本执行权限"></a>赋予脚本执行权限</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/check_frp.sh</span><br></pre></td></tr></table></figure><h4 id="配置看门狗调用脚本"><a href="#配置看门狗调用脚本" class="headerlink" title="配置看门狗调用脚本"></a>配置看门狗调用脚本</h4><ul><li><p>编辑看门狗的配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/watchdog.conf</span><br></pre></td></tr></table></figure></li><li><p>输入以下内容（文件本身有内容不用管，直接在最上面写入就是了。）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># Enable the watchdog daemon</span><br><span class="line">watchdog-device = /dev/watchdog</span><br><span class="line"></span><br><span class="line"># Interval between checks in seconds</span><br><span class="line">interval = 10</span><br><span class="line"></span><br><span class="line"># Max load average before watchdog triggers</span><br><span class="line">max-load-1 = 24</span><br><span class="line"></span><br><span class="line"># Watchdog will reboot system if load average remains high for this many seconds</span><br><span class="line">watchdog-timeout = 30</span><br><span class="line"></span><br><span class="line"># Run the custom script to check FRP status</span><br><span class="line">test-binary = /usr/local/bin/check_frp.sh</span><br><span class="line"></span><br><span class="line"># Exit watchdog if the test-binary returns 1, to trigger restart attempts</span><br><span class="line"># test-binary-exit-1 = yes</span><br></pre></td></tr></table></figure></li><li><p>启动看门狗并给予自启权限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start watchdog</span><br><span class="line"></span><br><span class="line">sudo systemctl enable watchdog</span><br></pre></td></tr></table></figure></li><li><p>查看看门狗状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status watchdog</span><br></pre></td></tr></table></figure></li><li><p>不出意外的话，如果断开FRP连接就会在指定目录生成日志文件。然后重启FRP服务。</p></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote><ul><li><a href="https://cloud.tencent.com/developer/article/2227856">Linux设置定时重启</a></li><li>ChatGPT</li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;起初&quot;&gt;&lt;a href=&quot;#起初&quot; class=&quot;headerlink&quot; title=&quot;起初&quot;&gt;&lt;/a&gt;起初&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;本着废物利用的目的，把移动的电视盒子刷成了Armbian，然后在上面挂Alist。但我也是终究没有弄到公网IP，也就只能通过内网</summary>
      
    
    
    
    <category term="日常" scheme="http://wu1015.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="Linux" scheme="http://wu1015.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>MOMO提示分区挂载异常问题解决以及Mix2s的类原生优化</title>
    <link href="http://wu1015.github.io/2024/08/09/mix2s-flash-root/"/>
    <id>http://wu1015.github.io/2024/08/09/mix2s-flash-root/</id>
    <published>2024-08-09T00:36:13.000Z</published>
    <updated>2024-08-09T00:55:52.653Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提说明"><a href="#前提说明" class="headerlink" title="前提说明"></a>前提说明</h2><ul><li>使用的是机器是MIX2S</li><li>面具：官方面具，版本为27.0</li><li>shamiko版本：1.1</li><li>momo版本：4.4.2</li><li>内核：sakura 2.5（4.9.332）</li></ul><h2 id="分区挂载异常"><a href="#分区挂载异常" class="headerlink" title="分区挂载异常"></a>分区挂载异常</h2><ul><li>经过测试发现在刷入面具、LSP框架和shamiko之后momo出现分区挂载异常的回报。</li><li><ul><li>在删除LSP后回报消失。</li></ul></li><li><ul><li>在删除shamiko之后回报消失。</li></ul></li><li><ul><li>在刷入内核前无<code>分区挂载异常回报</code>。</li></ul></li><li>结论：shamiko、LSP、第三方内核只能同时存在两个，出现第三个必定回报<code>分区挂载异常</code>。</li><li>解决：删掉一个，或者是放着不管，毕竟不太影响。经过测试，在momo回报<code>分区挂载异常</code>、<code>设备运行在非官方系统</code>、<code>发现代码注入</code>、<code>调试环境</code>、<code>BL已解锁</code>后仍然可以过钉钉（版本为7.5.1）打卡。（<code>发现代码注入</code>还没解决，这个是在我刷入XP模块后出现的）（在卸载掉LSP和模块后没有好转，可能需要重刷系统。这样一来又麻烦了许多，过momo与我大抵是无缘了吧）。</li></ul><h2 id="刷机常识"><a href="#刷机常识" class="headerlink" title="刷机常识"></a>刷机常识</h2><h3 id="刷机千万条，备份第一条"><a href="#刷机千万条，备份第一条" class="headerlink" title="刷机千万条，备份第一条"></a>刷机千万条，备份第一条</h3><ul><li>解锁BL请第一时间进行基带备份，以免被恶意格机。而且备份之后如果出现TEE损坏或者传感器失效也可以进行修复。备份教程见<a href="https://www.coolapk.com/feed/55599364">字库备份_CoolApk</a>。</li></ul><h3 id="第三方Rec的选取："><a href="#第三方Rec的选取：" class="headerlink" title="第三方Rec的选取："></a>第三方Rec的选取：</h3><ul><li>与系统对应：比如安卓11要刷入适配安卓11的Rec，否则可能会出现无法自动解锁data分区甚至直接就无法解锁的现象。（目前已知的TWRP表现为需要输入密码进行解锁，但输入啥都会提示解锁失败）</li><li>中文的适配：比如TWRP有很多第三方作者进行汉化，OrangeFox官方支持中文。</li></ul><h3 id="Rec的操作"><a href="#Rec的操作" class="headerlink" title="Rec的操作"></a>Rec的操作</h3><ul><li>双清：一般指清除cache和data分区。</li><li>四清：一般指清除cache、data、system、storage分区。</li><li>更新Rec就直接在Rec刷入目标Rec的卡刷包就行了。</li></ul><h3 id="刷入第三方内核"><a href="#刷入第三方内核" class="headerlink" title="刷入第三方内核"></a>刷入第三方内核</h3><ul><li>请在刷入前备份boot分区（如果可以的话data分区也备份一份）。</li><li>请在刷入前检查data分区是否解锁，如果在没解锁的情况下刷入基本就会卡第二屏。那么就只能双清解决了（data分区数据也就没了，不过内部存储的数据一般会在）。</li><li>刷入内核之后清除cache分区。</li></ul><h3 id="sui的使用"><a href="#sui的使用" class="headerlink" title="sui的使用"></a>sui的使用</h3><ul><li>sui是一个新的方案，比直接用面具进行root的授权更加的隐秘和安全，也更加高效，但基本没啥适配的应用，建议不要使用。</li></ul><h3 id="Thanxo（灭霸）"><a href="#Thanxo（灭霸）" class="headerlink" title="Thanxo（灭霸）"></a>Thanxo（灭霸）</h3><ul><li>新版本灭霸算是黒域与app-ops的结合，不过因为需要付费，而黒域有社区版，权限狗（app-ops的替代）是免费的，还是建议直接使用这两进行替代。</li><li>不过黒域不清楚咋回事，每次启动都会弄上<code>开发者设置</code>，实际去设置看的时候又没有，但momo还是检测出来了。只能去开启之后再关上才能解决momo提示的问题。</li></ul><h3 id="MiPush"><a href="#MiPush" class="headerlink" title="MiPush"></a>MiPush</h3><ul><li>小米机型非MIUI：<ul><li>在root的前提下下载mipush framework、mipush、mipush enhance。</li><li>刷入小米机型伪装的magisk模块。</li><li>如果有应用没有注册的话可以多试几次，一般在打开后就会注册，不行就清除应用数据。</li><li>个人测试好像只要mipush framework就行了（甚至都不需要机型伪装模块），也能直接推送，就是推送那不仅会有应用名称，也会有mipush framework的字样。（在注册了之后才测试的）</li></ul></li></ul><h3 id="Gcam"><a href="#Gcam" class="headerlink" title="Gcam"></a>Gcam</h3><ul><li>直接打开Gcam无法打开，出现闪退现象。</li><li>搜索microg gcam，进入对的github仓库然后下载安装就可以打开了。</li></ul><h3 id="更换Magisk卡第一屏无限重启"><a href="#更换Magisk卡第一屏无限重启" class="headerlink" title="更换Magisk卡第一屏无限重启"></a>更换Magisk卡第一屏无限重启</h3><ul><li>刷入原厂或者镜像的boot到boot分区。也就是恢复boot分区，因为Magisk修补的就是boot的镜像。</li><li>切换的时候注意要删除所有模块</li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote><ul><li><del>参考的文章太多，我也不记得有哪些了。</del></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前提说明&quot;&gt;&lt;a href=&quot;#前提说明&quot; class=&quot;headerlink&quot; title=&quot;前提说明&quot;&gt;&lt;/a&gt;前提说明&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用的是机器是MIX2S&lt;/li&gt;
&lt;li&gt;面具：官方面具，版本为27.0&lt;/li&gt;
&lt;li&gt;shamiko版本</summary>
      
    
    
    
    <category term="日常" scheme="http://wu1015.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="刷机" scheme="http://wu1015.github.io/tags/%E5%88%B7%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Docker配置Jupyter</title>
    <link href="http://wu1015.github.io/2024/08/02/docker-with-jupyter/"/>
    <id>http://wu1015.github.io/2024/08/02/docker-with-jupyter/</id>
    <published>2024-08-02T07:52:03.000Z</published>
    <updated>2024-08-09T00:33:08.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><ul><li><p>直接拉取镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ubuntu</span><br></pre></td></tr></table></figure></li><li><p>或者是从本地导入镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load --input 路径/文件名.tar</span><br></pre></td></tr></table></figure></li></ul><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><ul><li><p>注意要设置好端口，不然后面设置会很麻烦。要设置GPU的话也是一样，后面再弄会很麻烦。要么弄成个镜像再启动一遍，要么停止<code>docker</code>然后修改文件，具体应该可以度娘，这里就不再赘述。<code>IMAGE ID</code>可执行<code>docker images</code>得到，也就是镜像的<code>ID</code>。包括shm的配置也是，如果没有修改配置文件的话，默认为64M，这显然是不够用的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run --name 自己想要的名字 -it -p 本地端口:容器端口 IMAGE ID</span><br><span class="line"></span><br><span class="line">// 也可以不指定本地端口，让系统选一个空闲的端口</span><br><span class="line">docker run --name 自己想要的名字 -it -p 容器端口 IMAGE ID</span><br><span class="line"></span><br><span class="line">// 设置全部GPU</span><br><span class="line">docker run --gpus all --name 自己想要的名字 -it -p 容器端口 IMAGE ID</span><br><span class="line"></span><br><span class="line">// 设置使用主机的东西</span><br><span class="line">docker run -gpus all  --ipc=host --name wu1015 -it -p  本机端口:容器端口  ID </span><br></pre></td></tr></table></figure></li><li><p>启动容器后可以执行以下命令查看开放映射的端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure></li></ul><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="配置Python"><a href="#配置Python" class="headerlink" title="配置Python"></a>配置Python</h3><ul><li><p>在换源后直接执行安装。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install python3</span><br></pre></td></tr></table></figure></li><li><p>如果没有<code>pip</code>的话也可以这样安装，但请注意不要直接安装<code>pip</code>，而是应该安装<code>python3-pip</code>。否则在安装后执行<code>pip install</code>下载任务时会回报环境问题。</p></li><li><p>环境问题基本没有太好的解决方法，要么忽视，要么使用虚拟环境，要么使用<code>pipx</code>。虚拟环境的方法有些麻烦，请自行查阅<a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a>。一般认为，忽视都不算是什么好方法，毕竟后面可能会出现相应的环境冲突。所以基本都会使用<code>pipx</code>。但这肯定是不如原来的<code>pip</code>，所以还是选择删掉重下比较好。（可以通过<code>apt</code>来安装部分包，但因为大部分都不行，所以不进行考虑）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 忽视_方法一</span><br><span class="line">pip install package --break-system-packages</span><br><span class="line"></span><br><span class="line">// 忽视_方法二，请改为你的路径</span><br><span class="line">sudo mv /usr/lib/python3.12/EXTERNALLY-MANAGED /usr/lib/python3.12/EXTERNALLY-MANAGED.old</span><br><span class="line"></span><br><span class="line">// 使用pipx</span><br><span class="line">apt install pipx</span><br><span class="line"></span><br><span class="line">pipx install package</span><br></pre></td></tr></table></figure></li><li><p>当然你也可以选择删掉重下解决。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 删除之前安装的，删掉后再执行下pip和python3看看还在不在</span><br><span class="line">apt remove python3</span><br><span class="line">apt remove pip</span><br><span class="line">apt autoremove</span><br><span class="line"></span><br><span class="line">// 安装</span><br><span class="line">apt install python3</span><br><span class="line">apt install python3-pip</span><br></pre></td></tr></table></figure></li></ul><h3 id="配置其他基本环境"><a href="#配置其他基本环境" class="headerlink" title="配置其他基本环境"></a>配置其他基本环境</h3><ul><li><p>安装vim，git，curl，wget，7z，screen</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install vim git curl wget p7zip-full screen</span><br></pre></td></tr></table></figure></li><li><p>复制文件，那个id其实也能用名称，也就是创建容器时定义（或者后面改了的）的名称。<del>（其实都打算配置jupyter了，为啥不先配那个然后直接浏览器上传文件呢）</del></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 本地文件路径 CONTAINER ID:容器文件路径</span><br></pre></td></tr></table></figure></li></ul><h3 id="配置jupyter"><a href="#配置jupyter" class="headerlink" title="配置jupyter"></a>配置jupyter</h3><ul><li><p>安装配置jupyter</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jupyter</span><br></pre></td></tr></table></figure></li><li><p>生成默认配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件。因为生成的配置文件基本都是注释，完全可以直接添加。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /root/.jupyter/jupyter_notebook_config.py</span><br><span class="line"></span><br><span class="line">改为一下这些</span><br><span class="line">c.NotebookApp.allow_remote_access = True # 允许远程访问</span><br><span class="line">c.NotebookApp.ip=&#x27;0.0.0.0&#x27; # 自动获取服务器ip</span><br><span class="line">c.NotebookApp.allow_root =True # 打开root权限启动</span><br><span class="line">c.NotebookApp.open_browser = False # 服务端禁止自动打开浏览器</span><br><span class="line">c.NotebookApp.port = 2222 # 创建docker时候配置的端口号</span><br></pre></td></tr></table></figure></li><li><p>设置密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook password</span><br></pre></td></tr></table></figure></li><li><p>启动jupyter</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure></li><li><p>通过screen启动，名字爱取啥取啥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">启动一个窗口</span><br><span class="line">screen -S 名字</span><br><span class="line"></span><br><span class="line">// 启动jupyter</span><br><span class="line">jupyter notebook</span><br><span class="line"></span><br><span class="line">// 输入Ctrl a d退出窗口并保留运行</span><br><span class="line"></span><br><span class="line">// 查询窗口</span><br><span class="line">screen -ls</span><br><span class="line"></span><br><span class="line">// 进入已开启的窗口</span><br><span class="line">screen -r 名字</span><br></pre></td></tr></table></figure></li></ul><h3 id="jupyter使用需要注意的"><a href="#jupyter使用需要注意的" class="headerlink" title="jupyter使用需要注意的"></a>jupyter使用需要注意的</h3><ul><li><p>其实colab和这个都是一样的逻辑，只需要知道其中一个咋用，另一个也就知道了。</p></li><li><p>如果需要执行Linux命令，就在前面加一个<code>!</code>，后面正常接命令。请注意是英文的感叹号。例子如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!ls</span><br></pre></td></tr></table></figure></li><li><p>如果要切换目录，那么<code>!cd 目录</code>就不会生效了，需要使用<code>%</code>。例子如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%cd 目录</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote><ul><li><a href="https://stackoverflow.com/questions/75608323/how-do-i-solve-error-externally-managed-environment-every-time-i-use-pip-3">How do I solve “error: externally-managed-environment” every time I use pip 3?</a></li><li><a href="https://www.cnblogs.com/yourxiong/p/17692123.html">Docker安装配置JupyterNotebook详解</a></li><li><a href="https://www.runoob.com/linux/linux-comm-screen.html">Linux screen命令</a></li><li><a href="https://wu1015.github.io/2024/08/01/docker-base-usage">Docker的基本使用</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;拉取镜像&quot;&gt;&lt;a href=&quot;#拉取镜像&quot; class=&quot;headerlink&quot; title=&quot;拉取镜像&quot;&gt;&lt;/a&gt;拉取镜像&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;直接拉取镜像&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table</summary>
      
    
    
    
    <category term="笔记" scheme="http://wu1015.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Linux" scheme="http://wu1015.github.io/tags/Linux/"/>
    
    <category term="Docker" scheme="http://wu1015.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker的基本使用</title>
    <link href="http://wu1015.github.io/2024/08/01/docker-base-usage/"/>
    <id>http://wu1015.github.io/2024/08/01/docker-base-usage/</id>
    <published>2024-08-01T09:16:57.000Z</published>
    <updated>2024-08-02T02:55:09.380Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker的安装"><a href="#Docker的安装" class="headerlink" title="Docker的安装"></a>Docker的安装</h2><h3 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker \</span><br><span class="line">               docker-engine \</span><br><span class="line">               docker.io</span><br></pre></td></tr></table></figure><h3 id="使用apt安装"><a href="#使用apt安装" class="headerlink" title="使用apt安装"></a>使用apt安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure><ul><li>或者我这是没有上述的<code>docker-ce</code>等包，所以就安装了<code>docker-io</code>，但也能用。</li></ul><h3 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h3><ul><li><p>如果本地没有镜像会远程拉取。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure></li><li><p>然后在2024年的今天，在国内基本已经不能如此拉取了。甚至连几个大的镜像站也关闭了。因此需要添加其他的镜像站。</p></li><li><p>添加到<code>/etc/docker/daemon.json</code>，如果没有这个文件就创建一个。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure></li></ul><p>输入以下内容并保存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">    &quot;https://docker.m.daocloud.io&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Docker的操作"><a href="#Docker的操作" class="headerlink" title="Docker的操作"></a>Docker的操作</h2><h3 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h3><ul><li><p>查看的Docker版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --version</span><br></pre></td></tr></table></figure></li><li><p>查看Docker信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure></li><li><p>查看已有的镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></li><li><p>查看正在运行的容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p><img src="https://shp.qpic.cn/collector/1015650207/1de408d9-b4c4-43c9-bd6c-518d5146d7c9/0" alt="查看正在运行的容器"></p></li><li><p>关闭&#x2F;打开正在运行的容器。<code>CONTAINER ID</code>和<code>NAMES</code>为刚刚看到的容器属性，用哪个都行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop &lt;CONTAINER ID&gt; &lt;NAMES&gt;</span><br><span class="line">docker start &lt;CONTAINER ID&gt; &lt;NAMES&gt;</span><br></pre></td></tr></table></figure></li><li><p>进入已经打开了的容器，<code>CONTAINER ID</code>和<code>NAMES</code>为之前看到的容器属性，用哪个都行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach &lt;CONTAINER ID&gt; &lt;NAMES&gt;</span><br></pre></td></tr></table></figure></li><li><p>退出但不关闭容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 输入Ctrl P Q</span><br><span class="line"></span><br><span class="line">//退出并关闭容器</span><br><span class="line">exit</span><br></pre></td></tr></table></figure></li><li><p>修改容器名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rename 原容器名称 新容器名称</span><br></pre></td></tr></table></figure><p><img src="https://shp.qpic.cn/collector/1015650207/024f83b6-723d-4b3a-9fd2-cfbf500914c8/0" alt="修改容器名称"></p></li><li><p>删除容器。<code>CONTAINER ID</code>和<code>NAMES</code>为刚刚看到的容器属性，用哪个都行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rm &lt;CONTAINER ID&gt; &lt;NAMES&gt;</span><br><span class="line">docker rm &lt;CONTAINER ID&gt; &lt;NAMES&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="打包和导入导出镜像"><a href="#打包和导入导出镜像" class="headerlink" title="打包和导入导出镜像"></a>打包和导入导出镜像</h3><ul><li><p>将容器打包为镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker commit -m &quot;What you did to the image&quot; -a &quot;Author Name&quot; container_id repository/new_image_name</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">*参数说明</span><br><span class="line">*参数说明：</span><br><span class="line">*commit：提交命令</span><br><span class="line">*-m：提交的注释</span><br><span class="line">*-a：作者的名字</span><br><span class="line">*container_id：容器的id</span><br><span class="line">*repository/new_image_name：作者自定义的库名（一般和用户名一致）/镜像名*/</span><br></pre></td></tr></table></figure><p><img src="https://shp.qpic.cn/collector/1015650207/000255af-63e9-4d7e-9c08-9d4cf52a1e61/0" alt="容器打包为镜像"></p></li><li><p>导出容器的镜像,<code>CONTAINER ID</code>为之前看到的容器属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker export CONTAINER ID  &gt; 路径/文件名.tar</span><br><span class="line"></span><br><span class="line">//导出多个容器镜像为一个压缩包</span><br><span class="line">docker save CONTAINER ID CONTAINER ID CONTAINER ID  &gt; 路径/文件名.tar</span><br></pre></td></tr></table></figure></li><li><p>导入镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker import - 仓库:名称 &lt; 路径/文件.tar</span><br><span class="line"></span><br><span class="line">//从一个压缩包导入多个容器镜像</span><br><span class="line">docker load --input 路径/文件名.tar</span><br></pre></td></tr></table></figure></li><li><p>启动导入的镜像，<code>COMMAND</code>是之前看到的镜像的一个属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run 镜像id COMMAND</span><br></pre></td></tr></table></figure></li></ul><h3 id="直接下载镜像"><a href="#直接下载镜像" class="headerlink" title="直接下载镜像"></a>直接下载镜像</h3><ul><li><p>直接下载镜像而不下载docker。这么一来就不用过多担心国内无法拉取docker镜像的问题。完全可以直接挂梯子拉下来然后再导入进去。<del>（为什么不直接挂代理拉下来呢）</del></p></li><li><p>不过需要注意的是，拉下来后的导入应该使用<code>load</code>而不是<code>import</code>。</p></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote><ul><li><a href="https://cloud.tencent.com/developer/article/2434428">国内无法拉取Docker镜像了？这些方法拯救你的Docker</a></li><li><a href="https://github.com/DaoCloud/public-image-mirror">public-image-mirror </a></li><li><a href="https://blog.csdn.net/weixin_43117620/article/details/129217954">【一站式教程】Ubuntu利用Docker进行深度学习</a></li><li><a href="https://github.com/NotGlop/docker-drag">Github项目_docker-drag</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Docker的安装&quot;&gt;&lt;a href=&quot;#Docker的安装&quot; class=&quot;headerlink&quot; title=&quot;Docker的安装&quot;&gt;&lt;/a&gt;Docker的安装&lt;/h2&gt;&lt;h3 id=&quot;卸载旧版本&quot;&gt;&lt;a href=&quot;#卸载旧版本&quot; class=&quot;header</summary>
      
    
    
    
    <category term="笔记" scheme="http://wu1015.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Linux" scheme="http://wu1015.github.io/tags/Linux/"/>
    
    <category term="Docker" scheme="http://wu1015.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Xubuntu的SFTP在thunar上的使用</title>
    <link href="http://wu1015.github.io/2024/07/23/sftp-in-thunar/"/>
    <id>http://wu1015.github.io/2024/07/23/sftp-in-thunar/</id>
    <published>2024-07-23T07:40:19.000Z</published>
    <updated>2024-07-23T07:43:53.744Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正常使用"><a href="#正常使用" class="headerlink" title="正常使用"></a>正常使用</h2><ul><li>将sftp链接复制粘贴到thunar的地址栏上，回车就可以直接挂载了。</li><li>长时间不使用一定记得主动卸载掉。</li></ul><h2 id="异常解决"><a href="#异常解决" class="headerlink" title="异常解决"></a>异常解决</h2><ul><li>在长时间不用之后，sftp链接断开连接，但thunar没有及时中断，而是持续请求，这也会导致thunar直接卡死，重启进程，或是断网也无济于事。</li><li>只能重启解决或者使用ps命令查看sftp的进程，再直接kill掉。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps -A | grep sftp</span><br><span class="line">// 上面得到的pid</span><br><span class="line">kill pid xxx</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote><ul><li><a href="https://www.runoob.com/linux/linux-comm-kill.html">Linux kill命令_菜鸟教程</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;正常使用&quot;&gt;&lt;a href=&quot;#正常使用&quot; class=&quot;headerlink&quot; title=&quot;正常使用&quot;&gt;&lt;/a&gt;正常使用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;将sftp链接复制粘贴到thunar的地址栏上，回车就可以直接挂载了。&lt;/li&gt;
&lt;li&gt;长时间不使用一定记得主</summary>
      
    
    
    
    <category term="日常" scheme="http://wu1015.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="Linux" scheme="http://wu1015.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>PDF与图片的互相转换</title>
    <link href="http://wu1015.github.io/2024/07/19/pdf-convert/"/>
    <id>http://wu1015.github.io/2024/07/19/pdf-convert/</id>
    <published>2024-07-19T02:57:54.000Z</published>
    <updated>2024-07-19T03:00:06.323Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PDF转图片"><a href="#PDF转图片" class="headerlink" title="PDF转图片"></a>PDF转图片</h2><ul><li><p>众所周知，对PDF的编辑基本都是建立在对图片的修改上，那么如果将其相对无损的转化为图片就是首要的问题。</p></li><li><p>首先想到的就是截图，但这与无损相悖。那么就剩下提取了。可以使用命令将其提取出来。命令如下，会输出以<code>outputname</code>为前缀的图片。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pdftoppm input.pdf outputname -png</span><br></pre></td></tr></table></figure></li></ul><h2 id="图片转PDF"><a href="#图片转PDF" class="headerlink" title="图片转PDF"></a>图片转PDF</h2><ul><li>图片合并为PDF同样也是有命令<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert input.png input1.png output.pdf</span><br></pre></td></tr></table></figure></li></ul><p>如果名称基本相同的话也可以用通配符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert input&#123;01...12&#125;.png output.pdf</span><br></pre></td></tr></table></figure><h2 id="可能会遇到的问题"><a href="#可能会遇到的问题" class="headerlink" title="可能会遇到的问题"></a>可能会遇到的问题</h2><ul><li><p>报错<code>convert: attempt to perform an operation not allowed by the security policy &#39;PDF&#39; @ error/constitute.c/IsCoderAuthorized/408</code>。安全策略问题。前往&#x2F;etc&#x2F;ImageMagick-6&#x2F;policy.xml改对应行如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 原本</span><br><span class="line">&lt;policy domain=&quot;coder&quot; rights=&quot;none&quot; pattern=&quot;PDF&quot; /&gt;</span><br><span class="line">// 改为</span><br><span class="line">&lt;policy domain=&quot;coder&quot; rights=&quot;read|write&quot; pattern=&quot;PDF&quot; /&gt;</span><br></pre></td></tr></table></figure></li><li><p>报错<code>convert-im6.q16: cache resources exhausted </code>outputname_12.png’ @ error&#x2F;cache.c&#x2F;OpenPixelCache&#x2F;4095.&#96;。爆内存问题。因为默认设置只有256MiB，去之前的配置文件改对应内存配置就可以了。</p></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote><ul><li><a href="https://blog.csdn.net/u013919171/article/details/113520520">在ubuntu上如何将多张图片或PDF合到一个PDF上</a></li><li><a href="https://github.com/ImageMagick/ImageMagick/issues/396#issuecomment-319569255">ImageMagick  Memory issues #396 </a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;PDF转图片&quot;&gt;&lt;a href=&quot;#PDF转图片&quot; class=&quot;headerlink&quot; title=&quot;PDF转图片&quot;&gt;&lt;/a&gt;PDF转图片&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;众所周知，对PDF的编辑基本都是建立在对图片的修改上，那么如果将其相对无损的转化为图片就是</summary>
      
    
    
    
    <category term="日常" scheme="http://wu1015.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="PDF" scheme="http://wu1015.github.io/tags/PDF/"/>
    
  </entry>
  
  <entry>
    <title>更新Hexo出现的一些问题</title>
    <link href="http://wu1015.github.io/2024/07/19/hexo-update-mark/"/>
    <id>http://wu1015.github.io/2024/07/19/hexo-update-mark/</id>
    <published>2024-07-19T02:04:14.000Z</published>
    <updated>2024-07-19T02:12:43.450Z</updated>
    
    <content type="html"><![CDATA[<h2 id="先说结果"><a href="#先说结果" class="headerlink" title="先说结果"></a>先说结果</h2><ul><li>使用 nvm 进行安装，问题并没有被解决但也还算是解决吧，毕竟能用就行。</li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li>在执行<code>apt install npm</code>时出现依赖问题无法安装，如下所示。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">有一些软件包无法被安装。如果您用的是 unstable 发行版，这也许是因为系统无法达到您要求的状态造成的。该版本中可能会有一些您需要的软件包尚未被创建或是它们已被从新到(Incoming)目录移出。下列信息可能会对解决问题有所帮助：</span><br><span class="line"></span><br><span class="line">下列软件包有未满足的依赖关系：</span><br><span class="line"> npm : 依赖: node-agent-base 但是它将不会被安装</span><br><span class="line">依赖: node-aproba 但是它将不会被安装</span><br><span class="line">依赖: node-archy 但是它将不会被安装</span><br><span class="line">依赖: node-cacache 但是它将不会被安装</span><br><span class="line">依赖: node-chalk 但是它将不会被安装</span><br><span class="line">依赖: node-cli-table3</span><br><span class="line">依赖: node-colors 但是它将不会被安装</span><br><span class="line">依赖: node-columnify 但是它将不会被安装</span><br><span class="line">依赖: node-debug 但是它将不会被安装</span><br><span class="line">依赖: node-emoji-regex</span><br><span class="line"> 依赖: node-got 但是它将不会被安装</span><br><span class="line">依赖: node-graceful-fs 但是它将不会被安装</span><br><span class="line">依赖: node-gyp 但是它将不会被安装</span><br><span class="line">依赖: node-https-proxy-agent 但是它将不会被安装</span><br><span class="line">依赖: node-mkdirp 但是它将不会被安装</span><br><span class="line">依赖: node-ms 但是它将不会被安装</span><br><span class="line">依赖: node-nopt 但是它将不会被安装</span><br><span class="line">依赖: node-normalize-package-data 但是它将不会被安装</span><br><span class="line">依赖: node-npm-package-arg 但是它将不会被安装</span><br><span class="line">依赖: node-npmlog 但是它将不会被安装</span><br><span class="line">依赖: node-read-package-json 但是它将不会被安装</span><br><span class="line">依赖: node-rimraf 但是它将不会被安装</span><br><span class="line">依赖: node-semver 但是它将不会被安装</span><br><span class="line">依赖: node-ssri 但是它将不会被安装</span><br><span class="line">依赖: node-string-width 但是它将不会被安装</span><br><span class="line">依赖: node-strip-ansi 但是它将不会被安装</span><br><span class="line">依赖: node-tar 但是它将不会被安装</span><br><span class="line">依赖: node-validate-npm-package-name 但是它将不会被安装</span><br><span class="line">依赖: node-which 但是它将不会被安装</span><br><span class="line">依赖: node-write-file-atomic 但是它将不会被安装</span><br><span class="line">依赖: nodejs:any (&gt;= 10)</span><br><span class="line">推荐: node-tap 但是它将不会被安装</span><br><span class="line">E: 无法修正错误，因为您要求某些软件包保持现状，就是它们破坏了软件包间的依赖关系。</span><br></pre></td></tr></table></figure></li></ul><h2 id="解决方法-安装nvm"><a href="#解决方法-安装nvm" class="headerlink" title="解决方法_安装nvm"></a>解决方法_安装nvm</h2><ul><li><p>打开终端安装nvm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash</span><br></pre></td></tr></table></figure></li><li><p>重启终端并输入<code>nvm</code>测试是否安装成功。</p></li><li><p>安装最新版node，如需指定版本直接将nodejs换为对应版本号即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install node</span><br></pre></td></tr></table></figure></li></ul><h2 id="更新hexo"><a href="#更新hexo" class="headerlink" title="更新hexo"></a>更新hexo</h2><ul><li><p>安装ncu进行更新检查</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -g npm-check-updates</span><br><span class="line">ncu -u</span><br></pre></td></tr></table></figure></li><li><p>使用npm进行更新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li><p>查看hexo版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure></li></ul><h2 id="文章起初"><a href="#文章起初" class="headerlink" title="文章起初"></a>文章起初</h2><ul><li>因为之前了解到hexo高版本对文章的生成性能有优化， 毕竟我也不想生成个文章花老久时间，使用萌生了升级hexo版本的想法。<a href="https://d-sketon.top/20231111/hexo-generate-benchmark/">Hexo 5&#x2F;6&#x2F;7 生成文章性能对比_by d-sketon</a></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote><ul><li><a href="https://stackoverflow.com/questions/39981828/installing-nodejs-and-npm-on-linux/39981888#39981888">Installing nodejs and npm on linux</a></li><li><a href="https://bambrow.com/20211124-hexo-next-upgrade/">Hexo 静态博客升级指南（2021 年版） </a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;先说结果&quot;&gt;&lt;a href=&quot;#先说结果&quot; class=&quot;headerlink&quot; title=&quot;先说结果&quot;&gt;&lt;/a&gt;先说结果&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用 nvm 进行安装，问题并没有被解决但也还算是解决吧，毕竟能用就行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;</summary>
      
    
    
    
    <category term="日常" scheme="http://wu1015.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="Linux" scheme="http://wu1015.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>软件测试基础学习</title>
    <link href="http://wu1015.github.io/2024/07/01/SoftwareTestingLearning/"/>
    <id>http://wu1015.github.io/2024/07/01/SoftwareTestingLearning/</id>
    <published>2024-07-01T10:56:33.000Z</published>
    <updated>2024-07-01T11:00:11.571Z</updated>
    
    <content type="html"><![CDATA[<h2 id="软件测试基础学习"><a href="#软件测试基础学习" class="headerlink" title="软件测试基础学习"></a>软件测试基础学习</h2><ul><li><p>什么是静态测试：静态测试是指不运行被测试的软件系统，而是采用其他手段和技术对被测试软件进行检测的一种测试技术。</p></li><li><p>什么是动态测试：动态测试是一种测试方法，通过运行软件程序并输入不同的数据和操作，以检查程序的实际行为和输出结果是否符合预期。 动态测试可以帮助发现软件程序中的错误和缺陷，包括功能错误、性能问题、安全漏洞等。</p></li><li><p>什么是黑盒测试：黑盒测试又称为“功能测试”，是将测试对象看做一个黑盒，在并不考虑软件产品的内部结构和处理过程的基础上对软件产品进行功能测试。黑盒测试注重软件产品的“功能性需求”。</p></li><li><p>什么是白盒测试：白盒测试，又称结构测试，主要用于单元测试阶段。它的前提是可以把程序看成装在一个透明的白箱子里，测试者完全知道程序的结构和处理算法。这种方法按照程序内部逻辑设计测试用例，检测程序中的主要执行通路是否都能按预定要求正常工作。 白盒测试根据软件的内部逻辑设计测试用例，常用的技术是逻辑覆盖，即考察用测试数据运行被测程序时对程序逻辑的覆盖程度。主要的覆盖标准有 6 种：语句覆盖、判定覆盖、条件覆盖、判定&#x2F;条件覆盖、组合条件覆盖和路径覆盖。</p></li><li><p>什么是单元测试：单元测试又称为模块测试，是针对程序模块（软件设计的最小单位）来进行正确性检验的测试工作。程序单元是应用的最小可测试部件。</p></li><li><p>什么是集成测试：集成测试被定义为一种测试类型，其中软件的不同模块被集成并作为一个整体进行测试。一个典型的软件项目由多个软件模块组成，这些模块由不同的程序员进行编码。集成测试的目的是在集成这些不同的软件模块时揭示它们之间交互中的缺陷。集成测试专注于检查这些模块之间的数据通信。因此，它也被称为“ I＆T” （集成和测试）。</p></li><li><p>简述缺陷产生原因：</p><ul><li>软件缺陷就是通常所说的Bug，它是指软件中(包括程序和文档)存在的影响软件正常运行的问题。IEEE(Institute of Electrical and Electronics Engineers，电气电子工程师协会)729-1983标准对软件缺陷有一个标准的定义：从产品内部看,缺陷是产品开发或维护过程中存在的错误、毛病等各种问题;从产品外部看，缺陷是系统运行过程中某种功能的失效或违背。</li><li>软件缺陷的产生主要是由软件产品的特点和开发过程决定的，比如需求不清晰、需求频繁变更、软件结构复杂、编码问题、项目期限短、使用新技术、开发人员水平有限等。</li></ul></li><li><p>静态测试与动态测试区别：</p><ul><li>它们的主要区别在于测试时是否需要运行被测试的程序。</li><li>静态测试 主要是在不运行程序的情况下进行，通过分析代码、审查需求文档来查找错误， 动态测试 则是在程序运行的状态下执行，通过输入测试用例验证程序的实际运行结果和预期结果是否一致。</li></ul></li><li><p>黑盒与白盒测试的相关方法，黑盒白盒测试优缺点：</p><ul><li><blockquote><p><a href="https://blog.csdn.net/qq_42944594/article/details/121907540">白盒</a>、<a href="https://www.itest.info/wiki/white-box-testing">白盒详解</a>、 <a href="https://wiki.mbalib.com/wiki/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95">黑盒</a></p></blockquote></li><li>黑盒测试：<ul><li>方法：等价类划分法、边界值分析法、因果图分析法、错误推断法，场景法。</li><li>优点：独立性、用户视角、提早发现问题。</li><li>缺点：不可见内部性、缺乏结构性反馈</li></ul></li><li>白盒测试：<ul><li>方法：分为两大类：静态测试方法和动态测试方法。<ul><li>静态：代码审查法、静态结构分析法</li><li>动态：逻辑覆盖法、基本路径测试法</li></ul></li><li>优点：内部可见性、全面覆盖性、性能和安全性检查</li><li>缺点：需要专业知识、依赖源码</li></ul></li></ul></li><li><p>软件测试的复杂性：</p><ul><li>主要体现在：<ul><li>不可能对程序实现完全测试</li><li>杀虫剂现象，必须不断尝试新的杀虫剂（写新的测试程序）</li><li>代价会随着测试量的增加程指数增长</li><li>风险的合理取舍，并不是所有故障都需要被修复</li></ul></li></ul></li><li><p>单元测试的目标：确保每个单元都能独立地正常工作，从而提高整个程序的质量、可靠性和可维护性</p></li><li><p>系统测试的流程：</p><ul><li>需求分析 -&gt; 测试计划 -&gt; 测试用例 -&gt; 测试执行 -&gt; 测试文档</li></ul></li><li><p>测试环境要素有哪些：</p><ul><li>软件、硬件、网络、数据准备、测试工具</li></ul></li></ul><h3 id="名词解析"><a href="#名词解析" class="headerlink" title="名词解析"></a>名词解析</h3><ul><li>测试环境：为了完成软件测试工作所必需的计算机硬件、软件、网络设备、历史数据的总称</li><li>备份：为应付文件、数据丢失或损坏等可能出现的意外情况，将电子计算机存储设备中的数据复制到磁带等大容量存储设备中。</li><li>恢复：使变成原来的样子，在计算机中指被删除的数据得到复原。</li><li>硬件环境：指计算机系统中的硬件设备，如CPU、内存、硬盘等</li><li>网络环境：网络环境是指将分布在不同地点的多个多媒体计算机物理上互联，依据某种协议互相通信，实现软、硬件及其网络文化共享的系统。</li><li>软件环境：运行于计算机硬件之上的驱动计算机及其外围设备实现某种目的的软件系统</li><li>面向对象：面向对象编程将一个系统抽象为许多对象的集合，每一个对象代表了这个系统的特定方面。对象包括函数（方法）和数据。</li><li>消息：消息（message）是指在程序中传递的信息或指令。 它可以是用于传递数据的信息，也可以是用于触发特定操作的指令。 消息通常用于实现程序之间的通信和交互。 在面向对象编程中，对象之间通过消息进行通信。 </li><li>封装性：封装，即隐藏对象的属性和实现细节，仅对外公开接口，控制在程序中属性的读和修改的访问级别；将抽象得到的数据和行为（或功能）相结合，形成一个有机的整体，也就是将数据与操作数据的源代码进行有机的结合，形成“类”，其中数据和函数都是类的成员。</li><li>继承性：继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。</li><li>多态性：它是指在父类中定义的属性和方法被子类继承之后，可以具有不同的数据类型或表现出不同的行为，这使得同一个属性或方法在父类及其各个子类中具有不同的含义。</li><li>类测试：用来对类中的方法功能进行有目的的测试，以保证程序的正确性和稳定性。</li></ul><h3 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h3><ul><li><p>概述测试用例的设计过程：</p><ul><li>步骤为：测试需求分析 -&gt; 业务流程分析 -&gt; 测试用例设计 -&gt; 测试用例评审 -&gt; 测试用例更新完善</li></ul></li><li><p>测试文档的内容：</p><ul><li>1、测试范围（功能模块等）；2、测试类型（功能、性能、安全等）；3、测试资源（硬件、软件、人员等）；4、人员、进度安排。</li></ul></li><li><p>软件生命周期各阶段的测试任务与可交付的文档：</p><ul><li>问题定义（问题定义报告）、可行性研究（可行性分析报告，粗略的开发计划）、需求分析（需求规格说明书）、总体设计（总体设计说明书）、详细设计（详细设计说明书）、编码与单元测试（程序清单、单元测试报告）、综合测试（测试报告）、维护（）</li></ul></li><li><p>自动化测试的步骤、自动化测试工具的使用：</p><ul><li>暂略</li></ul></li><li><p>面向对象测试与传统测试有哪些区别与联系：</p><ul><li>面向对象测试更加关注对象的行为和交互，而传统测试更加关注系统的功能和流程。</li><li>都需要进行测试计划和测试用例的编写，都需要测试执行和测试结果分析，都是为了保障软件的质量和功能的正确性可靠性。</li></ul></li><li><p>面向对象测试的步骤：</p><ul><li>步骤：为类创建一个实例，即对象，为构造函数传递合适的参数 -&gt; 通过参数传递调用对象的方法并获取结果 -&gt; 检查对象的内部数据</li></ul></li><li><p>压力测试作用：确定在交通繁忙的情况下网站或应用程序的稳定性和可靠性。向访问者显示相应的错误消息和其他信息。优化系统以防止故障。正确规划可伸缩性和资源需求。</p></li><li><p>兼容性测试是什么：兼容性测试在软件测试中是一种非功能性测试方法，确保应用程序在不同硬件、操作系统、网络环境和其他软件应用的组合上正常运行。</p></li><li><p>软件工程V模型流程包括哪些步骤：客户需求分析、软件需求分析、概要设计、详细设计、编码与实现、单元测试、集成测试、系统测试、验收测试。</p></li><li><p>测试用例设计的主要影响因素：需求目标、实际使用场景、软件功能规格说明书、产品设计文档</p></li><li><p>工程使用决策表有哪4部分组成：桩部分、条目部分、条件部分、行动部分</p></li><li><p>在错误推测法中，根据什么因素进行判断好测试用例：</p><ul><li>客观因素：产品先前版本的问题</li><li>已知因素：语言、操作系统、浏览器的限制可能带来的兼容性等问题</li><li>经验：利用不同测试阶段的经验和对测试软件的需求理解以及设计实现的细节来整理归纳的测试点</li></ul></li><li><p>给出流程图G，设计环形复杂度V（G），三种常用计算机方法</p><ul><li><blockquote><p><a href="https://blog.csdn.net/qq_39183034/article/details/122460548">环路复杂度</a></p></blockquote></li><li>V(G) &#x3D; 区域数</li><li>V(G) &#x3D; P + 1，判定结点数 + 1</li><li>V(G) &#x3D; E - N + 2，边的条数 - 结点数 +2</li></ul></li><li><p>测试总结报告包括哪些内容：测试目的、重要项说明、系统概述、测试环境、差异测试项与设计说明之间的差别、测试充分性评价、质量评估、结果概述、测试结论。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;软件测试基础学习&quot;&gt;&lt;a href=&quot;#软件测试基础学习&quot; class=&quot;headerlink&quot; title=&quot;软件测试基础学习&quot;&gt;&lt;/a&gt;软件测试基础学习&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;什么是静态测试：静态测试是指不运行被测试的软件系统，而是采用其他手段和技术</summary>
      
    
    
    
    <category term="笔记" scheme="http://wu1015.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="软件测试" scheme="http://wu1015.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>CRC校验的C语言实现</title>
    <link href="http://wu1015.github.io/2024/06/27/CRCLearningByC/"/>
    <id>http://wu1015.github.io/2024/06/27/CRCLearningByC/</id>
    <published>2024-06-27T11:40:26.000Z</published>
    <updated>2024-06-27T14:47:06.865Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CRC校验"><a href="#CRC校验" class="headerlink" title="CRC校验"></a>CRC校验</h2><ul><li>循环冗余校验（英语：Cyclic redundancy check，通称“CRC”）是一种根据网络数据包或电脑文件等数据产生简短固定位数校验码的一种散列函数，主要用来检测或校验数据传输或者保存后可能出现的错误。生成的数字在传输或者存储之前计算出来并且附加到数据后面，然后接收方进行检验确定数据是否发生变化。由于本函数易于用二进制的电脑硬件使用、容易进行数学分析并且尤其善于检测传输通道干扰引起的错误，因此获得广泛应用。此方法是由W. Wesley Peterson于1961年发表。</li></ul><h3 id="多项式G-x"><a href="#多项式G-x" class="headerlink" title="多项式G(x)"></a>多项式<code>G(x)</code></h3><ul><li><p>多项式为双方共同约定使用，常见的多项式有：</p><ul><li>CRC-4 &#x3D;&gt; x<sup>4</sup>+x<sup>1</sup>+x<sup>0</sup> &#x3D;&gt; 10011</li><li>CRC-8 &#x3D;&gt; x<sup>8</sup>+x<sup>5</sup>+x<sup>4</sup>+x<sup>0</sup> &#x3D;&gt; 100110001 等。</li></ul></li><li><p>因为多项式第一项必为 1，因此简记一般除去第一位后进行 16 进制计算。以上两种多项式的简记分别为0x03和0x31。</p></li></ul><h3 id="计算步骤"><a href="#计算步骤" class="headerlink" title="计算步骤"></a>计算步骤</h3><ul><li><p>首先是接收数据和多项式。</p></li><li><p>然后对数据进行处理，假定计算后的 Remainder 为0，对数据补 0。</p></li><li><p>使用模 2 除法计算 Remainder。模 2 除法例子如下。<br><img src="https://shp.qpic.cn/collector/1015650207/a417dcaa-e75c-4e4c-95fe-6aef4c3f328a/0" alt="模 2 除法的例子"></p></li><li><p>将计算好的 Remainder 与原 data 结合后再进行模 2 除法计算。</p></li><li><p>如果得出为 0，则数据无误，否则有错误。</p></li></ul><h2 id="C语言实现"><a href="#C语言实现" class="headerlink" title="C语言实现"></a>C语言实现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">// CRC算法的C语言实现</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">// 获取字符数组长度</span><br><span class="line">int len(char x[])&#123;</span><br><span class="line">    int i=0;</span><br><span class="line">    while(x[i]!=&#x27;\0&#x27;)&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    return i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 补全data</span><br><span class="line">void dataSet(char data[], int len_poly, char remainder[])&#123;</span><br><span class="line">    int i, len_data;</span><br><span class="line">    len_data=len(data);</span><br><span class="line">    if(remainder[0]==&#x27;\0&#x27;)&#123;</span><br><span class="line">        for(i=len_data; i&lt;len_data+len_poly-1; i++)&#123;</span><br><span class="line">            data[i]=&#x27;0&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        for(i=len_data-len_poly+1; i&lt;len_data+1; i++)&#123;</span><br><span class="line">            data[i]=remainder[i-len_data+len_poly-1];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// remainder计算</span><br><span class="line">void crc(char data[], char poly[], char remainder[], int len_data, int len_poly)&#123;</span><br><span class="line">    char tmp[100]=&#123;&#x27;\0&#x27;&#125;;</span><br><span class="line">    int i,j;</span><br><span class="line">    // 因为传参数组会对原数据进行修改（相当于传址）</span><br><span class="line">    for(i=0;i&lt;len_data;i++)&#123;</span><br><span class="line">        tmp[i]=data[i];</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=0;i&lt;len_data-len_poly;i++)&#123;</span><br><span class="line">        if(tmp[i]!=&#x27;0&#x27;)&#123;</span><br><span class="line">            for(j=i;j&lt;i+len_poly;j++)&#123;</span><br><span class="line">                tmp[j]=(tmp[j]-48) ^ (poly[j-i]-48)+48;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else if(tmp[i+1]!=&#x27;0&#x27;)&#123;</span><br><span class="line">           for(j=i+1;j&lt;i+1+len_poly;j++) &#123;</span><br><span class="line">                tmp[j]=(tmp[j]-48) ^ (poly[j-1-i]-48)+48;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=0;i&lt;len_poly;i++)&#123;</span><br><span class="line">        remainder[i]=tmp[len_data-len_poly+1+i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 测试CRC</span><br><span class="line">void crcTest(char remainder[])&#123;</span><br><span class="line">    int i;</span><br><span class="line">    for(i=0;i&lt;len(remainder);i++)&#123;</span><br><span class="line">        if(remainder[i]!=&#x27;0&#x27;)&#123;</span><br><span class="line">            printf(&quot;False\n&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;True\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    char data[100]=&#123;&#x27;0&#x27;&#125;;</span><br><span class="line">    char polynomial[10]=&#123;&#x27;\0&#x27;&#125;;</span><br><span class="line">    char remainder[10]=&#123;&#x27;\0&#x27;&#125;;</span><br><span class="line">    scanf(&quot;%s&quot;,data);   //11010011101100</span><br><span class="line">    scanf(&quot;%s&quot;,polynomial); // 10011</span><br><span class="line">    printf(&quot;%d %d\n&quot;,len(data),len(polynomial));</span><br><span class="line">    printf(&quot;Data is %s\n&quot;,data);</span><br><span class="line"></span><br><span class="line">    dataSet(data,len(polynomial),remainder);</span><br><span class="line">    crc(data, polynomial, remainder, len(data),len(polynomial));</span><br><span class="line">    printf(&quot;Remainder is %s\n&quot;,remainder);  //1011</span><br><span class="line"></span><br><span class="line">    dataSet(data,len(polynomial),remainder);</span><br><span class="line">    printf(&quot;CRC is %s\n&quot;,data); //110100111011001011</span><br><span class="line">    crc(data, polynomial, remainder, len(data),len(polynomial));</span><br><span class="line">    crcTest(remainder); //True</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote><ul><li><a href="https://en.wikipedia.org/wiki/Cyclic_redundancy_check">循环冗余校验 wiki</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CRC校验&quot;&gt;&lt;a href=&quot;#CRC校验&quot; class=&quot;headerlink&quot; title=&quot;CRC校验&quot;&gt;&lt;/a&gt;CRC校验&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;循环冗余校验（英语：Cyclic redundancy check，通称“CRC”）是一种根据网络数据包</summary>
      
    
    
    
    <category term="笔记" scheme="http://wu1015.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C语言" scheme="http://wu1015.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Colab的简单使用</title>
    <link href="http://wu1015.github.io/2024/06/03/ColabUsage/"/>
    <id>http://wu1015.github.io/2024/06/03/ColabUsage/</id>
    <published>2024-06-03T12:34:34.000Z</published>
    <updated>2024-06-03T12:43:47.305Z</updated>
    
    <content type="html"><![CDATA[<h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ul><li><p>Colab，免费用户可使用 T4 GPU 和 CPU。T4 虽然不说有多强吧，但至少能比用 CPU 跑强不少。不仅如此，因为不是在本地，所以一些库的安装也是飞快的（毕竟在国内不换源的话，下载速度确实不太行），而且最关键的是不占用本地空间。</p></li><li><p>建议把文件存储的 google drive 以便调用，不然存在 Colab 下线就会被清除。咱这网络环境大伙都知道，传个大点的文件本来就不容易，更何况 Colab 还没有断点续传。所以也就更建议使用 google drive 传输文件，毕竟到时候用的话只需要授权一下而已。</p></li><li><p>与国内的 AI 计算平台相比，Colab 没广告，没那种莫名其妙突然恶心你一下的东西。</p></li></ul><h2 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h2><ul><li><p>跑的时候需要一直在活动窗口，人话说就是得一直有人在移动窗口表示我还在线，否则直接中断连接（免费用户）。另外跑的计算量也有限，跑一些小的东西还行，跑大的东西过一些一天的额度就没了。没错，这个是有每日额度的，具体多少不知道，但是是以计算单位来算的。</p></li><li><p>不登录好像就不给看，这点确实不太好，毕竟国内的有些平台是给浏览的。</p></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>虽然 Colab 基本啥库都有，但不免会出现意外。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!pip install 模块名称</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;优势&quot;&gt;&lt;a href=&quot;#优势&quot; class=&quot;headerlink&quot; title=&quot;优势&quot;&gt;&lt;/a&gt;优势&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Colab，免费用户可使用 T4 GPU 和 CPU。T4 虽然不说有多强吧，但至少能比用 CPU 跑强不少。不仅如此，因</summary>
      
    
    
    
    <category term="日常" scheme="http://wu1015.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="人工智能" scheme="http://wu1015.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>WPS For Linux几个版本的体验</title>
    <link href="http://wu1015.github.io/2024/05/01/WPSForLinuxUse/"/>
    <id>http://wu1015.github.io/2024/05/01/WPSForLinuxUse/</id>
    <published>2024-05-01T05:10:59.000Z</published>
    <updated>2024-06-17T02:25:53.970Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WPS"><a href="#WPS" class="headerlink" title="WPS"></a>WPS</h2><p>在使用办公软件的过程中时常会存在 word 文档互相传递的场景，而众所周知，无论是 OpenOffice 还是还是 LibreOffice 都对 MSOffice 存在一定的兼容性问题。比如说格式出错，排版出错等。这时就不得不想起我们的<del>民族之光</del> WPS 了。</p><p>WPS 在 Ubuntu 上有很多种安装方法，最常见的就是直接去官网下载安装 deb 包，其次还有 snap，flatpak 版。接下来我就根据自己的个人需求，大概体验一下这些版本。</p><h2 id="With-Deb"><a href="#With-Deb" class="headerlink" title="With Deb"></a>With Deb</h2><ul><li><p>安装方法：官网下载 deb 包ver-11.1.0.11691，在目录打开终端输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i wps文件名</span><br></pre></td></tr></table></figure></li><li><p>有的不说，WPS 还是不错的，和众多 Linux 原生应用一样，干净又好用，尽管样式栏还是会出现乱码问题，但又不大影响正常使用，瑕不掩瑜了属于是。<br><img src="https://shp.qpic.cn/collector/1015650207/648d1d5a-40e6-4932-b9c5-3f449beadb64/0" alt="deb 版的样式乱码"></p></li><li><p>不过我还是不大想用它，一是因为安装的的时候会把所有办公文档的默认打开方式都改为 WPS，而且桌面图标也会随之更改；二是我一般很少用到 WPS 的同步功能，也就是说偶尔弹出的登录选项对我来说就像是牛皮癣一样的东西；最后，WPS 之前有锁用户文件的丑闻（尽管官方和当事人都回应不是本地文件），所以我不大想让 WPS 联网或者是读取我太多的文件。</p></li></ul><h2 id="With-Snap"><a href="#With-Snap" class="headerlink" title="With Snap"></a>With Snap</h2><ul><li><p>安装方法：因为我是 Ubuntu，自带 snap ，直接去发行版带的软件中心下载就是了ver-11.1.0.9505。</p></li><li><p>snap 版倒还不错，snap 有 2016 和 2019 两个版本，两者都缺少中文语言包（所以界面都是英文的）。不过可以通过把其他版本的 WPS 语言包放进去解决（教程见文章末尾）。</p></li><li><p>snap 两个版本都不支持登录，换言之都删除了登录（或者说联网）功能。</p></li><li><p>2019 版和 deb 版基本相同，感觉不错只是部分功能有问题（如作者所言），点击通用设置或者主题会闪退（其实在主界面那除了新建和打开文档，其他都闪退）。另外我还出现了黑暗模式设置界面的字体跟随变化的情况（白底白字，黑底黑字那种）。在查找资料后，发现需要改为 gtk2 启动才行（但我修改后还是不行）。<br><img src="https://shp.qpic.cn/collector/1015650207/60b8e792-a0ff-4357-9542-381421aa9331/0" alt="2019 版的设置界面字体跟随 bug"></p></li><li><p>2019 版也会和 deb 版一样，有几个样式还是会乱码，虽然也不太影响正常使用。<br><img src="https://shp.qpic.cn/collector/1015650207/2f35a8c3-c3c0-4897-a982-777f750249c9/0" alt="snap 版样式乱码"></p></li><li><p>2016 版具体 bug 似乎没啥，就是界面有点古老了，不大喜欢。<br><img src="https://shp.qpic.cn/collector/1015650207/a8f280ba-32cc-4dcc-8b47-b79246e9a89d/0" alt="snap 的 2016 版界面"></p></li></ul><h2 id="With-Flatpak"><a href="#With-Flatpak" class="headerlink" title="With Flatpak"></a>With Flatpak</h2><ul><li><p>安装方法：</p><ol><li><p>安装 flatpak ver-11.1.0.11719：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install flatpak</span><br></pre></td></tr></table></figure></li><li><p>添加 flathub 仓库：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo</span><br><span class="line"></span><br><span class="line">// 下面这句是添加上海交大的源，速度快点</span><br><span class="line">sudo flatpak remote-modify flathub --url=https://mirror.sjtu.edu.cn/flathub</span><br></pre></td></tr></table></figure><p>  <a href="https://mirrors.sjtug.sjtu.edu.cn/docs/flathub">上海交大源</a></p></li><li><p>安装 WPS（可以不用sudo，那样的话就是安装在用户而不是系统那）：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo flatpak install com.wps.Office</span><br></pre></td></tr></table></figure></li></ol></li><li><p>flatpak 版比 snap 版的开发要活跃不少，版本自然就比 snap 版新了，不过还是有不少的 bug，而且也没中文，还是得自己弄语言包。（教程见文章末尾）</p></li><li><p>这次黑暗模式和主题那些功能都没啥问题，甚至把登录的页面删掉了，尽管如此还是可以登录用云文档。</p></li><li><p>但粗体显示乱码<a href="https://bbs.archlinux.org/viewtopic.php?id=288562">粗体乱码解决方法</a>。</p></li><li><p>和上面几个版本一样，部分样式显示乱码（甚至出问题的样式都一样）。<br><img src="https://shp.qpic.cn/collector/1015650207/2da19901-65d1-4869-ad59-5e1f3b4c06b9/0" alt="flatpak 粗体乱码"><br><img src="https://shp.qpic.cn/collector/1015650207/3414e8b5-38a9-4333-81d0-56e8b13ff157/0" alt="flatpak 样式乱码"></p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>总的来说如果能接受登录页面弹出，而且经常使用 WPS 的话，还是 deb 版比较好用。</p></li><li><p>如果有点强迫症但又懒得动手的话，snap 的 2019 版还是不错的，毕竟设置也不是很经常用到。</p></li><li><p>有强迫症，动手能力强点就直接 flatpak，毕竟人家更新活跃，而且性能比 snap 强一点（指启动速度比 snap 版快那么一点）。</p></li></ul><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><ul><li><p>WPS 中文化教程：</p><ol><li><p>下载语言包：<a href="https://frp-any.top:18514/Onedrive/%E5%85%B6%E4%BB%96/WPS%E4%B8%AD%E6%96%87%E5%8C%96mui.tar.gz">语言包下载链接</a></p></li><li><p>解压并放到指定目录（解压后是一个名为<code>mui</code>的文件夹，直接放进去就是了）。flatpak 版有一部分的语言包，把下载的那个的一部分放进<code>mui</code>里面就是了。</p><ol><li><p>snap 版在<code>~/snap/wps-2019-snap/2/.local/share/Kingsoft/office6/</code></p></li><li><p>flatpak 版在<code>/var/lib/flatpak/app/com.wps.Office/x86_64/stable/版本号/files/extra/wps-office/office6/mui/</code></p></li></ol></li></ol></li><li><p>WPS 补全字体：</p><ol><li><p>下载字体：<a href="https://frp-any.top:18514/Onedrive/%E5%85%B6%E4%BB%96/WPS%E7%BC%BA%E5%A4%B1%E5%AD%97%E4%BD%93%E8%A1%A5%E5%85%A8.7z">字体下载链接</a></p></li><li><p>把解压后的字体文件（不是文件夹）放到<code>/usr/share/fonts/</code>目录下就行了</p></li></ol></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote><ul><li><a href="https://zhuanlan.zhihu.com/p/470577265">Ubuntu 20.04 下 WPS Office 缺失字体解决方案</a></li><li><a href="https://forum.ubuntu.com.cn/viewtopic.php?t=492055">诚心实意地推荐ubuntu下的最佳办公软件wps-2019-snap</a></li><li><a href="https://wiki.archlinuxcn.org/wiki/WPS_Office">WPS Office_Archlinux wiki</a></li><li><a href="https://bbs.archlinux.org/viewtopic.php?id=288562">wps-office大部分字体粗体出现过粗无法正常显示问题</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;WPS&quot;&gt;&lt;a href=&quot;#WPS&quot; class=&quot;headerlink&quot; title=&quot;WPS&quot;&gt;&lt;/a&gt;WPS&lt;/h2&gt;&lt;p&gt;在使用办公软件的过程中时常会存在 word 文档互相传递的场景，而众所周知，无论是 OpenOffice 还是还是 LibreOff</summary>
      
    
    
    
    <category term="日常" scheme="http://wu1015.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="Linux" scheme="http://wu1015.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>新版IDEA创建JavaWeb</title>
    <link href="http://wu1015.github.io/2024/04/24/NewIDEAVersionWithJavaEE/"/>
    <id>http://wu1015.github.io/2024/04/24/NewIDEAVersionWithJavaEE/</id>
    <published>2024-04-24T11:43:26.000Z</published>
    <updated>2024-04-24T11:58:41.773Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><ul><li>从 IntelliJ IDEA 2022.1 版本开始，JetBrains 开始支持 Jakarta EE 项目。因此，从 IntelliJ IDEA 2022.1 版本开始，将无法像以前版本一样创建 JavaEE 项目。<br><img src="https://shp.qpic.cn/collector/1015650207/67d6741b-2cf1-44ac-88c4-734206347fd4/0" alt="无法创建JavaEE的Web项目"></li></ul><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul><li>创建普通的Java项目<br><img src="https://shp.qpic.cn/collector/1015650207/84ecc9e0-3150-4f18-acbc-033105ea19a0/0" alt="创建普通的Java项目"></li><li>右键项目然后添加框架<code>add framework support</code></li><li>如果右键没有这个选项则可以在<code>Navigate/Search Everywhere</code>中搜索<code>add framework aupport</code>添加<br><img src="https://shp.qpic.cn/collector/1015650207/356c53b5-6ad0-4278-8feb-b1bbd8209ed5/0" alt="搜索添加"></li><li>添加<code>WebApplication</code><br><img src="https://shp.qpic.cn/collector/1015650207/16a3d8e1-ce67-490b-83c1-dd2b83472193/0" alt="添加Web框架"></li></ul><h2 id="问题源头"><a href="#问题源头" class="headerlink" title="问题源头"></a>问题源头</h2><ul><li>2009年，Oracle 宣布收购 SUN，Java 相关技术自然归 Oracle 所有。</li><li>2018年，Oracle 决定将 JavaEE（JavaSE 还自己保留） 移交给开源组织 Eclipse 基金会，但 Oracle 不允许开源组织用 Java 的名号，于是 Eclipse 选出了 “Jakarta EE” 和 “Enterprise Profile” 两个名字，最终前者胜出。</li><li>名称更改后，相应的 API 中的命名空间也进行了相应的更改，每个 API 都从 javax 过渡到 jakarta。在 jakartaEE9 中，不包含向后兼容性，即不再与 jakartaEE8 以及 javaEE 兼容。</li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://www.jianshu.com/p/2d5b425175eb">2023.3版本IDEA搭建JavaWeb项目教程_简书</a></li><li><a href="https://segmentfault.com/a/1190000023438133">Jakarta EE - Java EE的终结者</a></li><li><a href="https://cloud.tencent.com/developer/article/1654632">Jakarta EE 9里程碑发布会总结</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;从 IntelliJ IDEA 2022.1 版本开始，JetBrains 开始支持 Jakarta EE 项目</summary>
      
    
    
    
    <category term="岁月的史书" scheme="http://wu1015.github.io/categories/%E5%B2%81%E6%9C%88%E7%9A%84%E5%8F%B2%E4%B9%A6/"/>
    
    
    <category term="Java" scheme="http://wu1015.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>解决Ubuntu升级内核导致的无法安装VMware模块问题</title>
    <link href="http://wu1015.github.io/2024/04/12/ReinstallVmwareHostModules/"/>
    <id>http://wu1015.github.io/2024/04/12/ReinstallVmwareHostModules/</id>
    <published>2024-04-12T09:01:25.000Z</published>
    <updated>2024-08-14T01:13:27.023Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题报错"><a href="#问题报错" class="headerlink" title="问题报错"></a>问题报错</h2><p>在升级Linux内核后被要求重新编译安装VM的相关模块。但安装失败。报错<code>UNable to install all modules. See log Path/vmware-xxx.log for details. (Exit code 1)</code>。</p><p>内核版本：6.5.0-27<br>VM版本：17.0.2（使用<code>vmware-installer -l</code>查询版本，只需要大版本号）</p><p>log报错内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">2024-04-12T08:47:25.949Z In(05) host-110651 ./include/linux/once.h:46: note: this is the location of the previous definition</span><br><span class="line">2024-04-12T08:47:25.949Z In(05) host-110651    46 | #define DO_ONCE(func, ...)                                                   \</span><br><span class="line">2024-04-12T08:47:25.949Z In(05) host-110651       | </span><br><span class="line">2024-04-12T08:47:25.949Z In(05) host-110651 /tmp/modconfig-vA8Pno/vmmon-only/common/task.o: warning: objtool: .text: unexpected end of section</span><br><span class="line">2024-04-12T08:47:25.949Z In(05) host-110651 ERROR: modpost: &quot;__pte_offset_map&quot; [/tmp/modconfig-vA8Pno/vmmon-only/vmmon.ko] undefined!</span><br><span class="line">2024-04-12T08:47:25.949Z In(05) host-110651 make[3]: *** [scripts/Makefile.modpost:144：/tmp/modconfig-vA8Pno/vmmon-only/Module.symvers] 错误 1</span><br><span class="line">2024-04-12T08:47:25.949Z In(05) host-110651 make[2]: *** [/usr/src/linux-headers-6.5.0-27-generic/Makefile:1991：modpost] 错误 2</span><br><span class="line">2024-04-12T08:47:25.949Z In(05) host-110651 make[1]: *** [Makefile:234：__sub-make] 错误 2</span><br><span class="line">2024-04-12T08:47:25.949Z In(05) host-110651 make: *** [Makefile:117：vmmon.ko] 错误 2</span><br><span class="line">2024-04-12T08:47:25.949Z In(05) host-110651 Using kernel build system.</span><br><span class="line">2024-04-12T08:47:25.949Z In(05) host-110651 warning: the compiler differs from the one used to build the kernel</span><br><span class="line">2024-04-12T08:47:25.949Z In(05) host-110651   The kernel was built by: x86_64-linux-gnu-gcc-12 (Ubuntu 12.3.0-1ubuntu1~22.04) 12.3.0</span><br><span class="line">2024-04-12T08:47:25.949Z In(05) host-110651   You are using:           gcc-12 (Ubuntu 12.3.0-1ubuntu1~22.04) 12.3.0</span><br><span class="line">2024-04-12T08:47:25.949Z In(05) host-110651 /tmp/modconfig-vA8Pno/vmnet-only/userif.o: warning: objtool: VNetCsumAndCopyToUser+0x2d: call to csum_partial_copy_nocheck() with UACCESS enabled</span><br><span class="line">2024-04-12T08:47:25.949Z In(05) host-110651 /tmp/modconfig-vA8Pno/vmnet-only/bridge.c: In function ‘VNetBridgeSendLargePacket’:</span><br><span class="line">2024-04-12T08:47:25.949Z In(05) host-110651 /tmp/modconfig-vA8Pno/vmnet-only/bridge.c:1413:11: error: implicit declaration of function ‘skb_gso_segment’; did you mean ‘tcp_gso_segment’? [-Werror=implicit-function-declaration]</span><br><span class="line">2024-04-12T08:47:25.949Z In(05) host-110651  1413 |    segs = skb_gso_segment(skb, 0);</span><br><span class="line">2024-04-12T08:47:25.949Z In(05) host-110651       |           ^~~~~~~~~~~~~~~</span><br><span class="line">2024-04-12T08:47:25.949Z In(05) host-110651       |           tcp_gso_segment</span><br><span class="line">2024-04-12T08:47:25.949Z In(05) host-110651 /tmp/modconfig-vA8Pno/vmnet-only/bridge.c:1413:9: warning: assignment to ‘struct sk_buff *’ from ‘int’ makes pointer from integer without a cast [-Wint-conversion]</span><br><span class="line">2024-04-12T08:47:25.949Z In(05) host-110651  1413 |    segs = skb_gso_segment(skb, 0);</span><br><span class="line">2024-04-12T08:47:25.949Z In(05) host-110651       |         ^</span><br><span class="line">2024-04-12T08:47:25.949Z In(05) host-110651 cc1: some warnings being treated as errors</span><br><span class="line">2024-04-12T08:47:25.949Z In(05) host-110651 make[3]: *** [scripts/Makefile.build:251：/tmp/modconfig-vA8Pno/vmnet-only/bridge.o] 错误 1</span><br><span class="line">2024-04-12T08:47:25.949Z In(05) host-110651 make[2]: *** [/usr/src/linux-headers-6.5.0-27-generic/Makefile:2039：/tmp/modconfig-vA8Pno/vmnet-only] 错误 2</span><br><span class="line">2024-04-12T08:47:25.949Z In(05) host-110651 make[1]: *** [Makefile:234：__sub-make] 错误 2</span><br><span class="line">2024-04-12T08:47:25.949Z In(05) host-110651 make: *** [Makefile:117：vmnet.ko] 错误 2</span><br><span class="line">2024-04-12T08:47:25.949Z In(05) host-110651 Unable to install all modules.  See log for details.</span><br><span class="line">2024-04-12T08:47:25.949Z In(05) host-110651 </span><br></pre></td></tr></table></figure><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>重新安装相关模块</p><p>下载响应的文件（版本号要对应，或者直接去仓库使用浏览器直接下载）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/mkubecek/vmware-host-modules/archive/workstation-17.0.2.tar.gz</span><br></pre></td></tr></table></figure><p>解压并移动到目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -xzf vmware-host-modules-workstation-17.0.2.tar.gz </span><br><span class="line"></span><br><span class="line">cd vmware-host-modules-workstation-17.0.2</span><br></pre></td></tr></table></figure><p>在目录打开终端，编译并安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h3 id="未完全解决"><a href="#未完全解决" class="headerlink" title="未完全解决"></a>未完全解决</h3><ul><li>在更新到6.8内核后，无法编译成功，最后的解决方法是把vm更新到17.5.1然后再下载新的模块编译。</li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote><p><a href="https://segmentfault.com/a/1190000042268631">解决Ubuntu宿主机下面安装Vmware时候vmmon和vmnet模块缺失导致的报错</a><br><a href="https://ubuntu-mate.community/t/20-04-vmware-workstation-player-fails-to-build-kernel-modules-vmmon-vmnet/21176">[20.04] VMware Workstation&#x2F;Player fails to build kernel modules VMMON &amp; VMNET</a></p></blockquote><h2 id="文章所涉及的资源"><a href="#文章所涉及的资源" class="headerlink" title="文章所涉及的资源"></a>文章所涉及的资源</h2><ul><li><a href="https://github.com/mkubecek/vmware-host-modules/tree/master">vmware-host-modules仓库地址</a></li><li><a href="https://frp-any.top:18514/Onedrive/%E5%85%B6%E4%BB%96/vmware-host-modules-workstation-17.0.2.tar.gz">vmware-host-modules-workstation-17.0.2.tar.gz下载</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题报错&quot;&gt;&lt;a href=&quot;#问题报错&quot; class=&quot;headerlink&quot; title=&quot;问题报错&quot;&gt;&lt;/a&gt;问题报错&lt;/h2&gt;&lt;p&gt;在升级Linux内核后被要求重新编译安装VM的相关模块。但安装失败。报错&lt;code&gt;UNable to install al</summary>
      
    
    
    
    <category term="日常" scheme="http://wu1015.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="Linux" scheme="http://wu1015.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Windows重装找不到磁盘解决</title>
    <link href="http://wu1015.github.io/2024/03/10/WinInstallWithIntelVMD/"/>
    <id>http://wu1015.github.io/2024/03/10/WinInstallWithIntelVMD/</id>
    <published>2024-03-10T09:29:38.000Z</published>
    <updated>2024-06-17T02:26:02.042Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方法一：关闭Intel-VMD技术"><a href="#方法一：关闭Intel-VMD技术" class="headerlink" title="方法一：关闭Intel VMD技术"></a>方法一：关闭Intel VMD技术</h2><ul><li><p>进入电脑BIOS界面</p></li><li><p>找到Intel VMD选项并关闭</p></li><li><p>需要注意的是：</p></li></ul><ol><li>有些主板是将这个选项隐藏了的。比如Acer的一部分机器。</li><li>惠普笔记本主板似乎没有关闭的选项，所以只能选择另一种方法。<br><img src="https://shp.qpic.cn/collector/1015650207/9232389b-8fd7-4030-8953-cbc0db0a14d9/0" alt="惠普某型号的笔记本"></li></ol><h2 id="方法二：安装Intel-Rapid-Storage-Technology驱动"><a href="#方法二：安装Intel-Rapid-Storage-Technology驱动" class="headerlink" title="方法二：安装Intel Rapid Storage Technology驱动"></a>方法二：安装Intel Rapid Storage Technology驱动</h2><ul><li><p>下载Intel Rapid Storage Technology驱动程序，解压并放到U盘中<a href="https://frp-any.top:18514/Onedrive/Win10%E7%9B%B8%E5%85%B3/V18.0.4.1146_IRST_VMD_20H1.zip">驱动程序下载</a></p></li><li><p>进入Windows的安装程序</p></li><li><p>选择安装驱动程序，选择解压之后的驱动程序文件夹</p></li><li><p>点击下一步，待加载完成之后就会出现磁盘。</p></li><li><p>需要注意的是：</p></li></ul><ol><li>使用PE在安装驱动程序的时候提示无法安装（未知原因），所以建议直接进入win的安装程序</li><li>部分机器可以通过在PE使用360驱动等驱动补全程序进行补全，也可以达到同样的效果</li><li>在安装磁盘程序之后仍无法正常进行Windows的安装的话，则选择另一个（另一个是<code>Intel RST VMD Managed Controller</code>）（指报错<code>Windows无法安装所需的文件。文件不存在。请确保安装所需的所有文件可用，并重新安装。错误代码：0x80070003</code>）<br><img src="https://shp.qpic.cn/collector/1015650207/64d52b0b-4b03-45a0-a8d6-b3c45ce9af22/0" alt="选择另一个"></li></ol><h2 id="尚未解决的疑问"><a href="#尚未解决的疑问" class="headerlink" title="尚未解决的疑问"></a>尚未解决的疑问</h2><ul><li><p>在尝试直接在Windows中打开Windows镜像进行安装，在自动重启时报错<code>无法安装Windows 10 0xC1900101 - 0x20017 在BOOT操作过程中的SAFE_OS阶段，安装失败，出现错误</code></p></li><li><p>在尝试在PE使用360驱动大师安装安装驱动时无法打开程序，报错无法使用内存</p></li><li><p>在尝试在PE安装驱动时显示无法访问动态DLL</p></li><li><p>据说新版的安装镜像是自带这个驱动的，但没有进行实验</p></li><li><p>使用方法二安装似乎会掉电脑的win数字激活（很难说，毕竟也有正常重装系统也掉的）</p></li><li><p>Ubuntu22.04似乎是自带这个驱动的，之前在我自己的电脑上是这样的</p></li></ul><h2 id="参考的文章"><a href="#参考的文章" class="headerlink" title="参考的文章"></a>参考的文章</h2><blockquote><p><a href="https://www.52pojie.cn/thread-1640199-1-1.html">宏碁笔记本安装win10不认硬盘，如何解决 _ 吾爱破解</a><br><a href="https://zhuanlan.zhihu.com/p/464615501?utm_id=0">第11代Intel笔记本安装系统找不到硬盘，更改BIOS隐藏设置关闭VMD (Intel RST) _ 知乎</a><br><a href="https://h30471.www3.hp.com/t5/tai-shi-dian-nao/BIOS-zhong-mei-youVMD-xuan-xiang-mei-fa-guan-bi/td-p/1223363">BIOS中没有VMD选项，没法关闭 _ 惠普支持社区</a><br><a href="https://www.intel.cn/content/www/cn/zh/support/articles/000057787/memory-and-storage/intel-optane-memory.html">如何使用英特尔® RST 驱动程序启用英特尔® VMD兼容 RAID 或英特尔® 傲腾™内存配置的平台</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;方法一：关闭Intel-VMD技术&quot;&gt;&lt;a href=&quot;#方法一：关闭Intel-VMD技术&quot; class=&quot;headerlink&quot; title=&quot;方法一：关闭Intel VMD技术&quot;&gt;&lt;/a&gt;方法一：关闭Intel VMD技术&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;进</summary>
      
    
    
    
    <category term="日常" scheme="http://wu1015.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="Windows" scheme="http://wu1015.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Win使用FTP连接VM虚拟机</title>
    <link href="http://wu1015.github.io/2024/03/04/FTPUsageForWin/"/>
    <id>http://wu1015.github.io/2024/03/04/FTPUsageForWin/</id>
    <published>2024-03-04T10:20:16.000Z</published>
    <updated>2024-03-22T09:26:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Win设置"><a href="#Win设置" class="headerlink" title="Win设置"></a>Win设置</h3><ul><li><p>建议网络使用专用网络并暂时关闭防火墙设置。</p></li><li><p>Win使用命令行常用ftp命令：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//建立连接，address为地址，可以是域名也可以是ip,默认21端口</span><br><span class="line">ftp address</span><br><span class="line">//打开ftp命令行</span><br><span class="line">ftp</span><br><span class="line"></span><br><span class="line">//以下在进入ftp命令行时可用</span><br><span class="line">//建立连接，address为地址</span><br><span class="line">open address</span><br><span class="line">//传入文件，file_path为文件路径</span><br><span class="line">put file_path</span><br><span class="line">//传出文件，file_path为文件路径</span><br><span class="line">get file_path</span><br></pre></td></tr></table></figure></li></ul><h3 id="VM设置"><a href="#VM设置" class="headerlink" title="VM设置"></a>VM设置</h3><ul><li><p>虚拟机网络设置：<br>  默认NAT，主机vlan0自动桥接。Win在使用命令行执行<code>ipconfig</code>后出现VM网络适配器并可ping通后方可使用。</p></li><li><p>虚拟机配置（以deb系为例）：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//安装vsftp</span><br><span class="line">sudo apt install vsftpd</span><br></pre></td></tr></table></figure><p>  在安装完成之后修改文件<code>/etc/vsftpd.conf</code>，打开<code>write.enable=YES</code>和<code>anon_upload_enable=YES</code>后可解决<code>550 Permission denied</code>权限不够的错误。</p><p>  修改文件<code>/etc/ftpusers</code>，关闭root（在root前加入注释<code>#</code>）后可解决无法使用root用户登陆的问题。</p><p>  关闭防火墙或放行21端口：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//关闭防火墙（有很多方法，不一定适用）</span><br><span class="line">sudo systemctl stop ufw</span><br><span class="line">//放行21端口</span><br><span class="line">sudo ufw allow 21/tcp</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Win设置&quot;&gt;&lt;a href=&quot;#Win设置&quot; class=&quot;headerlink&quot; title=&quot;Win设置&quot;&gt;&lt;/a&gt;Win设置&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;建议网络使用专用网络并暂时关闭防火墙设置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Win使用命令行常用</summary>
      
    
    
    
    <category term="日常" scheme="http://wu1015.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="FTP" scheme="http://wu1015.github.io/tags/FTP/"/>
    
  </entry>
  
  <entry>
    <title>wxid添加好友</title>
    <link href="http://wu1015.github.io/2024/02/20/WxidFound/"/>
    <id>http://wu1015.github.io/2024/02/20/WxidFound/</id>
    <published>2024-02-19T23:20:09.000Z</published>
    <updated>2024-03-22T09:26:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="wxid添加好友"><a href="#wxid添加好友" class="headerlink" title="wxid添加好友"></a>wxid添加好友</h2><p>可以通过a标签在微信发送来添加好友。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;weixin://contacts/profile/微信id或者wxid&quot;&gt;通过wxid加好友&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">// 或者</span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;weixin://findfriend/verifycontact/微信id或者wxid&quot;&gt;通过wxid加好友&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>在微信8.0.24play可行，8.0.32只能收到纯文本而不是转换后的可点击的超链接。（申请添加之后可以在添加好友那看到申请添加，但对方能否看到还不好说）</p><p>另外，如果目标联系人有头像和昵称的话会显示的，而不是显示wxid_xxx。</p><h3 id="不可行方案"><a href="#不可行方案" class="headerlink" title="不可行方案"></a>不可行方案</h3><ul><li>微信手机版直接搜索wxid。</li><li>微信pc或uwp版本直接搜索wxid（uwp版本甚至不能加好友）。</li><li>微信wx模块，在某个版本去除了对这个功能的支持（尽管之前也是捐赠之后才能有的“付费功能”）。</li><li>直接拿上述a标签链接生成二维码进行扫描只会返回纯文本。如果是把href中的文本进行生成的话，扫描后会返回不支持。</li></ul><h2 id="获取目前的手机号"><a href="#获取目前的手机号" class="headerlink" title="获取目前的手机号"></a>获取目前的手机号</h2><p> 如果在输入错误手机号后再次输入正确手机号，目标联系人那也会出现错误手机号，进而误导我们。（前提是已经加过好友了）</p><p>正确的手机号只是我们搜索后会跳转到目标联系人的手机号而不是微信显示的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;wxid添加好友&quot;&gt;&lt;a href=&quot;#wxid添加好友&quot; class=&quot;headerlink&quot; title=&quot;wxid添加好友&quot;&gt;&lt;/a&gt;wxid添加好友&lt;/h2&gt;&lt;p&gt;可以通过a标签在微信发送来添加好友。&lt;/p&gt;
&lt;figure class=&quot;highligh</summary>
      
    
    
    
    <category term="日常" scheme="http://wu1015.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="微信" scheme="http://wu1015.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>C语言实现进制转换</title>
    <link href="http://wu1015.github.io/2024/01/26/ConvertBaseByC/"/>
    <id>http://wu1015.github.io/2024/01/26/ConvertBaseByC/</id>
    <published>2024-01-26T09:28:09.000Z</published>
    <updated>2024-03-22T09:26:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="整形间的进制转换"><a href="#整形间的进制转换" class="headerlink" title="整形间的进制转换"></a>整形间的进制转换</h2><ol><li><p>使用输入输出格式说明符：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int a = 07442313637;</span><br><span class="line">int b = 1015650207;</span><br><span class="line">int c = 0x3c89979f;</span><br><span class="line"></span><br><span class="line">printf(&quot;方法一：\n&quot;);</span><br><span class="line">// 16进制 运行结果：3c89979f 3C89979F</span><br><span class="line">printf(&quot;%x %X\n&quot;, a, b);</span><br><span class="line">// 8进制 运行结果：7442313637 7442313637</span><br><span class="line">printf(&quot;%o %o\n&quot;, b, c);</span><br><span class="line">// 10进制 运行结果：1015650207 1015650207</span><br><span class="line">printf(&quot;%d %d\n&quot;, a, c);</span><br></pre></td></tr></table></figure></li><li><p>使用栈进行转换：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;malloc.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">   char data[10];</span><br><span class="line">int top;</span><br><span class="line">   int bottom;</span><br><span class="line">&#125; stack;</span><br><span class="line"></span><br><span class="line">stack *StackCreate()</span><br><span class="line">&#123;</span><br><span class="line">   stack *p = (stack *)malloc(sizeof(stack));</span><br><span class="line">   if (p == NULL)</span><br><span class="line">   &#123;</span><br><span class="line">       return 0;</span><br><span class="line">   &#125;</span><br><span class="line">   p-&gt;bottom = p-&gt;top = 0;</span><br><span class="line">   return p;</span><br><span class="line">&#125;</span><br><span class="line">void StackInput(stack *p, char str)</span><br><span class="line">&#123;</span><br><span class="line">   p-&gt;data[p-&gt;top] = str;</span><br><span class="line">   p-&gt;top++;</span><br><span class="line">&#125;</span><br><span class="line">char StackOutput(stack *p, char str)</span><br><span class="line">&#123;</span><br><span class="line">   if (p-&gt;top != p-&gt;bottom)</span><br><span class="line">   &#123;</span><br><span class="line">       str = p-&gt;data[p-&gt;top - 1];</span><br><span class="line">       p-&gt;top--;</span><br><span class="line">       return str;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">void StackPrint(stack *p)</span><br><span class="line">&#123;</span><br><span class="line">   while (p-&gt;top != p-&gt;bottom)</span><br><span class="line">   &#123;</span><br><span class="line">       printf(&quot;%c&quot;, p-&gt;data[p-&gt;top - 1]);</span><br><span class="line">       p-&gt;top--;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">   int b = 1015650207;</span><br><span class="line"></span><br><span class="line">   printf(&quot;方法二：\n&quot;);</span><br><span class="line">   // 16进制，修改base和index实现其他进制</span><br><span class="line">   int base = 16;</span><br><span class="line">   char index[] = &quot;0123456789abcdef&quot;;</span><br><span class="line">   int last = 0;</span><br><span class="line">   stack *p;</span><br><span class="line">   p = StackCreate();</span><br><span class="line">   while (b &gt; 0)</span><br><span class="line">   &#123;</span><br><span class="line">       last = b % base;</span><br><span class="line">       StackInput(p, index[last]);</span><br><span class="line">       b = (b - last) / base;</span><br><span class="line">   &#125;</span><br><span class="line">   StackPrint(p);</span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="数值字符串转换为整形"><a href="#数值字符串转换为整形" class="headerlink" title="数值字符串转换为整形"></a>数值字符串转换为整形</h2><ol><li>通过遍历字符数组来匹配对应字符，并返回相应下标。需要注意的是循环遍历的时候要保证少一次循环，以确保最后一位数只进行加操作。代码如下： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 字符串转整形 运行结果：1015650207</span><br><span class="line">printf(&quot;字符串转整形：\n&quot;);</span><br><span class="line">char index[] = &quot;0123456789abcdef&quot;;</span><br><span class="line">int base = 16;</span><br><span class="line">char d[] = &quot;3c89979f&quot;;</span><br><span class="line">int i = 0;</span><br><span class="line">int j = 0;</span><br><span class="line">int tj = 0;</span><br><span class="line">long result = 0;</span><br><span class="line">while (d[i] != &#x27;\0&#x27;)</span><br><span class="line">&#123;</span><br><span class="line">    j = 0;</span><br><span class="line">    while (index[j] != &#x27;\0&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        if (index[j] == d[i])</span><br><span class="line">        &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    result = (result + tj) * base;</span><br><span class="line">    tj = j;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line">result += tj;</span><br><span class="line">printf(&quot;%d&quot;, result);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;整形间的进制转换&quot;&gt;&lt;a href=&quot;#整形间的进制转换&quot; class=&quot;headerlink&quot; title=&quot;整形间的进制转换&quot;&gt;&lt;/a&gt;整形间的进制转换&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用输入输出格式说明符：&lt;/p&gt;
 &lt;figure class=&quot;high</summary>
      
    
    
    
    <category term="笔记" scheme="http://wu1015.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="C语言" scheme="http://wu1015.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>MariaDB学习记录</title>
    <link href="http://wu1015.github.io/2023/11/23/LearnOfMariaDB/"/>
    <id>http://wu1015.github.io/2023/11/23/LearnOfMariaDB/</id>
    <published>2023-11-23T12:32:39.000Z</published>
    <updated>2024-03-22T09:26:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>   当MariaDB Server的前身MySQL于2009年被Oracle收购时，MySQL创始人Michael “Monty” Widenius出于对Oracle管理权的担忧而分叉了该项目，并将新项目命名为MariaDB。<br>   MariaDB Server仍然保持与MySQL的高度兼容性，并且大多数使用MySQL的流行应用程序将与MariaDB无缝协作。由于MariaDB的目标与MySQL不同，并且MariaDB Server有许多新功能，因此不再使用较早的术语drop-in replacement。</p><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>   因为MariaDB与Mysql的高度兼容（也许吧），在某些系统上命令<code>mariadb</code>可以用<code>mysql</code>替换使用。<br>   启动数据库服务（一般来说数据库都不是开机自启），需要开启后才能连接。<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mariadb.service</span><br></pre></td></tr></table></figure></p><p>   连接数据库：<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mariadb -u root -h localhost -p</span><br></pre></td></tr></table></figure></p><p>   在进入数据库后使用语句记得结尾添加分号。创建新用户：<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to &#x27;admin&#x27;@&#x27;localhost&#x27; identified by &#x27;pwd&#x27;;</span><br></pre></td></tr></table></figure></p><p>   修改用户的密码：<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rename user &#x27;admin&#x27;@&#x27;localhost&#x27; to &#x27;admin&#x27;@&#x27;%&#x27;;</span><br><span class="line">//因为新版本后mysql中的user只是一个视图而非表了，所以只能用这两种方法进行修改</span><br><span class="line">update mysql_global_priv set host=&quot;%&quot; where user=&#x27;admin&#x27;;</span><br></pre></td></tr></table></figure></p><p>   基础SQL语句：<br>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//查看数据库</span><br><span class="line"> show databases;</span><br><span class="line"></span><br><span class="line">//查看当前数据库的表</span><br><span class="line"> show tables;</span><br><span class="line"></span><br><span class="line">//搜索table_1表的所有数据</span><br><span class="line"> select * from table_1;</span><br></pre></td></tr></table></figure></p><h2 id="Tomcat的连接"><a href="#Tomcat的连接" class="headerlink" title="Tomcat的连接"></a>Tomcat的连接</h2><p>   与MySql类似，都需要下载相应的<code>jdbc</code>进行连接。<br>    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//驱动</span><br><span class="line"> com.mysql.jdbc.Driver</span><br><span class="line"> org.mariadb.jdbc.Driver</span><br><span class="line">//连接字串</span><br><span class="line"> jdbc:mysql://localhost:3306/dbName</span><br><span class="line"> jdbc:mariadb://localhost:3306/dbName</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;   当MariaDB Server的前身MySQL于2009年被Oracle收购时，MySQL创始人Michael “Monty” Wid</summary>
      
    
    
    
    <category term="笔记" scheme="http://wu1015.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="SQL" scheme="http://wu1015.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Android学习笔记</title>
    <link href="http://wu1015.github.io/2023/10/11/LearnOfAndroid/"/>
    <id>http://wu1015.github.io/2023/10/11/LearnOfAndroid/</id>
    <published>2023-10-11T07:49:00.000Z</published>
    <updated>2024-03-22T09:26:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安卓开发基础的学习笔记"><a href="#安卓开发基础的学习笔记" class="headerlink" title="安卓开发基础的学习笔记"></a>安卓开发基础的学习笔记</h2><ol><li><p>Tocst的基础使用</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Toast.makeText(MainActivity.this,text_show.toString(),Toast.LENGTH_SHORT).show();</span><br></pre></td></tr></table></figure></li><li><p>如果您的应用以 Android 12（API 级别 31）或更高版本为目标平台，则消息框上限为两行文本，并且必须在文本旁边显示应用图标。请注意，此文本的行长因屏幕尺寸而异，因此最好尽可能缩短文本长度。<br>所以只能用其他消息提示控件代替，如：AlretDialog</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//  定义AlertDialog以完全显示</span><br><span class="line">AlertDialog.Builder builder=new AlertDialog.Builder(MainActivity.this);</span><br><span class="line">builder.setMessage(text_show);</span><br><span class="line">builder.setCancelable(true);</span><br><span class="line">AlertDialog dialog=builder.create();</span><br><span class="line">//  底部显示</span><br><span class="line">dialog.getWindow().setGravity(Gravity.BOTTOM);</span><br><span class="line">dialog.show();</span><br></pre></td></tr></table></figure><p> 或者这样定义：</p><blockquote><p><a href="https://www.runoob.com/w3cnote/android-tutorial-alertdialog.html">AlertDialog(对话框)详解_菜鸟教程</a><br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">builder = new AlertDialog.Builder(mContext);</span><br><span class="line">    alert = builder.setIcon(R.mipmap.ic_icon_fish)</span><br><span class="line">    .setTitle(&quot;系统提示：&quot;)</span><br><span class="line">            .setMessage(&quot;这是一个最普通的AlertDialog,\n带有三个按钮，分别是取消，中立和确定&quot;)</span><br><span class="line">            .setNegativeButton(&quot;取消&quot;, new DialogInterface.OnClickListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                    Toast.makeText(mContext, &quot;你点击了取消按钮~&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .setPositiveButton(&quot;确定&quot;, new DialogInterface.OnClickListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                    Toast.makeText(mContext, &quot;你点击了确定按钮~&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .setNeutralButton(&quot;中立&quot;, new DialogInterface.OnClickListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                    Toast.makeText(mContext, &quot;你点击了中立按钮~&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).create();             //创建AlertDialog对象</span><br><span class="line">    alert.show();  </span><br></pre></td></tr></table></figure></p></blockquote></li><li><p>控件绑定</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Button btn = findViewById(R.id.btn_id);</span><br><span class="line"></span><br><span class="line">//或者先定义好对象类型再进行控件绑定</span><br><span class="line">private Button btn;</span><br><span class="line">btn = findViewById(R.id.btn_id);</span><br></pre></td></tr></table></figure></li><li><p>监听器的绑定</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">switch_s_hidden.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View view) &#123;</span><br><span class="line">        if (switch_s_hidden.isChecked())&#123;</span><br><span class="line">            rg_s.setVisibility(View.INVISIBLE);</span><br><span class="line">            switch_flag=false;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            rg_s.setVisibility(View.VISIBLE);</span><br><span class="line">            switch_flag=true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//或者定义一个单独的类(在onCreate()之外)，继承对应的监听器，再实例化调用</span><br><span class="line">class chk_lis implements CompoundButton.OnCheckedChangeListener&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onCheckedChanged(CompoundButton cButton,boolean b)&#123;</span><br><span class="line">        @Todo</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">chk_lis chk_lis1=new chk_lis();</span><br><span class="line">chk_l.setOnCheckedChangeListener(chk_lis1);</span><br></pre></td></tr></table></figure></li><li><p>屏幕像素密度：<br> 需要注意的是，要适配不同密度的手机屏幕，dp还远远不够。</p><ul><li>px：pixel缩写，意为像素。</li><li>dp（推荐使用）：density-independent pixel缩写，有时被缩写为dip,意为密度无关像素。</li><li>sp（推荐对字体使用）：scale-independent pixel缩写，意为缩放无关像素。</li><li><code>drawable、drawable-ldpi、mdpi、hdpi、xhdpi</code>对应默认密度、中等密度、高密度、超高密度等。引用时只需要引用id即可，几个文件夹存入的图片同名且只能是小写不能包含空格。文件夹只是给人来分辨和方便存储，实际调用的时候还是根据图片的密度来调用。因此你甚至能把它们全放进同一个文件夹里，如果可以的话。</li></ul></li><li><p>ListView组件中含有CheckBox控件时可能会出现一些问题。比如刷动后已选中的选项会贝清除或未被选中的选项贝选中。可以在CheckBox的OnCheckChange监听器中添加一个保存状态的语句，并在后面再重新赋值一次CheckBox的状态。</p><blockquote><p><a href="https://www.cnblogs.com/wujd/archive/2012/08/17/2635309.html">Android ListView CheckBox状态错乱_博客园</a>  </p></blockquote><ul><li>ListView动态计算高度&amp;数据更新： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//  定义为函数方便调用</span><br><span class="line">public void listAdapterSet()&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            List&lt;Map&lt;String, Object&gt;&gt; mapList = noteUpdate();</span><br><span class="line">            if (mapList==null)&#123;</span><br><span class="line">                int hhh=1/0;</span><br><span class="line">            &#125;</span><br><span class="line">//            重新设置adapter以刷新数据</span><br><span class="line">            baseAdapter = new MyAdapter(MainActivity.this, mapList);</span><br><span class="line">            listViewNote.setAdapter(baseAdapter);</span><br><span class="line"></span><br><span class="line">//            动态设置listView高度</span><br><span class="line">            ViewGroup.LayoutParams layoutParams=listViewNote.getLayoutParams();</span><br><span class="line">            int hS=0;</span><br><span class="line">            int itemCount=baseAdapter.getCount();</span><br><span class="line">            int qq=0;</span><br><span class="line">            while (qq&lt;itemCount)&#123;</span><br><span class="line">                View view=baseAdapter.getView(qq,null,listViewNote);</span><br><span class="line">                view.measure(0,0);</span><br><span class="line">                qq++;</span><br><span class="line">                hS+=view.getMeasuredHeight();</span><br><span class="line">                if (qq==itemCount)&#123;</span><br><span class="line">//                    似乎少算了一行</span><br><span class="line">                    hS+=view.getMeasuredHeight();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            hS=hS+itemCount*listViewNote.getDividerHeight();</span><br><span class="line">            layoutParams.height=hS;</span><br><span class="line">            listViewNote.setLayoutParams(layoutParams);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            Log.d(&quot;TAG&quot;, &quot;onCreate: nullMapList&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>调试语句：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Log.d(&quot;TAG&quot;, &quot;onCheckedChanged: &quot;);</span><br></pre></td></tr></table></figure></li><li><p>无法使用switch的原因是模块中的<code>R</code>不是final类型，因此只能用<code>if-else</code>来代替。</p></li><li><p>TabLayout与ViewPage2的绑定：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new TabLayoutMediator(tabLayout, viewPager2, true, (tab, position) -&gt; tab.setText(titleList.get(position))).attach();</span><br></pre></td></tr></table></figure><p> 另外，ViewPage2的触发器继承<code>FragmentStateAdapter</code>。因为两者绑定了，所以只有ViewPage2需要触发器。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ViewPageAdapter viewPageAdapter=new ViewPageAdapter(getActivity(),fragmentList);</span><br></pre></td></tr></table></figure><p> <code>fragments</code>是<code>List&lt;Fragment&gt;</code>类型，需要在里面加入碎片以在ViewPage2中显示。另外fragment可以加入构造方法以实现单个类的多次使用。</p></li><li><p>BottomNavigationView的使用：<br>触发器的设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">   bottomNavigationSelectedListener navListener = new bottomNavigationSelectedListener();</span><br><span class="line">   bottomNav.setOnItemSelectedListener(navListener);</span><br><span class="line">//  设置默认选中页面</span><br><span class="line">   bottomNav.setSelectedItemId(bottomNav.getMenu().getItem(0).getItemId());</span><br><span class="line">   class bottomNavigationSelectedListener implements BottomNavigationView.OnItemSelectedListener &#123;</span><br><span class="line">       @Override</span><br><span class="line">       public boolean onNavigationItemSelected(@NonNull MenuItem item) &#123;</span><br><span class="line">           int id=item.getItemId();</span><br><span class="line">           if (id==R.id.logout)&#123;</span><br><span class="line"></span><br><span class="line">           &#125; else if (id==R.id.scan) &#123;</span><br><span class="line"></span><br><span class="line">           &#125; else if (id==R.id.imagePage) &#123;</span><br><span class="line"></span><br><span class="line">           &#125;else &#123;</span><br><span class="line">               return false;</span><br><span class="line">           &#125;</span><br><span class="line">           return true;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>ToolBar的使用：<br>触发器的定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">toolbar.setOnMenuItemClickListener(new Toolbar.OnMenuItemClickListener() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public boolean onMenuItemClick(MenuItem menuItem) &#123;</span><br><span class="line">            return false;</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><p>使用中需要注意的是，toolbar需要导入的包是<code>androidx.appcompat.widget.Toolbar</code>，而不是<code>android.widget.Toolbar</code>。<br>布局文件同理，是<code>androidx.appcompat.widget.Toolbar</code>而不是<code>Toobar</code>。</p></li><li><p>广播Broadcast与接收器Receiver：<br>动态注册广播：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">broadcastReceiver = new BroadcastReceiver();</span><br><span class="line">IntentFilter filter = new IntentFilter();</span><br><span class="line">filter.addAction(WifiManager.WIFI_STATE_CHANGED_ACTION);</span><br><span class="line">filter.addAction(Intent.ACTION_AIRPLANE_MODE_CHANGED);</span><br><span class="line">filter.addAction(&quot;musicPlay&quot;);</span><br><span class="line">filter.addAction(&quot;musicPause&quot;);</span><br><span class="line">filter.addAction(&quot;broadcast&quot;);</span><br><span class="line">// 动态注册广播接收者</span><br><span class="line">registerReceiver(broadcastReceiver, filter);</span><br></pre></td></tr></table></figure><p>自定义广播：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Intent intent=new Intent(&quot;musicPlay&quot;);</span><br><span class="line">//传递参数，可要可不要</span><br><span class="line">Bundle bundle=new Bundle();</span><br><span class="line">bundle.putString(&quot;title&quot;,editTextTitle.getText().toString());</span><br><span class="line">bundle.putString(&quot;context&quot;,editTextContext.getText().toString());</span><br><span class="line">intent.putExtras(bundle);</span><br><span class="line">sendBroadcast(intent);</span><br></pre></td></tr></table></figure><p>接收器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class BroadcastReceiver extends android.content.BroadcastReceiver &#123;</span><br><span class="line">    public void onReceive(Context context, Intent intent) &#123;</span><br><span class="line">    Log.d(&quot;TAG&quot;, &quot;onReceive:dsds &quot;);</span><br><span class="line">    //   wifi开关</span><br><span class="line">    if (WifiManager.WIFI_STATE_CHANGED_ACTION.equals(intent.getAction())) &#123;</span><br><span class="line">        Log.d(&quot;TAG&quot;, &quot;onReceive:WLAN &quot;);</span><br><span class="line">        int wifiState = intent.getIntExtra(WifiManager.EXTRA_WIFI_STATE, -1111);</span><br><span class="line">        switch (wifiState) &#123;</span><br><span class="line">            case WifiManager.WIFI_STATE_DISABLED:</span><br><span class="line">                Toast.makeText(context, &quot;Wifi_Disable&quot;, Toast.LENGTH_LONG).show();</span><br><span class="line">                break;</span><br><span class="line">            case WifiManager.WIFI_STATE_ENABLING:</span><br><span class="line">                Toast.makeText(context, &quot;Wifi_Enable&quot;, Toast.LENGTH_LONG).show();</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //音乐播放，关闭音乐为mediaPlayer.stop();</span><br><span class="line">    else if (intent.getAction().equals(&quot;musicPlay&quot;))&#123;</span><br><span class="line">        if (mediaPlayer!=null)&#123;</span><br><span class="line">            mediaPlayer.stop();</span><br><span class="line">            mediaPlayer=null;</span><br><span class="line">        &#125;</span><br><span class="line">        mediaPlayer=MediaPlayer.create(context,R.raw.loop_65);</span><br><span class="line">        mediaPlayer.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意在<code>MainActivity</code>中重写销毁方法以销毁广播：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void onDestroy() &#123;</span><br><span class="line">    super.onDestroy();</span><br><span class="line">    if (broadcastReceiver != null) &#123;</span><br><span class="line">        unregisterReceiver(broadcastReceiver);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通知：<br>构造和相关代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Bundle bundle=intent.getExtras();</span><br><span class="line">String strTitle=bundle.getString(&quot;title&quot;);</span><br><span class="line">String strContext=bundle.getString(&quot;context&quot;);</span><br><span class="line">Intent intent1=new Intent(context,MainActivity.class);</span><br><span class="line">//      需要唯一的intent来进行传参，否则将无法传参</span><br><span class="line">//      即需要设置setData值方可传参</span><br><span class="line">intent1.setData(Uri.parse(&quot;custom://&quot;+System.currentTimeMillis()));</span><br><span class="line">Bundle bundle1=new Bundle();</span><br><span class="line">bundle1.putString(&quot;title&quot;,strTitle);</span><br><span class="line">bundle1.putString(&quot;context&quot;,strContext);</span><br><span class="line">bundle1.putBoolean(&quot;isCast&quot;,true);</span><br><span class="line">intent1.putExtras(bundle1);</span><br><span class="line">//    设置为0时传入的参数会被覆盖(与这个无关，因为处理的是同样的intent)</span><br><span class="line">//    Android12以上PendingIntent需要强制增加FLAG_IMMUTABLE或FLAG_MUTABLE</span><br><span class="line">PendingIntent pi = PendingIntent.getActivity(context, 0 ,intent1, PendingIntent.FLAG_IMMUTABLE);</span><br><span class="line">mNotificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line">//创建 NotificationChannel 对象</span><br><span class="line">NotificationChannel channel = new NotificationChannel(&quot;Channel_ID&quot;, &quot;chat message&quot;,NotificationManager.IMPORTANCE_DEFAULT);</span><br><span class="line">//创建通知渠道</span><br><span class="line">mNotificationManager.createNotificationChannel(channel);</span><br><span class="line">NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(context,&quot;Channel_ID&quot;)</span><br><span class="line">        .setContentTitle(strTitle)</span><br><span class="line">        .setContentText(strContext)</span><br><span class="line">        .setWhen(System.currentTimeMillis())</span><br><span class="line">// 设置图标</span><br><span class="line">        .setSmallIcon(R.drawable.ic_launcher_foreground)</span><br><span class="line">        .setLargeIcon(BitmapFactory.decodeResource(context.getResources(),R.drawable.ic_launcher_foreground))</span><br><span class="line">//  设置通知点击跳转</span><br><span class="line">        .setContentIntent(pi);</span><br><span class="line">//            点击后消失</span><br><span class="line">//           .setAutoCancel(true);</span><br><span class="line"></span><br><span class="line">//发送通知( id唯一,可用于更新通知时对应旧通知; 通过mBuilder.build()拿到notification对象 )</span><br><span class="line">mNotificationManager.notify(1,mBuilder.build());</span><br></pre></td></tr></table></figure><p>关闭通知：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mNotificationManager.cabcel(1);</span><br></pre></td></tr></table></figure><blockquote><p>参考<a href="https://www.cnblogs.com/anrainie/articles/2383941.html">《Android的Notification研究》<em>博客园</em> 2012-03-07 17:44 荒土</a></p></blockquote></li><li><p>Sqlite的基础使用：</p><ul><li><p>定义相关类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class DBOpenHelper extends SQLiteOpenHelper &#123;</span><br><span class="line">    public static final String SQL_TB_NAME=&quot;user&quot;;</span><br><span class="line">    public static final String SQL_TB_Note_NAME=&quot;note&quot;;</span><br><span class="line">    public DBOpenHelper(@Nullable Context context, @Nullable String name, @Nullable SQLiteDatabase.CursorFactory factory, int version) &#123;</span><br><span class="line">        super(context, name, factory, version);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate(SQLiteDatabase sqLiteDatabase) &#123;</span><br><span class="line">//        此处必须是integer而不能是int,否则会出现无法创建的错误，ntext是以unicode存储的文本，大概4k字</span><br><span class="line">            sqLiteDatabase.execSQL(&quot;create table if not exists &quot;+SQL_TB_NAME+&quot;(accountId integer primary key,password varchar)&quot;);</span><br><span class="line">            sqLiteDatabase.execSQL(&quot;create table if not exists &quot;+SQL_TB_Note_NAME+&quot;(id integer primary key autoincrement,accountId int,title ntext,context ntext)&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onUpgrade(SQLiteDatabase sqLiteDatabase, int i, int i1) &#123;</span><br><span class="line">//        刷新数据库，即删除重建</span><br><span class="line">        sqLiteDatabase.execSQL(&quot;drop table if not exists &quot;+SQL_TB_NAME);</span><br><span class="line">        sqLiteDatabase.execSQL(&quot;drop table if not exists &quot;+SQL_TB_Note_NAME);</span><br><span class="line">        onCreate(sqLiteDatabase);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查询操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sqLiteOpenHelper = new DBOpenHelper(MainActivity.this, &quot;Note.db&quot;, null, 1);</span><br><span class="line">    sqLiteDatabase = sqLiteOpenHelper.getReadableDatabase();</span><br><span class="line">    Cursor result = sqLiteDatabase.rawQuery(&quot;select * from note where accountId=&quot; + account, null);</span><br><span class="line">    if (result.getCount() &lt;= 0) &#123;</span><br><span class="line">        int hhh = 1 / 0;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">//       cursor需要移动到指定行才能使用getString()方法来获取列数据</span><br><span class="line">//       -1开始，0为第一行，但第一行为行名</span><br><span class="line">    result.move(1);</span><br><span class="line">//       第1列</span><br><span class="line">        pwd = result.getString(0);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>更新操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sqLiteDatabase=sqLiteOpenHelper.getWritableDatabase();</span><br><span class="line">ContentValues values=new ContentValues();</span><br><span class="line">   values.put(&quot;accountId&quot;,account);</span><br><span class="line">values.put(&quot;title&quot;,editText.getText().toString());</span><br><span class="line">String where=&quot;id=&quot;+id;</span><br><span class="line">int i=sqLiteDatabase.update(DBOpenHelper.SQL_TB_Note_NAME,values,where,null);</span><br><span class="line">if (i&gt;0)&#123;</span><br><span class="line">Log.d(&quot;TAG&quot;, &quot;onClick:update &quot;);</span><br><span class="line">Toast.makeText(MainActivity.this, &quot;更新成功&quot; , Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;else &#123;</span><br><span class="line">Log.d(&quot;TAG&quot;, &quot;onClick:noUpdate &quot;);</span><br><span class="line">Toast.makeText(MainActivity.this, &quot;更新失败&quot; , Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">long i=sqLiteDatabase.insert(DBOpenHelper.SQL_TB_Note_NAME,null,values);</span><br><span class="line">if (i==-1)&#123;</span><br><span class="line">Log.d(&quot;TAG&quot;, &quot;onClick:NoInsert &quot;);</span><br><span class="line">Toast.makeText(MainActivity.this, &quot;添加失败&quot; , Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;else &#123;</span><br><span class="line">Log.d(&quot;TAG&quot;, &quot;onClick:insert&quot;);</span><br><span class="line">Toast.makeText(MainActivity.this, &quot;添加成功&quot; , Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>共享数据以实现记住密码的功能：</p><ul><li><p>获取共享数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SharedPreferences prefs = getPreferences(Context.MODE_PRIVATE);</span><br><span class="line">   Boolean isRemember = prefs.getBoolean(&quot;rememberMe&quot;, false);</span><br><span class="line">   String account = prefs.getString(&quot;account&quot;, &quot;&quot;);</span><br><span class="line">String password = prefs.getString(&quot;password&quot;, &quot;&quot;);</span><br></pre></td></tr></table></figure></li><li><p>发送数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SharedPreferences.Editor editor = prefs.edit();</span><br><span class="line">if (chkBoxRememberMe.isChecked()) &#123;</span><br><span class="line">//  “记住密码”是否被选中</span><br><span class="line">editor.putBoolean(&quot;rememberMe&quot;, true);</span><br><span class="line">editor.putString(&quot;account&quot;, account);</span><br><span class="line">editor.putString(&quot;password&quot;, password);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">editor.clear();</span><br><span class="line">&#125;</span><br><span class="line">editor.apply();</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安卓开发基础的学习笔记&quot;&gt;&lt;a href=&quot;#安卓开发基础的学习笔记&quot; class=&quot;headerlink&quot; title=&quot;安卓开发基础的学习笔记&quot;&gt;&lt;/a&gt;安卓开发基础的学习笔记&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Tocst的基础使用&lt;/p&gt;
 &lt;figure c</summary>
      
    
    
    
    <category term="笔记" scheme="http://wu1015.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux的基础使用记录</title>
    <link href="http://wu1015.github.io/2023/08/18/LinuxUsage-Doc/"/>
    <id>http://wu1015.github.io/2023/08/18/LinuxUsage-Doc/</id>
    <published>2023-08-18T03:14:41.000Z</published>
    <updated>2024-08-06T03:45:51.485Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  本着记录的原则写下本文，可能会有错误或者缺漏。本文内容有相当一部分来自网络，如有侵权，请及时联系我。</p><h2 id="网卡驱动缺失"><a href="#网卡驱动缺失" class="headerlink" title="网卡驱动缺失"></a>网卡驱动缺失</h2><p>  因为ubuntu最新的lts内核还是5.15，一些网卡的驱动还没有（比如ax1675i）。解决方法一般有两个，一个是更新内核，另一个就是编译驱动到内核。</p><ul><li>更新内核：<a href="https://zhuanlan.zhihu.com/p/133323571">升级 Ubuntu Linux 内核的几种不同方法 | Linux 中国-知乎</a></li><li>编译驱动:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install git build-essential linux-headers-generic</span><br><span class="line">git clone https://git.kernel.org/pub/scm/linux/kernel/git/iwlwifi/backport-iwlwifi.git</span><br><span class="line">cd backport-iwlwifi</span><br><span class="line">make defconfig-iwlwifi-public</span><br><span class="line">sed -i &#x27;s/CPTCFG_IWLMVM_VENDOR_CMDS=y/# CPTCFG_IWLMVM_VENDOR_CMDS is not set/&#x27; .config</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><blockquote><p>引用自ubuntu论坛<a href="https://forum.ubuntu.com.cn/viewtopic.php?p=3212591&hilit=%E7%BD%91%E5%8D%A1%E9%A9%B1%E5%8A%A8%E7%BC%96%E8%AF%91#p3212591">Ubuntu 18.04 未发现wifi适配器</a></p></blockquote></li></ul><h2 id="clash的使用"><a href="#clash的使用" class="headerlink" title="clash的使用"></a>clash的使用</h2><ul><li>clash的启动：<br>在clash二进制文件所在的目录打开终端，执行以下命令下载配置文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O config.yaml &quot;https://api.sub-300.club/link/0vsALy9MsMyBad9T?clash=3&quot; </span><br></pre></td></tr></table></figure>如果权限不足则执行以下命令提权<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x clash</span><br></pre></td></tr></table></figure>最后执行二进制文件clash<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./clash -d .</span><br></pre></td></tr></table></figure>其中<code>-d .</code>为配置文件在当前目录<br>可以在<code>.bashrc</code>中添加<code>alias Clash_Enable=&quot;clash路径 -d 配置文件路径&quot;</code>，然后就可以直接在终端执行<code>Clash_Enable</code>启动。<br>如果顺利的话就可以进入<a href="https://clash.razord.top/">Clash Dashboard</a>进行更换节点的操作了。<br><code>端口在配置文件中查看</code></li><li>在ubuntu（gnome）的使用：只需要去设置栏添加手动代理即可。</li><li>在ubuntu（xfce）的使用：<ul><li>浏览器中（以firefox为例），在clash启动后进入设置配置网络代理。</li><li>命令行中apt等软件的代理：<br>在<code>~/.bashrc</code>中写入以下内容：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">proxy () &#123;</span><br><span class="line">  export ALL_PROXY=&quot;socks5://127.0.0.1:7891&quot;</span><br><span class="line">  export all_proxy=&quot;socks5://127.0.0.1:7891&quot;</span><br><span class="line">  echo -e &quot;Acquire::http::Proxy \&quot;http://127.0.0.1:7890\&quot;;&quot; | sudo tee -a /etc/apt/apt.conf &gt; /dev/null</span><br><span class="line">  echo -e &quot;Acquire::https::Proxy \&quot;http://127.0.0.1:7890\&quot;;&quot; | sudo tee -a /etc/apt/apt.conf &gt; /dev/null</span><br><span class="line">  curl https://ip.gs</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">noproxy () &#123;</span><br><span class="line">  unset ALL_PROXY</span><br><span class="line">  unset all_proxy</span><br><span class="line">  sudo sed -i -e &#x27;/Acquire::http::Proxy/d&#x27; /etc/apt/apt.conf</span><br><span class="line">  sudo sed -i -e &#x27;/Acquire::https::Proxy/d&#x27; /etc/apt/apt.conf</span><br><span class="line">  curl https://ip.gs</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>保存后执行<code>proxy</code>或<code>noproxy</code>进行代理的设置或者取消。需要注意的是，<code>curl</code>仅仅是为了测试网络连接，后续如果因为一些原因报错可以忽视，不影响使用。</li></ul></li></ul><h2 id="tcpdump的使用"><a href="#tcpdump的使用" class="headerlink" title="tcpdump的使用"></a>tcpdump的使用</h2><ul><li><p>提示的语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Usage: tcpdump [-AbdDefhHIJKlLnNOpqStuUvxX#] [ -B size ] [ -c count ] [--count]</span><br><span class="line">[ -C file_size ] [ -E algo:secret ] [ -F file ] [ -G seconds ]</span><br><span class="line">[ -i interface ] [ --immediate-mode ] [ -j tstamptype ]</span><br><span class="line">[ -M secret ] [ --number ] [ --print ] [ -Q in|out|inout ]</span><br><span class="line">[ -r file ] [ -s snaplen ] [ -T type ] [ --version ]</span><br><span class="line">[ -V file ] [ -w file ] [ -W filecount ] [ -y datalinktype ]</span><br><span class="line">[ --time-stamp-precision precision ] [ --micro ] [ --nano ]</span><br><span class="line">[ -z postrotate-command ] [ -Z user ] [ expression ]</span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.runoob.com/linux/linux-comm-tcpdump.html">菜鸟教程整理的参数说明</a></p><blockquote><p> -a 尝试将网络和广播地址转换成名称。<br>  -c&lt;数据包数目&gt; 收到指定的数据包数目后，就停止进行倾倒操作。<br>  -d 把编译过的数据包编码转换成可阅读的格式，并倾倒到标准输出。<br>  -dd 把编译过的数据包编码转换成C语言的格式，并倾倒到标准输出。<br>  -ddd 把编译过的数据包编码转换成十进制数字的格式，并倾倒到标准输出。<br>  -e 在每列倾倒资料上显示连接层级的文件头。<br>  -f 用数字显示网际网络地址。<br>  -F&lt;表达文件&gt; 指定内含表达方式的文件。<br>  -i&lt;网络界面&gt; 使用指定的网络截面送出数据包。<br>  -l 使用标准输出列的缓冲区。<br>  -n 不把主机的网络地址转换成名字。<br>  -N 不列出域名。<br>  -O 不将数据包编码最佳化。<br>  -p 不让网络界面进入混杂模式。<br>  -q 快速输出，仅列出少数的传输协议信息。<br>  -r&lt;数据包文件&gt; 从指定的文件读取数据包数据。<br>  -s&lt;数据包大小&gt; 设置每个数据包的大小。<br>  -S 用绝对而非相对数值列出TCP关联数。<br>  -t 在每列倾倒资料上不显示时间戳记。<br>  -tt 在每列倾倒资料上显示未经格式化的时间戳记。<br>  -T&lt;数据包类型&gt; 强制将表达方式所指定的数据包转译成设置的数据包类型。<br>  -v 详细显示指令执行过程。<br>  -vv 更详细显示指令执行过程。<br>  -x 用十六进制字码列出数据包资料。<br> -w&lt;数据包文件&gt; 把数据包数据写入指定的文件。</p></blockquote></li><li><p>具体使用<br>开启tcpdump之后默认抓取的网络为当前网络。<br>抓取并存储为<code>result.cap</code>到当前目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tcpdump -w result.cap</span><br></pre></td></tr></table></figure><p>保存后的文件可打开wireshark进行更详细的报文分析。<br>使用tcpdump打开<code>.cap</code>文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tcpdump -r result.cap</span><br></pre></td></tr></table></figure><p>可用<code>|grep</code>进行过滤输出，但无法在存储时进行过滤存储。</p></li></ul><h2 id="wireshark的使用"><a href="#wireshark的使用" class="headerlink" title="wireshark的使用"></a>wireshark的使用</h2><ul><li><p>下载和说明<br>wireshark是一个开源的软件，在<code>windows、linux</code>平台均可下载。在<code>linux</code>上有命令行的版本和图形化的版本。<br><code>linux</code>安装（默认全部安装）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install wireshark</span><br></pre></td></tr></table></figure><p>如果无法启动的话，可能是没安装图形化界面，再执行一次安装<code>wireshark-common</code>就行了。</p></li><li><p>过滤的语法<br>过滤源地址或目的地址为<code>ip_a</code>之间交换的包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip.src==ip_a or ip.dst==ip_a</span><br></pre></td></tr></table></figure><p>过滤主机ip为<code>ip_a</code>的包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip.host==ip_a</span><br></pre></td></tr></table></figure><p>过滤ip为<code>ip_a</code>的包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip.addr==ip_a</span><br></pre></td></tr></table></figure><p>直接输入协议名称则过滤该协议，如<code>Tcp、UDP</code>等。</p></li></ul><h2 id="设置自动重启"><a href="#设置自动重启" class="headerlink" title="设置自动重启"></a>设置自动重启</h2><ul><li>创建一个服务<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/systemd/system/reboot.service</span><br></pre></td></tr></table></figure></li></ul><p>输入下面内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Reboot Service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">ExecStart=/sbin/reboot</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ul><li><p>再创建一个定时器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/systemd/system/reboot.timer</span><br></pre></td></tr></table></figure><p>输入下面内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Reboot Timer</span><br><span class="line"></span><br><span class="line">[Timer]</span><br><span class="line">OnCalendar=*-*-* 02:30:00</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=timers.target</span><br></pre></td></tr></table></figure></li><li><p>启动定时器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable --now reboot.timer</span><br></pre></td></tr></table></figure></li><li><p>查看定时任务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl list-timers</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><a href="https://cloud.tencent.com/developer/article/2227856">Linux设置定时重启</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;  本着记录的原则写下本文，可能会有错误或者缺漏。本文内容有相当一部分来自网络，如有侵权，请及时联系我。&lt;/p&gt;
&lt;h2 id=&quot;网卡驱动缺</summary>
      
    
    
    
    <category term="笔记" scheme="http://wu1015.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Linux网卡配置" scheme="http://wu1015.github.io/tags/Linux%E7%BD%91%E5%8D%A1%E9%85%8D%E7%BD%AE/"/>
    
    <category term="Linux" scheme="http://wu1015.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
